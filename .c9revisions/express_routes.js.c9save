{"revisions":{"1336857642667":{"ts":1336857642667,"silentsave":true,"restoring":false,"patch":[[]],"length":0},"1336857777369":{"contributors":[],"silentsave":false,"ts":1336857777369,"patch":[[{"diffs":[[1,"module.exports = function(app){\n    \napp.post ('/post/:what', function (req,res) {\n    console.log ('/post/:what' + req.params.what + ' : ' + req.body.me);\n    var uid = req.session.username,\n        udata = req.session.userdata,\n        whatid = req.params.what,\n        files = req.files,\n        filename = req.body.fname,\n        filedesc = req.body.fdesc,\n\t\tme = req.body.me;\n        \n\n        \n    if (!uid && !me) {\n\t\tconsole.log ('/post/:what : no uid');\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n    if (whatid == 'me') whatid = udata.outlet.id;\n\t\n\t//  THIS IS A WORKAROUND BEBAUSE PHONGGAP DOESNT SEND COOKIES WITH FileTransfer.upload!! NEED TO FIX\n\tvar fullname = me;\n    if (udata) fullname = udata.fullname;\n\t// END OF WORKAROUND\n    \n    if (files) {\n        \n        console.log('/post got a file' + filename);\n        console.dir(files);\n        \n        var host =  (require('url').parse(foauth.getOAuthResponse().instance_url))['host'];\n\n        rest.post('https://' + host + '/services/data/v24.0/' + 'chatter/feeds/record/'+whatid+'/feed-items', {\n          multipart: true,\n          headers: { \n              'Host': host,\n              'Authorization': 'OAuth '+foauth.getOAuthResponse().access_token,\n            },\n          data: {\n            'text':  fullname + ': '+ req.body.mess,\n            'desc': filedesc,\n            'title': filename,\n            'feedItemFileUpload': rest.file(files.attach.path, files.attach.name, null, 'binary',  files.attach.type)\n          }\n        }).on('complete', function(results) {\n            req.session = null; // method doesnt update the session\n\t\t\tconsole.log ('/post/:what : results : ' + results);\n\t\t\tconsole.log ('/post/:what : results : ' + JSON.stringify(results));\n            res.send (results);\n        });\n        \n    } else {\n\t\tconsole.log('/post no file');\n        var bdy = { \"body\" :   {\"messageSegments\" : [{\"type\": \"Text\", \"text\" : fullname + ': '+ req.body.mess  }] }};\n        queryAPI('chatter/feeds/record/'+whatid+'/feed-items', bdy, 'POST',  function(results) {\n            //console.log ('/post : results : ' + JSON.stringify(results));\n            req.session = null; // method doesnt update the session\n            res.send (results);\n       });\n    }\n});\n\napp.post ('/postcomment', function (req,res) {\n    \n    var uid = req.session.username,\n         udata = req.session.userdata;\n         \n    if (!uid) {\n    \tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n\n\n    var bdy = { \"body\" :   {\"messageSegments\" : [{\"type\": \"Text\", \"text\" : udata.fullname + ': '+  req.body.mess  }] }};\n    queryAPI('chatter/feed-items/'+ req.body.feeditem +'/comments', bdy, 'POST', function(results) {\n        //console.log ('/postcomment : results : ' + JSON.stringify(results));\n        req.session = null; // method doesnt update the session\n        res.send (results);\n   });\n});\n\napp.get ('/feedfile', function(req,res) {\n    var uid = req.session.username,\n        what = req.query.what,\n        mt = req.query.mt;\n        \n    if (!uid) {\n//        res.send ('Please Login', 400);\n//        return;\n\t}\n    \n    console.log ('/feedfile ' + what);\n    \n    var host =  (require('url').parse(foauth.getOAuthResponse().instance_url))['host'];\n\tres.header('Content-Type', mt);\n\tres.attachment();\n\t\n\tvar data = null;\n\thttps.get({\n\t\t\tmethod: 'get',\n\t\t\thost: host,\n\t\t\tpath: what,\n\t\t\theaders: {\n\t\t\t  'Authorization': 'OAuth '+foauth.getOAuthResponse().access_token,\n\t\t}}, function(fileres) {\n\t\t\tconsole.log(\"/feedfile : statusCode: \", fileres.statusCode);\n    \n\t\t\tfileres.on('data', function(_data) {\n\t\t\t\tconsole.log ('/feedfile : got some data');\n\t\t\t\tres.write (new Buffer(_data, 'binary'));\n\t\t\t\t\n\t\t\t});\n    \n\t\t\tfileres.on('end', function() {\n\t\t\t\tconsole.log ('/feedfile : end, send the response');\n\t\t\t\tres.end();\n\t\t\t});\n\t\t}).on('error', function(e) {\n\t\t  console.log(e);\n\t\t})\n});\n/*\napp.get ('/chat/:what', function(req,res) {\n    var uid = req.session.username,\n        udata = req.session.userdata,\n        whatid = req.params.what;\n        \n    if (!uid) {\n        res.send ('Please Login', 400);\n    \treturn;\n\t}   \n\n    res.render('chat.ejs', { layout: false, locals: {  feedid: whatid, udata: udata } });\n    //res.render('chat.ejs', { locals: {  feedid: udata.outlet.id, udata: udata } });\n});\n*/\napp.get ('/myfeed/:what', function (req,res) {\n    var uid = req.session.username,\n        udata = req.session.userdata,\n        whatid = req.params.what;\n        \n    if (!uid) {\n        res.send ('Please Login', 400);\n\t\treturn;\n\t}\n    if (whatid == 'me') {\n    \tconsole.log ('/myfeed : query for primary_group : ' + udata.belongs_to_primary);\n    \tgroups_collection.findOne({_id: new mongo_ObjectID (udata.belongs_to_primary)}, function(err, group) {\n    \t\t\tconsole.log ('/myfeed : got primary_group_memebers : [' + err + '] : ' + JSON.stringify(group));\n    \t\t\tvar team_data = {};\n    \t\t\tteam_data.outlet  = { name: group.name, pic: group.picture_url};\n    \t\t\tteam_data.outlet_team = {};\n    \t\t\tusers_collection.find({_id: { $in: group.members\t}}).toArray( function (err, users) {\n\n\t\t\t\t\t\tfor (var idx in users) {\n\t\t\t\t\t\t\tvar member =  users[idx];\n\t\t\t\t\t\t\tteam_data.outlet_team[member.fullname] =   { \n\t\t\t\t\t\t\t\tpoints: member.points,\n\t\t\t\t\t\t\t\tpic: member.picture_url\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tposts_collection.find({parentid: group._id}).toArray( function (err, posts) {\n\t\t\t\t\t\t\treq.session = null; // method doesnt update the session\n\t\t\t\t\t\t\tres.send({team: team_data, feed :posts, me: udata});\n\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t});\n    \t/*\n\t\t\tvar team_data = null,\n\t\t\tfeedres = null,\n\t\t\tsentres = false;\n\t\t\t\n\t\t\tvar sendresponse = function () {\n\t\t\t\tif (feedres && team_data && sentres==false) {\n\t\t\t\t\treq.session = null; // method doesnt update the session\n\t\t\t\t\tsentres = true;\n\t\t\t\t\tres.send({team: team_data, feed :feedres, me: udata});\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// get user names and pictures and outlets too!\n\t\t\tqueryAPI('query?q='+escape('select Name, PortalPic__c,  (select Name, Points__c, PortalPic__c from Contacts) from Account where Id = \\'' + udata.outlet.id + '\\''), null, 'GET',  function (results) {\n\t\t\t\tconsole.log ('myfeed: got team query results :' + JSON.stringify(results));\n\t\t\t\tteam_data = {};\n\t\t\t\tif (results.totalSize == 1) {\n\t\t\t\t\tteam_data.outlet  = { name: results.records[0].Name, pic: results.records[0].PortalPic__c};\n\t\t\t\t\tteam_data.outlet_team = {};\n\t\t\t\t\t\n\t\t\t\t\tif (results.records[0].Contacts) {\n\t\t\t\t\t\tvar team =  results.records[0].Contacts.records;\n\t\t\t\t\t\tfor (var m in team) {\n\t\t\t\t\t\t\tteam_data.outlet_team[team[m].Name] =   { \n\t\t\t\t\t\t\t\tpoints: team[m].Points__c,\n\t\t\t\t\t\t\t\tpic: team[m].PortalPic__c\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsendresponse();\n\t\t\t});\n\t\t\tqueryAPI('chatter/feeds/record/'+udata.outlet.id+'/feed-items', null, 'GET', function (results) {\n\t\t\t\tfeedres = results;\n\t\t\t\tsendresponse();\n\t\t\t});\n\t\t\t*/\n    } else {\n        // its a training id\n        // get user names and pictures and outlets too!\n         queryAPI('query?q='+escape('select Name, (select Contact__r.Name, Contact__r.Points__c, Contact__r.PortalPic__c from Training_Participation__r) from TR_Training_Availability__c where Id = \\'' + whatid + '\\''), null, 'GET',  function (results) {\n               console.log ('myfeed: got team query results :' + JSON.stringify(results));\n               var team_data = {};\n               if (results.totalSize == 1) {\n                    team_data.outlet  = { name: results.records[0].Name, pic: 'none'};\n                    team_data.outlet_team = {};\n                    \n                    if (results.records[0].Training_Participation__r) {\n                        var team =  results.records[0].Training_Participation__r.records;\n                        for (var m in team) {\n                             team_data.outlet_team[team[m].Contact__r.Name] =   { \n                                    points: team[m].Contact__r.Points__c,\n                                    pic: team[m].Contact__r.PortalPic__c \n                            };\n                        }\n                    }\n               }\n             queryAPI('chatter/feeds/record/'+whatid+'/feed-items', null, 'GET', function (results1) {\n                //console.log ('/myfeed : results : ' + JSON.stringify(results));\n                req.session = null; // method doesnt update the session\n                res.send({team: team_data, feed :results1, me: udata});\n            });\n        });        \n    }\n   \n});\n\n// LOGIN POST\napp.post('/ajaxlogin', function (req,res) {\n    var uid = req.body.username;\n    console.log ('ajaxlogin: Attempt to login as ' + uid + ', sessionid : ' + req.sessionID);\n    \n    if (uid) {\n        users_collection.findOne({username:uid}, function(err, item) {\n    \t\t\tif (err || !item) {\n    \t\t\t\tres.send({\n    \t\t\t\t\tmessage: 'username not found (ensure Contact exists with username in PortalID__c field): ' + uid\n    \t\t\t\t\t});\n    \t\t\t} else {\n\t\t\t\t\t\tconsole.log ('/home - got userdata : ' + JSON.stringify(item));    \n\t\t\t\t\t\tvar sess = req.session;\n\t\t\t\t\t\t//Properties on req.session are automatically saved on a response\n\t\t\t\t\t\tsess.username = item.username;\n\t\t\t\t\t\tsess.userdata = item;  \n\t\t\t\t\t\tsess.completed_events = item.completed_events;  \n\t\t\t\t\t\tres.send({ \n\t\t\t\t\t\t\tusername: item.username, \n\t\t\t\t\t\t\tuserdata: item\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\treturn;\n    \t\n    \t});\n/*\n        queryAPI('query?q='+escape('select Id, Name, PortalPic__c, PortalID__C, Points__c, Account.Name, Account.PortalPic__c, Account.id, (select Id, Name, Attempts__c, Best_Score__c, Passed__c, First_Score__c from Game_Events__r), (select Id, Name, Type__c, Training_Availability__c  from Training_Participation__r) from Contact where PortalID__c = \\'' + uid + '\\''), null, 'GET',  function (results) {\n           console.log ('login: got query results ' + JSON.stringify(results));\n           if (results.totalSize == 1) {\n               var udata = {\n                   id:  results.records[0].Id,\n                   fullname: results.records[0].Name,\n                   points: results.records[0].Points__c, \n                   outlet : {\n                       id: results.records[0].Account.Id,\n                       name: results.records[0].Account.Name,\n                       picture_url: results.records[0].Account.PortalPic__c\n                   },\n                   picture_url: results.records[0].PortalPic__c, \n                   completed_events: {},\n                   booked_training: {}\n                   };\n                   \n                if (results.records[0].Game_Events__r) {\n                    var gameevents =  results.records[0].Game_Events__r.records;\n                    for (var gidx in gameevents) {\n                        udata.completed_events[gameevents[gidx].Name] = {\n                            id:  gameevents[gidx].Id,\n                            attempts: gameevents[gidx].Attempts__c,\n                            passed: gameevents[gidx].Passed__c,\n                            score: gameevents[gidx].First_Score__c,\n                            bestscore: gameevents[gidx].Best_Score__c\n                        };\n                    }\n                }\n                \n                 if (results.records[0].Training_Participation__r) {\n                    var tevents =  results.records[0].Training_Participation__r.records;\n                    for (var gidx in tevents) {\n                        udata.booked_training[tevents[gidx].Training_Availability__c] = {\n                            id:  tevents[gidx].Id,\n                            name:  tevents[gidx].Name,\n                            type: tevents[gidx].Type__c\n                        };\n                    }\n                }\n                \n                console.log ('/home - got userdata : ' + JSON.stringify(udata));    \n                var sess = req.session;\n                //Properties on req.session are automatically saved on a response\n                sess.username = uid;\n                sess.userdata = udata;  \n                sess.completed_events = udata.completed_events;  \n                \n//                sess.start_idx = event_index -1;\n//                createEvents(uid, udata,  null);\n//                createTrainings (uid, udata);\n                \n                res.send({ \n                        username: uid, \n                        userdata: udata\n//                        current_index: sess.start_idx\n                        });\n               \n                return;\n           } else {\n                res.send({message : 'username not found (ensure Contact exists with username in PortalID__c field): ' + uid});\n                return;\n           }\n        });\n*/\n    } else {\n\tres.send({message : 'Please enter username'});\n    }\n});\n\napp.get('/ajaxlogin', function (req,res) {\n    var uid = req.session.username,\n        udata = req.session.userdata;\n//        start_idx = req.session.start_idx;\n        \n    console.log ('ajaxlogin: checking valid session for ' + uid + ', sessionid : ' + req.sessionID);\n        \n    if (!uid) {\n        // no active session\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} else {\n\t    // got active session\n        req.session = null; // not changing the session\n        \n        res.send({ \n                username: uid, \n                userdata: udata, \n//                current_index: start_idx\n                }); \n    }\n});\n\napp.get('/logout', function (req,res) {\n    req.session.username = null;\n    req.session.udata = null;\n    req.session.start_idx = null;\n    req.session.destroy();\n    res.redirect('/');\n    \n});\n\n\n\n\n\nvar PASS_SCORE = 100;\napp.post('/donequiz', function (req,res) {\n    var uid = req.session.username,\n        sid = req.sessionID,\n        udata = req.session.userdata;\n    if (!uid) {\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n\n\t\n\tvar qid = req.body.id,\n\t\t\tscore = req.body.score,\n\t\t\tquesTried = req.body.quesTried,\n\t\t\tnow_passed = (req.body.quesTried>0 && req.body.score>=PASS_SCORE),\n\t\t\taready_passed = false;\n\t\t\t\n\tconsole.log ('donequiz: complted quiz:' + uid + ', quiz : ' + qid + ', score ' + score + ', quesTried : ' + quesTried + ', now_passed : ' + now_passed);\n\t// need to of least tryed one question to register quiz attempt!\n\tif ( quesTried > 0) {\n\t\t\n\t\tvar alreadydone = udata.completed_events;\n\t\tvar points_award = 0;\n\t\tif (!alreadydone[qid]) { // first atemmpt\n\t\t\talreadydone[qid] = { id: \"\", passed: now_passed, score: score, attempts: 1, bestscore: score};\n\t\t\tpoints_award = score * event_collection[qid].points/100;\n\t\t\t\n\t\t\tudata.points = udata.points + points_award;\n\t\t\tconsole.log ('points: adding ' + points_award + ', total now : ' + udata.points);\n\t\t} else { // NOT first attempt\n            console.log ('donequiz: not first attempt for : ' + qid);\n\t\t\taready_passed = alreadydone[qid].passed;\n\t\t\talreadydone[qid].attempts = alreadydone[qid].attempts + 1;\n\t\t\talreadydone[qid].bestscore = Math.max(alreadydone[qid].bestscore, score);\n\t\t\tif (!aready_passed) alreadydone[qid].passed = now_passed;\n\t\t} \n\n\t\tconsole.log ('donequiz: create results event ' + JSON.stringify(alreadydone[qid]));\n\t\t// create event to register new results of quiz\n        \n        // send update to salesforce\n        var bdy = { Name: qid, Attempts__c: alreadydone[qid].attempts, Passed__c:  alreadydone[qid].passed, First_Score__c: alreadydone[qid].score, Best_Score__c: alreadydone[qid].bestscore};\n        var sfdc_url = 'sobjects/Game_Event__c/' + alreadydone[qid].id;\n        var httpmethod = 'PATCH'; // its an update\n        if (alreadydone[qid].id.length == 0) {\n            // its a insert, set the m/d file\n            bdy.Contact__c = udata.id;\n            bdy.Points__c = points_award;\n            httpmethod = 'POST';\n        }\n        console.log ('/donequiz - ' + sfdc_url + ' : ' + JSON.stringify(bdy));\n        \n        queryAPI(sfdc_url, bdy, httpmethod, function(response) {\n            if (response) {\n                console.log ('/donequiz -  response : ' +  JSON.stringify(response));\n                console.log ('/donequiz setting id ' + qid + ' : ' + response.id);\n                alreadydone[qid].id = response.id;\n            }\n\n            \n    \t\tvar event = {\n//    \t\t\tindex: event_index++,\n//    \t\t\ttimestamp: new Date().getTime(),\n//    \t\t\tactive: true,\n    \t\t\titem_id: qid,\n    \t\t\titem_type: \"QUIZ\",\n    \t\t\tresults_data: alreadydone[qid]\n    \t\t};\n    \t\t//if (!events_by_user[uid]) events_by_user[uid] = [];\t\n    \t\t//events_by_user[uid].push(event);\n            \n            sendEventsToSession([event], sid);\n            \n            req.session.userdata = udata;  // update the session store with the new values.\n            console.log ('/donequiz - udata.completed_events : ' + JSON.stringify(req.session.userdata));\n            res.send({points: udata.points});\n            \n\n            if ((!aready_passed) && now_passed) {\n        \t\t// just passwd new quiz, hunt for new unlocks!!\n    \t\t\tcreateEvents (uid, udata, qid, sid);\n    \t\t}\n    \t\t//notify_long_connection_by_user(uid, udata);\n        });\n\t} else {\n\t\n    \t// update points in response\n        req.session = null;\n    \tres.send({points: udata.points});\n\t}\n});\n\n\n\napp.post('/booktraining', function (req,res) {\n    var uid = req.session.username,\n        sid = req.sessionID,\n        udata = req.session.userdata;\n    if (!uid) {\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n\n\tvar tid = req.body.tid,\n\t\ttdate = req.body.tdate;\n\n\tconsole.log ('booktraining() complted quiz:' + tid + ', data : ' + tdate);\n\t// need to of least tryed one question to register quiz attempt!\n\n\t\t\n\t\tvar alreadybooked = udata.booked_training;\n        if (!alreadybooked[tid]) { // first atemmpt\n            console.log ('booktraining() first atemmpt');\n    \t\talreadybooked[tid] = { id: \"\",   type: 'Booked on ' + tdate};\n        } else {\n            // just update date\n            console.log ('booktraining() just update date');\n            alreadybooked[tid] = { id: alreadybooked[tid].id, type: 're-Booked on ' + tdate };\n        }\n        \n        // send update to salesforce\n        var bdy = { Type__c:  alreadybooked[tid].type};\n        var sfdc_url = 'sobjects/TR_Training_Participation__c/' + alreadybooked[tid].id;\n        var httpmethod = 'PATCH'; // its an update\n        if (alreadybooked[tid].id.length == 0) {\n            // its a insert, set the m/d file\n            bdy.Contact__c = udata.id;\n            bdy.Training_Availability__c = tid;\n            httpmethod = 'POST';\n        }\n        console.log ('booktraining() ' + sfdc_url + ' : ' + JSON.stringify(bdy));\n        \n        queryAPI(sfdc_url, bdy, httpmethod, function(response) {\n            if (response) {\n                console.log ('/booktraining -  response : ' +  JSON.stringify(response));\n                console.log ('/booktraining setting id ' + tid + ' : ' + response.id);\n                alreadybooked[tid].id = response.id;\n            }\n\n            \n    \t\tvar event = {\n//    \t\t\tindex: event_index++,\n//    \t\t\ttimestamp: new Date().getTime(),\n//    \t\t\tactive: true,\n    \t\t\titem_id: tid,\n    \t\t\titem_type: \"TRAINING\",\n    \t\t\tresults_data: alreadybooked[tid]\n    \t\t};\n    \t\t//if (!events_by_user[uid]) events_by_user[uid] = [];\t\n    \t\t//events_by_user[uid].push(event);\n            sendEventsToSession([event], sid);\n            \n            \n            req.session.userdata = udata;  // update the session store with the new values.\n            console.log ('/booktraining - udata.completed_events : ' + JSON.stringify(req.session.userdata));\n            res.send({points: udata.points});\n            \n\n    \t\t//notify_long_connection_by_user(uid, udata);\n        });\n\n});\n\n// If we have a LongPoll request, respond with the events. otherwise add it to the 'temp_events_pending_longpoll' array!\n//var temp_events_pending_longpoll = {};\n/*\nfunction sendEventsToSession (events, sid) {\n\tconsole.log ('sendEventsToSession()');\n\tvar req_info = long_connections_by_session[sid];\n\tif (!req_info || req_info.completed) {\n\t\tconsole.log ('sendEventsToSession() no outstanding longpolling requests for ' + sid + ', store events for pending longpoll');\n\t\tif (!temp_events_pending_longpoll[sid])    \n\t\t\ttemp_events_pending_longpoll[sid] = events;\n\t\telse\n\t\t\ttemp_events_pending_longpoll[sid].push.apply(temp_events_pending_longpoll[sid], events);\n\t} else {\n\t\tconsole.log ('sendEventsToSession() got active connection for user ' + sid + ', sending events');\n\n\t\tclearTimeout(req_info.timeoutid);\n\t\treq_info.completed = true;\n\t\treq_info.request.resume();\n\t\t//event.my_points = udata.points;\n\t\treq_info.request.session = null; // method doesnt update the session\n\t\treq_info.response.send (JSON.stringify(events));\n\t}\n}\n*/\n\n\n\n\napp.get('/longpoll/:lasteventprocessed', function (req, res) {\n    var uid = req.session.username,\n        udata = req.session.userdata,\n        sid = req.sessionID,\n        lasteventprocessed = req.params.lasteventprocessed;\n        \n    if (!uid) {\n    \tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n    \n    if (lasteventprocessed == 0) {\n        long_connections_by_session[sid] = null;\n        //temp_events_pending_longpoll[sid] = null;\n       createEvents(uid, udata,  null, req.sessionID);\n       createTrainings (uid, udata, req.sessionID);\n    }\n    \n\tconsole.log ('longpoll() got request from ' + uid + ' last eventprocessed from url : ' + lasteventprocessed);\n\t// check the required parameters\n\n    \n\t//var event = nextEvent(uid, lasteventprocessed);\n    //var events = temp_events_pending_longpoll[sid];\n\t//if (!events) {\n\n    session_events_collection.findAndModify (\n        {_id: sid},\n        [],\n    \t{$unset :{ 'events' : 1}},\n    \t{new: false, upsert: false },\n    \tfunction(err, data) {\n            if (err || !data || !data.events) {\n                console.log ('longpoll() :: no event data ('  + err + ')  : ' + JSON.stringify(data));\n            \tconsole.log ('longpoll() pause request, no event to send ' + lasteventprocessed);\n        \n        \t\tvar req_info = { request: req, response: res, lasteventprocessed: lasteventprocessed, completed: false};\n        \t\treq_info.timeoutid = setTimeout( function () { \n        \t\t\tconsole.log ('longpoll() saved req_info,  timeout pulse');\n        \t\t\treq_info.request.resume();\n        \t\t\treq_info.response.send({item_type: \"PULSE\"});\n        \t\t\treq_info.completed = true;\n        \t\t\t }, connectionTimeout * 1000); \n        \n        \t\t//if (!long_connections_by_session[sid])\n        \t\t//\tlong_connections_by_session[sid] = [];  \n        \t\tlong_connections_by_session[sid] = req_info;\n        \t\treq.pause();\n        \t\tconsole.log ('longpoll() stored and paused request');\n        \n            } else {\n        \t\tconsole.log ('longpoll() send the stored event data : ' + JSON.stringify(data));\n                res.send(JSON.stringify(data.events));\n            }\n    \t});\n/*\n\t} else {\n\t\tconsole.log ('longpoll() got event to send to user');\n\t\t//event.my_points =udata.points;\n\t\t//setTimeout (function() {  // ADD A 1 SECOND DELAY - JUST FOR EFFECT!!!\n\t\tres.send(JSON.stringify(events));\n\t\tconsole.log ('longpoll sent :' + JSON.stringify(events));\n        temp_events_pending_longpoll[sid] = null;\n\t\t//}, 1000);\n\t}\n*/\n\n});\n\napp.get ('/stream/:filename', function (req,res) {\n\tvar fn = __dirname+'/public/media/' +req.params.filename;\n\tconsole.log ('stream: filename ' + fn);\n\tres.sendfile (fn);\n});\n\n}"]],"start1":0,"start2":0,"length1":0,"length2":23257}]],"length":23257,"saved":false},"1336858593812":{"contributors":[],"silentsave":false,"ts":1336858593812,"patch":[[{"diffs":[[0,"tion(app"],[1,", collections"],[0,"){\n    \n"]],"start1":21,"start2":21,"length1":16,"length2":29},{"diffs":[[0,");\n    \t"],[1,"collections."],[0,"groups_c"]],"start1":4643,"start2":4643,"length1":16,"length2":28},{"diffs":[[0,"\n    \t\t\t"],[1,"collections."],[0,"users_co"]],"start1":5003,"start2":5003,"length1":16,"length2":28},{"diffs":[[0,"\t\n\t\t\t\t\t\t"],[1,"collections."],[0,"posts_co"]],"start1":5313,"start2":5313,"length1":16,"length2":28},{"diffs":[[0,") {\n        "],[1,"collections."],[0,"users_collec"]],"start1":8655,"start2":8655,"length1":24,"length2":36}]],"length":23318,"saved":false},"1336859664358":{"contributors":[],"silentsave":false,"ts":1336859664358,"patch":[[{"diffs":[[1,"var rest = require('restler');\n\n"],[0,"module.e"]],"start1":0,"start2":0,"length1":8,"length2":40},{"diffs":[[0,"score * "],[1,"collections."],[0,"event_co"]],"start1":14504,"start2":14504,"length1":16,"length2":28},{"diffs":[[0,"ts/100;\n"],[-1,""],[0,"\t\t\t\n\t\t\tu"]],"start1":14550,"start2":14550,"length1":16,"length2":16},{"diffs":[[0,"}\n*/\n\n\n\n"],[1,"var connectionTimeout = 25; // always send a empty '200' reponse to each open request after 60seconds."],[0,"\n"],[-1,""],[0,"app.get("]],"start1":20688,"start2":20688,"length1":17,"length2":119},{"diffs":[[0,"        "],[1,"collections."],[0,"long_con"]],"start1":21141,"start2":21141,"length1":16,"length2":28},{"diffs":[[0,"nts) {\n\n    "],[1,"collections."],[0,"session_even"]],"start1":21639,"start2":21639,"length1":24,"length2":36},{"diffs":[[0,"      \t\t"],[1,"collections."],[0,"long_con"]],"start1":22621,"start2":22621,"length1":16,"length2":28},{"diffs":[[0,"e (fn);\n"],[-1,""],[0,"});\n\n"],[1,"\n\n\nfunction createEvents(uid, udata, just_completed, sid) {\n    console.log ('createEvents() ' + uid + ', just_completed (set if just want delta): ' + just_completed);\n\t\n    // TODO...\n    var cursor = collections.events_collection.find ({});\n    cursor.toArray( function (err, item) {\n        console.log ('createEvents() query events item (' + err + ') : ' + JSON.stringify (item)); \n        var ret_events = [];\n        for (var idx in item) {\n\n            var i = item[idx]._id;\n    \t\tvar e = item[idx];\n    \t\tconsole.log ('createEvents : checking item : ' + i + '  :: ' + JSON.stringify (e));\n    \t\t\n    \t\tvar event = null, \n    \t\t\tresults_data = null,\n    \t\t\tselected = true, \n    \t\t\tnewlyselected = false;\n    \t\t\t\t\n    \t\tfor (var needtocomplete in e.forwho.completed) {\n    \t\t\tconsole.log ('createEvents: checking prereq for event, required : ' + needtocomplete + ', is it in ' + JSON.stringify(udata.completed_events) );\n    \t\t\tif (just_completed == needtocomplete ) {\n    \t\t\t\tnewlyselected = true;\n    \t\t\t}\n    \t\t\tvar hascompleted = udata.completed_events[needtocomplete];\n    \t\t\tif ((!hascompleted) || hascompleted.passed == false) {\n    \t\t\t//if (! (needtocomplete in users_collection[user].completed_events)) {\n    \t\t\t\tselected = false; break;\n    \t\t\t}\n    \t\t}\n    \t\tif (((!selected) || (just_completed != null && newlyselected == false))) {\n                console.log ('not selected');\n    \t\t} else {\n                // 100 points for just getting a new event\n        \t    //udata.points = udata.points + 50;\n        \t\t//console.log ('createEvents: points: adding ' + '50' + ', total now : ' + udata.points);\n        \n        \t\tvar event = {\n            //\t\t\tindex: event_index++,\n            //\t\t\ttimestamp: new Date().getTime(),\n            //\t\t\tactive: true,\n            \t\t\titem_id: i,\n            \t\t\titem_type: e.type,\n            \t\t\titem_data: e,\n            \t\t\tresults_data: udata.completed_events[i]\n        \t\t    };\n        \t\t//if (!events_by_user[uid])\tevents_by_user[uid] = [];\t\n        \t\t//events_by_user[uid].push(event);\n        \t\tconsole.log('createEvents: ADDED EVENT  [' + event.item_id +'], event_data ' + JSON.stringify(event.item_data) + ', results_data ' + JSON.stringify(event.results_data)  + ', newlyselected : '+ newlyselected);\n                ret_events.push (event);\n    \t\t}\n        }\n        sendEventsToSession(ret_events, sid);\n    });\n}\n\nfunction createTrainings (uid, udata, sid) {\n    console.log ('createTrainings :' + uid);\n     queryAPI('query?q='+escape('select Id, Name, Description__c, Start_date__c, Total_Participations__c, TR_Training__r.Content_Reference__c  , Training_Categories__c  from TR_Training_Availability__c where Account__c = \\'' + udata.outlet.id + '\\''), null, 'GET',  function (results) {\n           console.log ('createTrainings: got  query results :' + JSON.stringify(results));\n            if (results.totalSize >= 1) {\n                var ret_events = [];\n                for (var m in results.records) {\n                    var trec = results.records[m];\n                    \n                    var event = {\n    //                \t\tindex: event_index++,\n    //            \t\t\ttimestamp: new Date().getTime(),\n    //            \t\t\tactive: true,\n                \t\t\titem_id: trec.Id,\n                \t\t\titem_type: 'TRAINING',\n                \t\t\titem_data: {\n                                name: trec.Name,\n                        \t\tdesc: trec.Description__c,\n                    \t\t\tinfo: trec.Total_Participations__c\n                                },\n            \t\t\t    results_data: udata.booked_training[trec.Id]\n            \t\t    };\n//                    if (!events_by_user[uid])    events_by_user[uid] = [];\t\n//            \t\tevents_by_user[uid].push(event);\n                    console.log('createTrainings: ADDED EVENT [' + JSON.stringify(event));\n                    ret_events.push(event);\n                    \n                }\n//              notify_long_connection_by_user(uid, udata);\n                sendEventsToSession(ret_events, sid);\n           }\n     });\n}\n\n\n\nfunction sendEventsToSession (events, sid) {\n\tconsole.log ('sendEventsToSession() [' + sid + '] : '+ events.length);\n    var req_info = long_connections_by_session[sid];\n    if (req_info === undefined || req_info.completed) { \n        console.log ('sendEventsToSession() : save events to database & message all dynos to see if they have a longpoll for that session');\n\t    collections.session_events_collection.update ({_id: sid}, {$pushAll :{'events' :  events}}, {upsert: true}, function(err, data) {\n\t\t\tconsole.log ('sendEventsToSession, created event data on session : [' + err + '] : ' + data);\n\t\t\tlongpoll_exchange.publish ('#', {type: 'NEW_EVENT_DATA', sessionid: sid}, { contentType: 'application/json'});\n    \t});\n    } else {\n        clearTimeout(req_info.timeoutid);\n    \treq_info.completed = true;\n    \treq_info.request.resume();\n    \t//event.my_points = udata.points;\n    \treq_info.request.session = null; // method doesnt update the session\n\t\treq_info.response.send (JSON.stringify(events));\n    }\n}\n\n\n\n\n\n"],[0,"}"]],"start1":23486,"start2":23486,"length1":14,"length2":5086}]],"length":28572,"saved":false},"1336859688245":{"contributors":[],"silentsave":false,"ts":1336859688245,"patch":[[{"diffs":[[0," var req_info = "],[1,"collections."],[0,"long_connections"]],"start1":27672,"start2":27672,"length1":32,"length2":44},{"diffs":[[0,"ta);\n\t\t\t"],[1,"collections."],[0,"longpoll"]],"start1":28159,"start2":28159,"length1":16,"length2":28}]],"length":28596,"saved":false},"1336859820996":{"contributors":[],"silentsave":false,"ts":1336859820996,"patch":[[{"diffs":[[0,"    if ("],[1,"!"],[0,"req_info"]],"start1":27734,"start2":27734,"length1":16,"length2":17},{"diffs":[[0,"nfo "],[-1,"=== undefined "],[0,"|| r"]],"start1":27748,"start2":27748,"length1":22,"length2":8}]],"length":28583,"saved":false},"1336860009641":{"contributors":[],"silentsave":false,"ts":1336860009641,"patch":[[{"diffs":[[0,"estler')"],[1,",\n    mongodb = require('mongodb')"],[0,";\n\nmodul"]],"start1":21,"start2":21,"length1":16,"length2":50},{"diffs":[[0,"ew mongo"],[-1,"_"],[1,"db."],[0,"ObjectID"]],"start1":4762,"start2":4762,"length1":17,"length2":19}]],"length":28619,"saved":false},"1336860071604":{"contributors":[],"silentsave":false,"ts":1336860071604,"patch":[[{"diffs":[[0,"sessionID);\n"],[1,"//"],[0,"       creat"]],"start1":21333,"start2":21333,"length1":24,"length2":26}]],"length":28621,"saved":false},"1336861421843":{"contributors":[],"silentsave":false,"ts":1336861421843,"patch":[[{"diffs":[[0,"d > 0) {\n\t\t\n"],[1,"        collections.event_collection.findOne({_id: qid}, function(err, record) {\n    "],[0,"\t\tvar alread"]],"start1":14300,"start2":14300,"length1":24,"length2":109},{"diffs":[[0,"events;\n"],[1,"    "],[0,"\t\tvar po"]],"start1":14433,"start2":14433,"length1":16,"length2":20},{"diffs":[[0,"rd = 0;\n"],[1,"    "],[0,"\t\tif (!a"]],"start1":14461,"start2":14461,"length1":16,"length2":20},{"diffs":[[0,"atemmpt\n"],[1,"    "],[0,"\t\t\talrea"]],"start1":14509,"start2":14509,"length1":16,"length2":20},{"diffs":[[0,"score};\n"],[1,"    "],[0,"\t\t\tpoint"]],"start1":14611,"start2":14611,"length1":16,"length2":20},{"diffs":[[0,"ons."],[-1,"event_collection[qid]"],[1,"record"],[0,".poi"]],"start1":14657,"start2":14657,"length1":29,"length2":14},{"diffs":[[0,"ts/100;\n"],[-1,"\t\t\t\n"],[1,"    \t\t\t\n    "],[0,"\t\t\tudata"]],"start1":14672,"start2":14672,"length1":20,"length2":28},{"diffs":[[0,"_award;\n"],[1,"    "],[0,"\t\t\tconso"]],"start1":14731,"start2":14731,"length1":16,"length2":20},{"diffs":[[0,"oints);\n"],[1,"    "],[0,"\t\t} else"]],"start1":14820,"start2":14820,"length1":16,"length2":20},{"diffs":[[0,"rst attempt\n"],[1,"    "],[0,"            "]],"start1":14852,"start2":14852,"length1":24,"length2":28},{"diffs":[[0,"+ qid);\n"],[1,"    "],[0,"\t\t\taread"]],"start1":14930,"start2":14930,"length1":16,"length2":20},{"diffs":[[0,"passed;\n"],[1,"    "],[0,"\t\t\talrea"]],"start1":14978,"start2":14978,"length1":16,"length2":20},{"diffs":[[0,"ts + 1;\n"],[1,"    "],[0,"\t\t\talrea"]],"start1":15044,"start2":15044,"length1":16,"length2":20},{"diffs":[[0,"score);\n"],[1,"    "],[0,"\t\t\tif (!"]],"start1":15125,"start2":15125,"length1":16,"length2":20},{"diffs":[[0,"ed;\n"],[1,"    "],[0,"\t\t} \n"],[-1,"\n"],[1,"    \n    "],[0,"\t\tco"]],"start1":15194,"start2":15194,"length1":14,"length2":26},{"diffs":[[0,"qid]));\n"],[1,"    "],[0,"\t\t// cre"]],"start1":15294,"start2":15294,"length1":16,"length2":20},{"diffs":[[0,"of quiz\n        "],[-1,"\n"],[1,"    \n            \n            /* update mongo */\n            collections.users_collection.update ({username: uid}, {set : { completed_events.?????: } \n            \n            \n            /*\n    "],[0,"        // send "]],"start1":15348,"start2":15348,"length1":33,"length2":228},{"diffs":[[0,"e to salesforce\n"],[1,"    "],[0,"        var bdy "]],"start1":15581,"start2":15581,"length1":32,"length2":36},{"diffs":[[0,"score};\n        "],[1,"    "],[0,"var sfdc_url = '"]],"start1":15785,"start2":15785,"length1":32,"length2":36},{"diffs":[[0,"id].id;\n        "],[1,"    "],[0,"var httpmethod ="]],"start1":15861,"start2":15861,"length1":32,"length2":36},{"diffs":[[0," update\n        "],[1," "],[1,"   "],[0,"if (alreadydone["]],"start1":15916,"start2":15916,"length1":32,"length2":36},{"diffs":[[0,") {\n            "],[1,"    "],[0,"// its a insert,"]],"start1":15971,"start2":15971,"length1":32,"length2":36},{"diffs":[[0,"ile\n            "],[1," "],[1,"   "],[0,"bdy.Contact__c ="]],"start1":16021,"start2":16021,"length1":32,"length2":36},{"diffs":[[0,"__c = udata.id;\n"],[1,"    "],[0,"            bdy."]],"start1":16052,"start2":16052,"length1":32,"length2":36},{"diffs":[[0,"rd;\n            "],[1,"  "],[1,"  "],[0,"httpmethod = 'PO"]],"start1":16110,"start2":16110,"length1":32,"length2":36},{"diffs":[[0,"T';\n        "],[-1,"}\n"],[1,"    }\n   "],[0,"        "],[1," "],[0,"console.log "]],"start1":16147,"start2":16147,"length1":34,"length2":42},{"diffs":[[0,"(bdy));\n        "],[-1,"\n"],[1,"    \n    "],[0,"        queryAPI"]],"start1":16240,"start2":16240,"length1":33,"length2":41},{"diffs":[[0,") {\n            "],[1,"    "],[0,"if (response) {\n"]],"start1":16326,"start2":16326,"length1":32,"length2":36},{"diffs":[[0,"if (response) {\n"],[1,"    "],[0,"                "]],"start1":16346,"start2":16346,"length1":32,"length2":36},{"diffs":[[0,"                "],[1,"    "],[0,"console.log ('/d"]],"start1":16452,"start2":16452,"length1":32,"length2":36},{"diffs":[[0,"            "],[1,"    "],[0,"alreadydone["]],"start1":16543,"start2":16543,"length1":24,"length2":28},{"diffs":[[0,"id;\n            "],[-1,"}\n\n"],[1,"    }\n    \n  "],[0,"            \n   "]],"start1":16590,"start2":16590,"length1":35,"length2":45},{"diffs":[[0," \n              "],[-1,"\n"],[1,"  \n    "],[0,"    \t\tvar event "]],"start1":16615,"start2":16615,"length1":33,"length2":39},{"diffs":[[0,"\t\tvar event = {\n"],[1,"    "],[0,"//    \t\t\tindex: "]],"start1":16642,"start2":16642,"length1":32,"length2":36},{"diffs":[[0," event_index++,\n"],[1,"    "],[0,"//    \t\t\ttimesta"]],"start1":16677,"start2":16677,"length1":32,"length2":36},{"diffs":[[0,"te().getTime(),\n"],[1,"    "],[0,"//    \t\t\tactive:"]],"start1":16723,"start2":16723,"length1":32,"length2":36},{"diffs":[[0,"\t\tactive: true,\n"],[1,"    "],[0,"    \t\t\titem_id: "]],"start1":16750,"start2":16750,"length1":32,"length2":36},{"diffs":[[0,"em_id: qid,\n"],[1,"    "],[0,"    \t\t\titem_"]],"start1":16779,"start2":16779,"length1":24,"length2":28},{"diffs":[[0,"\"QUIZ\",\n    "],[1," "],[1,"   "],[0,"\t\t\tresults_d"]],"start1":16813,"start2":16813,"length1":24,"length2":28},{"diffs":[[0,"dydone[qid]\n"],[1,"    "],[0,"    \t\t};\n   "]],"start1":16851,"start2":16851,"length1":24,"length2":28},{"diffs":[[0,"       \t\t};\n    "],[1,"  "],[1,"  "],[0,"\t\t//if (!events_"]],"start1":16864,"start2":16864,"length1":32,"length2":36},{"diffs":[[0,"ser[uid] = [];\t\n"],[1,"    "],[0,"    \t\t//events_b"]],"start1":16925,"start2":16925,"length1":32,"length2":36},{"diffs":[[0,"t);\n            "],[1,"   "],[-1,"\n"],[1," \n    "],[0,"            send"]],"start1":16982,"start2":16982,"length1":33,"length2":41},{"diffs":[[0,"d);\n            "],[1,"   "],[-1,"\n"],[1," \n    "],[0,"            req."]],"start1":17050,"start2":17050,"length1":33,"length2":41},{"diffs":[[0,"the new values.\n"],[1,"    "],[0,"            cons"]],"start1":17151,"start2":17151,"length1":32,"length2":36},{"diffs":[[0,"));\n            "],[1,"    "],[0,"res.send({points"]],"start1":17273,"start2":17273,"length1":32,"length2":36},{"diffs":[[0,"});\n            "],[-1,"\n\n"],[1,"    \n    \n    "],[0,"            if ("]],"start1":17323,"start2":17323,"length1":34,"length2":46},{"diffs":[[0,") {\n        "],[1,"  "],[1,"  "],[0,"\t\t// just pa"]],"start1":17399,"start2":17399,"length1":24,"length2":28},{"diffs":[[0,"locks!!\n"],[1,"    "],[0,"    \t\t\tc"]],"start1":17457,"start2":17457,"length1":16,"length2":20},{"diffs":[[0,", sid);\n    "],[1,"  "],[1,"  "],[0,"\t\t}\n"],[1,"    "],[0,"    \t\t//noti"]],"start1":17505,"start2":17505,"length1":28,"length2":36},{"diffs":[[0,"        "],[-1,"});"],[1,"    });\n            */\n        }"],[0,"\n\t} else"]],"start1":17581,"start2":17581,"length1":19,"length2":48}]],"length":29151,"saved":false},"1336939679745":{"contributors":[],"silentsave":false,"ts":1336939679745,"patch":[[{"diffs":[[0,"rd = 0;\n"],[1,"            \n"],[0,"    \t\tif"]],"start1":14461,"start2":14461,"length1":16,"length2":29},{"diffs":[[0,"rst atemmpt\n"],[-1,""],[0,"    \t\t\talrea"]],"start1":14518,"start2":14518,"length1":24,"length2":24},{"diffs":[[0,"score * "],[-1,"collections."],[0,"record.p"]],"start1":14654,"start2":14654,"length1":28,"length2":16},{"diffs":[[0,"}, {"],[1," $"],[0,"set"],[-1," : { completed_events.?????: } \n"],[1,": { \"completed_events.\"+qid : alreadydone[qid] } }, {safe:true}, function(err) {\n                        if (err) { \n                            console.warn(err.message);\n                        } else {\n                            console.log('successfully updated'); \n             \n                        \tvar event = {\n                    \t\t\titem_id: qid,\n                    \t\t\titem_type: \"QUIZ\",\n                    \t\t\tresults_data: alreadydone[qid]\n                    \t\t};\n                    \t\t//if (!events_by_user[uid]) events_by_user[uid] = [];\t\n                    \t\t//events_by_user[uid].push(event);\n                            \n                            sendEventsToSession([event], sid);\n                            \n                            req.session.userdata = udata;  // update the session store with the new values.\n                            console.log ('/donequiz - udata.completed_events : ' + JSON.stringify(req.session.userdata));\n                            res.send({points: udata.points});\n                            \n                \n                            if ((!aready_passed) && now_passed) {\n                        \t\t// just passwd new quiz, hunt for new unlocks!!\n                    \t\t\tcreateEvents (uid, udata, qid, sid);\n                    \t\t}\n                        }\n                    });\n            "],[0,"    "]],"start1":15477,"start2":15477,"length1":43,"length2":1374}]],"length":30483,"saved":false},"1336940495412":{"contributors":[],"silentsave":false,"ts":1336940495412,"patch":[[{"diffs":[[0,"te mongo */\n"],[1,"            var updatesJson = {};\n            updatesJson[\"completed_events.\"+qid] = alreadydone[qid];\n"],[0,"            "]],"start1":15402,"start2":15402,"length1":24,"length2":127},{"diffs":[[0,"et: "],[-1,"{ \"completed_events.\"+qid : alreadydone[qid] }"],[1,"updatesJson"],[0," }, "]],"start1":15587,"start2":15587,"length1":54,"length2":19}]],"length":30551,"saved":false},"1336940535938":{"contributors":[],"silentsave":false,"ts":1336940535938,"patch":[[{"diffs":[[0,"       }"],[1,");"],[0,"\n\t} else"]],"start1":19013,"start2":19013,"length1":16,"length2":18}]],"length":30553,"saved":false},"1336940617117":{"contributors":[],"silentsave":false,"ts":1336940617117,"patch":[[{"diffs":[[0,"ns.event"],[1,"s"],[0,"_collect"]],"start1":14329,"start2":14329,"length1":16,"length2":17}]],"length":30554,"saved":false},"1336940954186":{"contributors":[],"silentsave":false,"ts":1336940954186,"patch":[[{"diffs":[[0,";  \n"],[-1,"\t\t\t\t\t\tsess.completed_events = item.completed_events;  \n"],[0,"\t\t\t\t"]],"start1":9230,"start2":9230,"length1":63,"length2":8}]],"length":30499,"saved":false},"1336943099870":{"contributors":[],"silentsave":false,"ts":1336943099870,"patch":[[{"diffs":[[0,"){\n    \n"],[1,"\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////                USER        ////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////   \n\napp.get ('/profile', function(req,res) {\n    var uid = req.session.username,\n        udata = req.session.userdata;\n        \n    if (!uid) {\n        res.send ('Please Login', 400);\n        return;\n    }   \n\n    //res.render('profile.ejs', { layout: false, locals: {  feedid: whatid, udata: udata } });\n    res.render('profile.ejs', { locals: {  me: udata } });\n});\n\n\n// LOGIN POST\napp.post('/ajaxlogin', function (req,res) {\n    var uid = req.body.username;\n    console.log ('ajaxlogin: Attempt to login as ' + uid + ', sessionid : ' + req.sessionID);\n    \n    if (uid) {\n        collections.users_collection.findOne({username:uid}, function(err, item) {\n    \t\t\tif (err || !item) {\n    \t\t\t\tres.send({\n    \t\t\t\t\tmessage: 'username not found (ensure Contact exists with username in PortalID__c field): ' + uid\n    \t\t\t\t\t});\n    \t\t\t} else {\n\t\t\t\t\t\tconsole.log ('/home - got userdata : ' + JSON.stringify(item));    \n\t\t\t\t\t\tvar sess = req.session;\n\t\t\t\t\t\t//Properties on req.session are automatically saved on a response\n\t\t\t\t\t\tsess.username = item.username;\n\t\t\t\t\t\tsess.userdata = item;  \n\t\t\t\t\t\tres.send({ \n\t\t\t\t\t\t\tusername: item.username, \n\t\t\t\t\t\t\tuserdata: item\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\treturn;\n    \t\n    \t});\n/*\n        queryAPI('query?q='+escape('select Id, Name, PortalPic__c, PortalID__C, Points__c, Account.Name, Account.PortalPic__c, Account.id, (select Id, Name, Attempts__c, Best_Score__c, Passed__c, First_Score__c from Game_Events__r), (select Id, Name, Type__c, Training_Availability__c  from Training_Participation__r) from Contact where PortalID__c = \\'' + uid + '\\''), null, 'GET',  function (results) {\n           console.log ('login: got query results ' + JSON.stringify(results));\n           if (results.totalSize == 1) {\n               var udata = {\n                   id:  results.records[0].Id,\n                   fullname: results.records[0].Name,\n                   points: results.records[0].Points__c, \n                   outlet : {\n                       id: results.records[0].Account.Id,\n                       name: results.records[0].Account.Name,\n                       picture_url: results.records[0].Account.PortalPic__c\n                   },\n                   picture_url: results.records[0].PortalPic__c, \n                   completed_events: {},\n                   booked_training: {}\n                   };\n                   \n                if (results.records[0].Game_Events__r) {\n                    var gameevents =  results.records[0].Game_Events__r.records;\n                    for (var gidx in gameevents) {\n                        udata.completed_events[gameevents[gidx].Name] = {\n                            id:  gameevents[gidx].Id,\n                            attempts: gameevents[gidx].Attempts__c,\n                            passed: gameevents[gidx].Passed__c,\n                            score: gameevents[gidx].First_Score__c,\n                            bestscore: gameevents[gidx].Best_Score__c\n                        };\n                    }\n                }\n                \n                 if (results.records[0].Training_Participation__r) {\n                    var tevents =  results.records[0].Training_Participation__r.records;\n                    for (var gidx in tevents) {\n                        udata.booked_training[tevents[gidx].Training_Availability__c] = {\n                            id:  tevents[gidx].Id,\n                            name:  tevents[gidx].Name,\n                            type: tevents[gidx].Type__c\n                        };\n                    }\n                }\n                \n                console.log ('/home - got userdata : ' + JSON.stringify(udata));    \n                var sess = req.session;\n                //Properties on req.session are automatically saved on a response\n                sess.username = uid;\n                sess.userdata = udata;  \n                sess.completed_events = udata.completed_events;  \n                \n//                sess.start_idx = event_index -1;\n//                createEvents(uid, udata,  null);\n//                createTrainings (uid, udata);\n                \n                res.send({ \n                        username: uid, \n                        userdata: udata\n//                        current_index: sess.start_idx\n                        });\n               \n                return;\n           } else {\n                res.send({message : 'username not found (ensure Contact exists with username in PortalID__c field): ' + uid});\n                return;\n           }\n        });\n*/\n    } else {\n\tres.send({message : 'Please enter username'});\n    }\n});\n\napp.get('/ajaxlogin', function (req,res) {\n    var uid = req.session.username,\n        udata = req.session.userdata;\n//        start_idx = req.session.start_idx;\n        \n    console.log ('ajaxlogin: checking valid session for ' + uid + ', sessionid : ' + req.sessionID);\n        \n    if (!uid) {\n        // no active session\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} else {\n\t    // got active session\n        req.session = null; // not changing the session\n        \n        res.send({ \n                username: uid, \n                userdata: udata, \n//                current_index: start_idx\n                }); \n    }\n});\n\napp.get('/logout', function (req,res) {\n    req.session.username = null;\n    req.session.udata = null;\n    req.session.start_idx = null;\n    req.session.destroy();\n    res.redirect('/');\n    \n});\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////                CHAT        ////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////    \n\n"],[0,"app.post"]],"start1":108,"start2":108,"length1":16,"length2":6087},{"diffs":[[0,"\n\n//"],[-1," LOGIN POST\napp.post('/ajaxlogin', function (req,res) {\n    var uid = req.body.username;\n    console.log ('ajaxlogin: Attempt to login as ' + uid + ', sessionid : ' + req.sessionID);\n    \n    if (uid) {\n        collections.users_collection.findOne({username:uid}, function(err, item) {\n    \t\t\tif (err || !item) {\n    \t\t\t\tres.send({\n    \t\t\t\t\tmessage: 'username not found (ensure Contact exists with username in PortalID__c field): ' + uid\n    \t\t\t\t\t});\n    \t\t\t} else {\n\t\t\t\t\t\tconsole.log ('/home - got userdata : ' + JSON.stringify(item));    \n\t\t\t\t\t\tvar sess = req.session;\n\t\t\t\t\t\t//Properties on req.session are automatically saved on a response\n\t\t\t\t\t\tsess.username = item.username;\n\t\t\t\t\t\tsess.userdata = item;  \n\t\t\t\t\t\tres.send({ \n\t\t\t\t\t\t\tusername: item.username, \n\t\t\t\t\t\t\tuserdata: item\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\treturn;\n    \t\n    \t});\n/*\n        queryAPI('query?q='+escape('select Id, Name, PortalPic__c, PortalID__C, Points__c, Account.Name, Account.PortalPic__c, Account.id, (select Id, Name, Attempts__c, Best_Score__c, Passed__c, First_Score__c from Game_Events__r), (select Id, Name, Type__c, Training_Availability__c  from Training_Participation__r) from Contact where PortalID__c = \\'' + uid + '\\''), null, 'GET',  function (results) {\n           console.log ('login: got query results ' + JSON.stringify(results));\n           if (results.totalSize == 1) {\n               var udata = {\n                   id:  results.records[0].Id,\n                   fullname: results.records[0].Name,\n                   points: results.records[0].Points__c, \n                   outlet : {\n                       id: results.records[0].Account.Id,\n                       name: results.records[0].Account.Name,\n                       picture_url: results.records[0].Account.PortalPic__c\n                   },\n                   picture_url: results.records[0].PortalPic__c, \n                   completed_events: {},\n                   booked_training: {}\n                   };\n                   \n                if (results.records[0].Game_Events__r) {\n                    var gameevents =  results.records[0].Game_Events__r.records;\n                    for (var gidx in gameevents) {\n                        udata.completed_events[gameevents[gidx].Name] = {\n                            id:  gameevents[gidx].Id,\n                            attempts: gameevents[gidx].Attempts__c,\n                            passed: gameevents[gidx].Passed__c,\n                            score: gameevents[gidx].First_Score__c,\n                            bestscore: gameevents[gidx].Best_Score__c\n                        };\n                    }\n                }\n                \n                 if (results.records[0].Training_Participation__r) {\n                    var tevents =  results.records[0].Training_Participation__r.records;\n                    for (var gidx in tevents) {\n                        udata.booked_training[tevents[gidx].Training_Availability__c] = {\n                            id:  tevents[gidx].Id,\n                            name:  tevents[gidx].Name,\n                            type: tevents[gidx].Type__c\n                        };\n                    }\n                }\n                \n                console.log ('/home - got userdata : ' + JSON.stringify(udata));    \n                var sess = req.session;\n                //Properties on req.session are automatically saved on a response\n                sess.username = uid;\n                sess.userdata = udata;  \n                sess.completed_events = udata.completed_events;  \n                \n//                sess.start_idx = event_index -1;\n//                createEvents(uid, udata,  null);\n//                createTrainings (uid, udata);\n                \n                res.send({ \n                        username: uid, \n                        userdata: udata\n//                        current_index: sess.start_idx\n                        });\n               \n                return;\n           } else {\n                res.send({message : 'username not found (ensure Contact exists with username in PortalID__c field): ' + uid});\n                return;\n           }\n        });\n*/\n    } else {\n\tres.send({message : 'Please enter username'});\n    }\n});\n\napp.get('/ajaxlogin', function (req,res) {\n    var uid = req.session.username,\n        udata = req.session.userdata;\n//        start_idx = req.session.start_idx;\n        \n    console.log ('ajaxlogin: checking valid session for ' + uid + ', sessionid : ' + req.sessionID);\n        \n    if (!uid) {\n        // no active session\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} else {\n\t    // got active session\n        req.session = null; // not changing the session\n        \n        res.send({ \n                username: uid, \n                userdata: udata, \n//                current_index: start_idx\n                }); \n    }\n});\n\napp.get('/logout', function (req,res) {\n    req.session.username = null;\n    req.session.udata = null;\n    req.session.start_idx = null;\n    req.session.destroy();\n    res.redirect('/');\n    \n});\n\n\n\n"],[1,"//////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////                EVENTS        //////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////////////////// "],[0,"\n\nva"]],"start1":14591,"start2":14591,"length1":5072,"length2":321}]],"length":31819,"saved":false},"1336946622826":{"contributors":[],"silentsave":false,"ts":1336946622826,"patch":[[{"diffs":[[0,"rn;\n    }   "],[1,"\n    collections.groups_collection.users_collection.find().toArray( function (err, groups) {\n        //res.render('profile.ejs', { layout: false, locals: {  feedid: whatid, udata: udata } });\n        res.render('profile.ejs', { locals: {  me: udata, groups: groups } });\n\t});\n});\n\napp.post ('/profile', function(req,res) {\n    var uid = req.session.username,\n        udata = req.session.userdata;\n        \n    if (!uid) {\n        res.send ('Please Login', 400);\n        return;\n    }   "],[0,"\n\n    //res."]],"start1":628,"start2":628,"length1":24,"length2":510}]],"length":32305,"saved":false},"1336947109695":{"contributors":[],"silentsave":false,"ts":1336947109695,"patch":[[{"diffs":[[0,"lection."],[-1,"users_collection."],[0,"find().t"]],"start1":667,"start2":667,"length1":33,"length2":16}]],"length":32288,"saved":false},"1336947166647":{"contributors":[],"silentsave":false,"ts":1336947166647,"patch":[[{"diffs":[[0,", groups) {\n"],[1,"        console.log ('/profile groups : ' + JSON.stringify (groups));\n"],[0,"        //re"]],"start1":704,"start2":704,"length1":24,"length2":94}]],"length":32358,"saved":false},"1336947568475":{"contributors":[],"silentsave":false,"ts":1336947568475,"patch":[[{"diffs":[[0,"n;\n    }"],[1,"\n"],[0,"   "],[1," \n    var req.body.profile_image_uploaded_data\n    user_name\n    user_location\n    user_description"],[0,"\n\n    //"]],"start1":1168,"start2":1168,"length1":19,"length2":119}]],"length":32458,"saved":false},"1336947822943":{"contributors":[],"silentsave":false,"ts":1336947822943,"patch":[[{"diffs":[[0,"    var "],[1,"user =  "],[0,"req.body"]],"start1":1182,"start2":1182,"length1":16,"length2":24},{"diffs":[[0,"ed_data\n    "],[1,"    req.body.user_email\n        req.body."],[0,"user_name\n  "]],"start1":1227,"start2":1227,"length1":24,"length2":65},{"diffs":[[0,"er_name\n    "],[1,"    req.body."],[0,"user_locatio"]],"start1":1282,"start2":1282,"length1":24,"length2":37},{"diffs":[[0,"ocation\n    "],[1,"    req.body."],[0,"user_descrip"]],"start1":1313,"start2":1313,"length1":24,"length2":37},{"diffs":[[0,"iption\n\n"],[1,"    collections.users_collections.insert (\n"],[0,"    //re"]],"start1":1348,"start2":1348,"length1":16,"length2":59}]],"length":32576,"saved":false},"1336948009288":{"contributors":[],"silentsave":false,"ts":1336948009288,"patch":[[{"diffs":[[0," =  "],[-1,"req.body.profile_image_uploaded_data\n       "],[1,"{\n    \tusername :"],[0," req"]],"start1":1194,"start2":1194,"length1":52,"length2":25},{"diffs":[[0,"er_email"],[-1,"\n       "],[1,",\n\t\tfullname:"],[0," req.bod"]],"start1":1227,"start2":1227,"length1":24,"length2":29},{"diffs":[[0,"name"],[-1,"\n        req.body.user_location\n       "],[1,",\n\t\tpoints: 0,\n\t\tbelongs_to_primary: req.body.user_location,\n\t\tpicture: req.body.profile_image_uploaded_data, \n        desc:"],[0," req"]],"start1":1263,"start2":1263,"length1":47,"length2":132},{"diffs":[[0,"cription"],[1,"\n    };"],[0,"\n\n    co"]],"start1":1409,"start2":1409,"length1":16,"length2":23},{"diffs":[[0,"rt ("],[-1,"\n    //res.render('profile.ejs', { layout: false, locals:"],[1,"user, function(err, docs)"],[0," {"],[1,"\n"],[0,"  "],[-1,"feedid: whatid, udata: udata } });\n    res.render('profile.ejs', { locals: {  me: udata }"],[1,"      res.redirect('/');\n   "],[0," })"],[-1,";"],[0,"\n});"]],"start1":1464,"start2":1464,"length1":162,"length2":69}]],"length":32553,"saved":false},"1336948063387":{"contributors":[],"silentsave":false,"ts":1336948063387,"patch":[[{"diffs":[[0,"llection"],[-1,"s"],[0,".insert "]],"start1":1450,"start2":1450,"length1":17,"length2":16}]],"length":32552,"saved":false},"1336948193263":{"contributors":[],"silentsave":false,"ts":1336948193263,"patch":[[{"diffs":[[0,"\n    }\n    \n"],[1,"    console.log ('/profile body :: ' + JSON.stringify(req.body));\n    \n"],[0,"    var user"]],"start1":1170,"start2":1170,"length1":24,"length2":95}]],"length":32623,"saved":false},"1336948561934":{"contributors":[],"silentsave":false,"ts":1336948561934,"patch":[[{"diffs":[[0,"req.body));\n"],[1,"    console.log ('/profile body :: ' + JSON.stringify(req.files));\n"],[0,"    \n    var"]],"start1":1236,"start2":1236,"length1":24,"length2":91},{"diffs":[[0,"ody.user"],[-1,"_"],[1,"."],[0,"email,\n\t"]],"start1":1359,"start2":1359,"length1":17,"length2":17},{"diffs":[[0,"ody.user"],[-1,"_"],[1,"."],[0,"name,\n\t\t"]],"start1":1392,"start2":1392,"length1":17,"length2":17},{"diffs":[[0,"ody.user"],[-1,"_"],[1,"."],[0,"location"]],"start1":1447,"start2":1447,"length1":17,"length2":17},{"diffs":[[0,"on,\n"],[-1,"\t\tpicture: req.body.profile_image_uploaded_data, \n"],[0,"    "]],"start1":1462,"start2":1462,"length1":58,"length2":8},{"diffs":[[0,"ody.user"],[-1,"_"],[1,"."],[0,"descript"]],"start1":1485,"start2":1485,"length1":17,"length2":17}]],"length":32640,"saved":false},"1337097873304":{"contributors":[],"silentsave":false,"ts":1337097873304,"patch":[[{"diffs":[[0,"ongodb')"],[-1,";"],[1,",\n    gridform = require('gridform'); // https://github.com/aheckmann/gridform"],[0,"\n\nmodule"]],"start1":55,"start2":55,"length1":17,"length2":94},{"diffs":[[0,"tion(req,res) {\n"],[1,"    \n    var options = { db: db, filename: fn };\n    var form = gridform(options);\n\n"],[0,"    var uid = re"]],"start1":1077,"start2":1077,"length1":32,"length2":116}]],"length":32801,"saved":false},"1337098053722":{"contributors":[],"silentsave":false,"ts":1337098053722,"patch":[[{"diffs":[[0,"= { db: "],[1,"collections."],[0,"db, file"]],"start1":1114,"start2":1114,"length1":16,"length2":28},{"diffs":[[0,"lename: "],[-1,"fn"],[1,"'keith'"],[0," };\n    "]],"start1":1140,"start2":1140,"length1":18,"length2":23},{"diffs":[[0,"ions);\n\n"],[1,"      // parse normally\n    form.parse(req, function (err, fields, files) {\n    \n    // use files and fields as you do today\n        var file = files.upload;\n        \n        file.name // the uploaded file name\n        file.type // file type per [mime](https://github.com/bentomas/node-mime)\n        file.size // uploaded file size (file length in GridFS) named \"size\" for compatibility\n        file.path // same as file.name. included for compatibility\n        file.lastModified // included for compatibility\n        \n        // files contain additional gridfs info\n        file.root // the root of the files collection used in MongoDB ('fs' here means the full collection in mongo is named 'fs.files')\n        file.id   // the ObjectId for this file\n    \n    });\n  \n  \n\n"],[0,"    var "]],"start1":1186,"start2":1186,"length1":16,"length2":788}]],"length":33590,"saved":false},"1337099243422":{"contributors":[],"silentsave":false,"ts":1337099243422,"patch":[[{"diffs":[[0,"r this file\n"],[1,"         console.log ('/profile file [' + err + '] ' + JSON.stringify(file));\n"],[0,"    \n    });"]],"start1":1934,"start2":1934,"length1":24,"length2":102}]],"length":33668,"saved":false},"1337099312301":{"contributors":[],"silentsave":false,"ts":1337099312301,"patch":[[{"diffs":[[0,"s.db"],[-1,", filename: 'keith'"],[0," };\n"]],"start1":1132,"start2":1132,"length1":27,"length2":8}]],"length":33649,"saved":false},"1337099573595":{"contributors":[],"silentsave":false,"ts":1337099573595,"patch":[[{"diffs":[[0,"eq.files));\n"],[1,"/*"],[0,"    \n    var"]],"start1":2312,"start2":2312,"length1":24,"length2":26},{"diffs":[[0,"\n    })\n"],[1,"*/\n"],[0,"});\n\n\n//"]],"start1":2620,"start2":2620,"length1":16,"length2":19}]],"length":33654,"saved":false},"1337099619154":{"contributors":[],"silentsave":false,"ts":1337099619154,"patch":[[{"diffs":[[0,"is file\n        "],[1,"\n        console.log ('/profile fields ' + JSON.stringify(fields));\n       "],[0," console.log ('/"]],"start1":1919,"start2":1919,"length1":32,"length2":107}]],"length":33729,"saved":false},"1337099648140":{"contributors":[],"silentsave":false,"ts":1337099648140,"patch":[[{"diffs":[[0,"ad;\n"],[-1,"        \n        file.name // the uploaded file name\n        file.type // file type per [mime](https://github.com/bentomas/node-mime)\n        file.size // uploaded file size (file length in GridFS) named \"size\" for compatibility\n        file.path // same as file.name. included for compatibility\n        file.lastModified // included for compatibility\n        \n        // files contain additional gridfs info\n        file.root // the root of the files collection used in MongoDB ('fs' here means the full collection in mongo is named 'fs.files')\n        file.id   // the ObjectId for this file\n        "],[0,"\n   "]],"start1":1329,"start2":1329,"length1":610,"length2":8}]],"length":33127,"saved":false},"1337101123011":{"contributors":[],"silentsave":false,"ts":1337101123011,"patch":[[{"diffs":[[0,"   \n"],[-1,"    // use files and fields as you do today\n        var file = files.upload;\n\n"],[0,"    "]],"start1":1252,"start2":1252,"length1":86,"length2":8},{"diffs":[[0,"ify(file"],[1,"s"],[0,"));\n    "]],"start1":1388,"start2":1388,"length1":16,"length2":17}]],"length":33050,"saved":false},"1337101350526":{"contributors":[],"silentsave":false,"ts":1337101350526,"patch":[[{"diffs":[[0,"tions.db"],[1,", filename: 'keith'"],[0," };\n    "]],"start1":1128,"start2":1128,"length1":16,"length2":35},{"diffs":[[0,"turn;\n    }\n"],[1,"/*"],[0,"    \n    con"]],"start1":1589,"start2":1589,"length1":24,"length2":26},{"diffs":[[0,"iles));\n"],[-1,"/*"],[0,"    \n   "]],"start1":1733,"start2":1733,"length1":18,"length2":16}]],"length":33069,"saved":false},"1337101394646":{"contributors":[],"silentsave":false,"ts":1337101394646,"patch":[[{"diffs":[[0,"s.db"],[-1,", filename: 'keith'"],[0," };\n"]],"start1":1132,"start2":1132,"length1":27,"length2":8}]],"length":33050,"saved":false},"1337104372356":{"contributors":[],"silentsave":false,"ts":1337104372356,"patch":[[{"diffs":[[0,"tions.db"],[1,", filename : { name: 'keith'}"],[0," };\n    "]],"start1":1128,"start2":1128,"length1":16,"length2":45}]],"length":33079,"saved":false},"1337105140689":{"contributors":[],"silentsave":false,"ts":1337105140689,"patch":[[{"diffs":[[0,"s.db"],[-1,", filename : { name: 'keith'}"],[0," };\n"],[1,""],[0,"    "]],"start1":1132,"start2":1132,"length1":41,"length2":12},{"diffs":[[0,"ingify(files));\n"],[1,"        \n        var user =  {\n            username : fields[\"user[email]\"],\n    \t\tfullname: fields[\"user[name]\"],\n    \t\tpoints: 0,\n    \t\tbelongs_to_primary: fields[\"user[location]\"],\n            desc:  fields[\"user[description]\"],\n            picture: files[\"profile_image[uploaded_data]\"][\"name\"]\n        };\n    \n        collections.users_collection.insert (user, function(err, docs) {\n            res.redirect('/');\n        })\n"],[0,"    \n    });\n  \n"]],"start1":1385,"start2":1385,"length1":32,"length2":462},{"diffs":[[0,";\n  \n  \n"],[1,"/*   "],[0,"\n"],[-1,""],[0,"    var "]],"start1":1842,"start2":1842,"length1":17,"length2":22},{"diffs":[[0,";\n    }\n"],[-1,"/*   "],[0," \n    co"]],"start1":2009,"start2":2009,"length1":21,"length2":16}]],"length":33480,"saved":false},"1337105804321":{"contributors":[],"silentsave":false,"ts":1337105804321,"patch":[[{"diffs":[[0,";\n\t});\n});\n\n"],[1,"app.get('/media/:filename', function (req,res) {\n    var gs = new mongodb.GridStore(collections.db, req.params.filename, 'r');\n    gs.open(function(err, gs){\n        gs.stream([autoclose=false]).pipe(res);\n    });\n    \n    \n    \n});\n\n"],[0,"app.post ('/"]],"start1":1039,"start2":1039,"length1":24,"length2":258},{"diffs":[[0," picture"],[1,"_url"],[0,": files["]],"start1":1878,"start2":1878,"length1":16,"length2":20}]],"length":33718,"saved":false},"1337108474402":{"contributors":[],"silentsave":false,"ts":1337108474402,"patch":[[{"diffs":[[0,"   \n"],[-1,"    if (!uid) {\n        res.send ('Please Login', 400);\n        return;\n    }   "],[0,"\n   "]],"start1":633,"start2":633,"length1":88,"length2":8},{"diffs":[[0,"    });\n"],[-1,"    \n    \n    "],[0,"\n});\n\nap"]],"start1":1177,"start2":1177,"length1":30,"length2":16}]],"length":33624,"saved":false},"1337108539426":{"contributors":[],"silentsave":false,"ts":1337108539426,"patch":[[{"diffs":[[0,") {\n"],[-1,"    req.session.username = null;\n    req.session.udata = null;\n    req.session.start_idx = null;\n"],[0,"    "]],"start1":7510,"start2":7510,"length1":105,"length2":8}]],"length":33527,"saved":false},"1337108838722":{"contributors":[],"silentsave":false,"ts":1337108838722,"patch":[[{"diffs":[[0,"a;\n        \n"],[1,"    console.log ('/profile uid ['+uid+'] : ' + JSON.stringify (udata));"],[0,"\n    collect"]],"start1":625,"start2":625,"length1":24,"length2":95}]],"length":33598,"saved":false},"1337108880757":{"contributors":[],"silentsave":false,"ts":1337108880757,"patch":[[{"diffs":[[0,": { "],[-1," me: udata,"],[0," gro"]],"start1":995,"start2":995,"length1":19,"length2":8}]],"length":33587,"saved":false},"1337109057906":{"contributors":[],"silentsave":false,"ts":1337109057906,"patch":[[{"diffs":[[0,"cals: { "],[1," me: udata,"],[0," groups:"]],"start1":991,"start2":991,"length1":16,"length2":27}]],"length":33598,"saved":false},"1337109996285":{"contributors":[],"silentsave":false,"ts":1337109996285,"patch":[[{"diffs":[[0,"re_url: "],[1,"'/media/'+"],[0,"files[\"p"]],"start1":1861,"start2":1861,"length1":16,"length2":26}]],"length":33608,"saved":false},"1337110060630":{"contributors":[],"silentsave":false,"ts":1337110060630,"patch":[[{"diffs":[[0,"session.userdata"],[1," | {}"],[0,";\n        \n    c"]],"start1":610,"start2":610,"length1":32,"length2":37}]],"length":33613,"saved":false},"1337110159614":{"contributors":[],"silentsave":false,"ts":1337110159614,"patch":[[{"diffs":[[0,"erdata |"],[1,"|"],[0," {};\n   "]],"start1":620,"start2":620,"length1":16,"length2":17}]],"length":33614,"saved":false},"1337587760919":{"contributors":[],"silentsave":false,"ts":1337587760919,"patch":[[{"diffs":[[0,"    "],[-1,"gridform = require('gridfor"],[1,"ObjectID = require('mongodb').ObjectID,\n    gridform = require('gridform'),\n    formidable = require('formidable'),\n    gridstream = require('gridfs-strea"],[0,"m');"]],"start1":65,"start2":65,"length1":35,"length2":162},{"diffs":[[0,"profile."],[-1,"ejs', {"],[1,"hogan', { layout: false,"],[0," locals:"]],"start1":1106,"start2":1106,"length1":23,"length2":40},{"diffs":[[0,"ons.db, "],[1,"new ObjectID("],[0,"req.para"]],"start1":1284,"start2":1284,"length1":16,"length2":29},{"diffs":[[0,"filename"],[1,")"],[0,", 'r');\n"]],"start1":1316,"start2":1316,"length1":16,"length2":17},{"diffs":[[0,"req,res) {\n    \n"],[1,"    /*\n"],[0,"    var options "]],"start1":1457,"start2":1457,"length1":32,"length2":39},{"diffs":[[0,"s);\n"],[-1,"\n      // parse normally\n    f"],[1,"    */\n    \n    \n    var uid = new ObjectID ();\n    \n    var incomingForm = new formidable.IncomingForm();\n    \n    // overwrite this method if you are interested in directly accessing the multipart stream\n    incomingForm.onPart = function(part) {\n        \n        console.log ('/profile onPart, partname : ['+part.name+'], part.filename :  ' + part.filename);\n        if (part.filename === undefined) {\n            // let formidable handle all non-file parts\n            return incomingForm.handlePart(part);\n        }\n \n        var form = this;\n        form._flushing++;\n        \n        \n        // open gridFS write Stream\n        var filename = 'profile-pic'+uid;\n        var options = {mode: 'w', content_type: part.mime};\n        if (form.chunk_size) options.chunk_size = this.chunk_size;\n        if (form.root) options.root = this.root;\n        if (form.metadata) options.metadata = this.metadata;\n        console.log ('/profile onPart  open gridFS ['+filename+']  : options : ' + options ); \n        var grid_ws = gridstream(collections.db).createWriteStream(options);\n        \n        form.emit('fileBegin', part.name, grid_ws);\n        \n        /*\n        var gridOnDrain = function() { \n            console.log ('/profile grid_ws.drain : resuming form');\n            form.resume();\n        }\n        grid_ws.on('drain', gridOnDrain);\n        */\n        \n        var partOnData = function(buffer) {\n            console.log ('/profile part.data:   pause form & write to grid');\n            //form.pause();\n            grid_ws.write(buffer);\n        };\n        part.on('data', partOnData);\n        \n        part.once('end', function  () {\n            console.log ('/profile part.end:  got end');\n            part.removeListener('data', partOnData);\n            //grid_ws.removeListener('drain', gridOnDrain);\n            grid_ws.once('drain', function (err) {\n                console.log ('/profile part.end: final grid_ws.drain:  ' + err);\n                if (err) return form.emit('error', err = err);\n\n                form._flushing--;\n                form.emit('file', 'fileid', grid_ws.id);\n                form._maybeEnd();\n              });\n            console.log ('/profile part.end:  end grid_ws');\n            grid_ws.end();\n          });\n    }\n\n    // we disabled the bodyParser for multipart, so using formidable to stream the data to mongo gridFS\n    incomingF"],[0,"orm."]],"start1":1552,"start2":1552,"length1":38,"length2":2392},{"diffs":[[0,"profile "],[1,"parse "],[0,"fields '"]],"start1":4015,"start2":4015,"length1":16,"length2":22},{"diffs":[[0,"profile "],[1,"parse "],[0,"file [' "]],"start1":4088,"start2":4088,"length1":16,"length2":22},{"diffs":[[0,"r user =  {\n"],[1,"            _id: uid,\n"],[0,"            "]],"start1":4168,"start2":4168,"length1":24,"length2":46},{"diffs":[[0,"es[\""],[-1,"pro"],[0,"file"],[-1,"_image[uploaded_data]\"][\"name\"]"],[1,"id\"],\n            completed_events: {},\n    \t    booked_training: {}"],[0,"\n   "]],"start1":4441,"start2":4441,"length1":46,"length2":80},{"diffs":[[0,"    };\n    \n"],[1,"        \n"],[0,"        coll"]],"start1":4522,"start2":4522,"length1":24,"length2":33},{"diffs":[[0,"        "],[-1,"res.redirect('/'"],[1,"console.log ('/profile parse, saved user, send response redirect');\n            \n            collections.groups_collection.findOne({_id: user.belongs_to_primary}, function(err, item) {\n                user.outlet = item;\n                req.session.userid = user._id;\n        \t\treq.session.userdata = user;  \n                res.redirect('/#home');\n            }"],[0,");\n     "]],"start1":4620,"start2":4620,"length1":32,"length2":378},{"diffs":[[0," {\n    var u"],[-1,"id"],[1,"name"],[0," = req.body."]],"start1":5691,"start2":5691,"length1":26,"length2":28},{"diffs":[[0,"gin as ' + u"],[-1,"id"],[1,"name"],[0," + ', sessio"]],"start1":5771,"start2":5771,"length1":26,"length2":28},{"diffs":[[0,"   if (u"],[-1,"id"],[1,"name"],[0,") {\n    "]],"start1":5831,"start2":5831,"length1":18,"length2":20},{"diffs":[[0,"sername:"],[-1,"uid"],[1," uname"],[0,"}, funct"]],"start1":5894,"start2":5894,"length1":19,"length2":22},{"diffs":[[0,", function(err, "],[-1,"item"],[1,"user"],[0,") {\n    \t\t\tif (e"]],"start1":5909,"start2":5909,"length1":36,"length2":36},{"diffs":[[0,"err || !"],[-1,"item"],[1,"user"],[0,") {\n    "]],"start1":5944,"start2":5944,"length1":20,"length2":20},{"diffs":[[0,"ound"],[-1," (ensure Contact exists with username in PortalID__c field): ' + uid"],[1,": ' + uname"],[0,"\n   "]],"start1":6012,"start2":6012,"length1":76,"length2":19},{"diffs":[[0,"ify("],[-1,"item));    \n\t\t\t\t\t\tvar sess = req.session;\n"],[1,"user));  \n                        collections.groups_collection.findOne({_id: new ObjectID (user.belongs_to_primary)}, function(err, item) {\n                            user.outlet = item;\n    "],[0,"\t\t\t\t"]],"start1":6115,"start2":6115,"length1":50,"length2":201},{"diffs":[[0,"nse\n"],[1,"    "],[0,"\t\t\t\t\t\t"],[1,"req."],[0,"sess"],[1,"ion"],[0,".user"],[-1,"name = item.username;\n"],[1,"id = user._id;\n    "],[0,"\t\t\t\t\t\t"],[1,"req."],[0,"sess"],[1,"ion"],[0,".use"]],"start1":6380,"start2":6380,"length1":55,"length2":70},{"diffs":[[0,"a = "],[-1,"item;  \n"],[1,"user;  \n    "],[0,"\t\t\t\t"]],"start1":6454,"start2":6454,"length1":16,"length2":20},{"diffs":[[0,"send({ \n"],[1,"    "],[0,"\t\t\t\t\t\t\tu"]],"start1":6480,"start2":6480,"length1":16,"length2":20},{"diffs":[[0,"me: "],[-1,"item.username, \n"],[1,"user._id, \n    "],[0,"\t\t\t\t"]],"start1":6505,"start2":6505,"length1":24,"length2":23},{"diffs":[[0,"ta: "],[-1,"item\n\t\t\t\t\t\t\t"],[1,"user\n    \t\t\t\t\t\t\t});\n                        "],[0,"});\n"]],"start1":6537,"start2":6537,"length1":20,"length2":52}]],"length":36713,"saved":false},"1337587827331":{"contributors":[],"silentsave":false,"ts":1337587827331,"patch":[[{"diffs":[[0,"le.hogan', {"],[-1," layout: false,"],[0," locals: {  "]],"start1":1111,"start2":1111,"length1":39,"length2":24}]],"length":36698,"saved":false},"1337605347764":{"contributors":[],"silentsave":false,"ts":1337605347764,"patch":[[{"diffs":[[0,"req.session.user"],[-1,"name"],[1,"id"],[0,",\n        udata "]],"start1":695,"start2":695,"length1":36,"length2":34},{"diffs":[[0,"ody.user"],[-1,"name"],[1,"id"],[0,";\n    co"]],"start1":5698,"start2":5698,"length1":20,"length2":18},{"diffs":[[0,"req.session.user"],[-1,"name"],[1,"id"],[0,",\n        udata "]],"start1":10065,"start2":10065,"length1":36,"length2":34},{"diffs":[[0,"req.session.user"],[-1,"name"],[1,"id"],[0,",\n        udata "]],"start1":11193,"start2":11193,"length1":36,"length2":34},{"diffs":[[0,"req.session.user"],[-1,"name"],[1,"id"],[0,",\n         udata"]],"start1":13346,"start2":13346,"length1":36,"length2":34},{"diffs":[[0,"req.session.user"],[-1,"name"],[1,"id"],[0,",\n        what ="]],"start1":13945,"start2":13945,"length1":36,"length2":34},{"diffs":[[0,"req.session.user"],[-1,"name"],[1,"id"],[0,",\n        udata "]],"start1":15366,"start2":15366,"length1":36,"length2":34},{"diffs":[[0,"req.session.user"],[-1,"name"],[1,"id"],[0,",\n        sid = "]],"start1":19854,"start2":19854,"length1":36,"length2":34},{"diffs":[[0,"req.session.user"],[-1,"name"],[1,"id"],[0,",\n        udata "]],"start1":28973,"start2":28973,"length1":36,"length2":34}]],"length":36680,"saved":false},"1337605673312":{"contributors":[],"silentsave":false,"ts":1337605673312,"patch":[[{"diffs":[[0,"\n    */\n"],[-1,"    \n    "],[0,"\n    var"]],"start1":1538,"start2":1538,"length1":25,"length2":16},{"diffs":[[0,"bjectID ();\n"],[-1,"    "],[0,"\n    var inc"]],"start1":1566,"start2":1566,"length1":28,"length2":24},{"diffs":[[0,"Form();\n"],[-1,"    "],[0,"\n    // "]],"start1":1625,"start2":1625,"length1":20,"length2":16},{"diffs":[[0,"ody.user"],[-1,"id"],[1,"name"],[0,";\n    co"]],"start1":5681,"start2":5681,"length1":18,"length2":20}]],"length":36665,"saved":false},"1338154984513":{"contributors":[],"silentsave":false,"ts":1338154984513,"patch":[[{"diffs":[[0,"rd = 0;\n"],[-1,"            "],[0,"\n    \t\ti"]],"start1":20575,"start2":20575,"length1":28,"length2":16},{"diffs":[[0,"\n    \t\t}"],[-1," \n    "],[1,"\n"],[0,"\n    \t\tc"]],"start1":21300,"start2":21300,"length1":22,"length2":17}]],"length":36648,"saved":false}}}{"contributors":[],"silentsave":false,"ts":1347358201113,"patch":[[{"diffs":[[1,"var rest = require('restler'),\n    mongodb = require('mongodb'),\n    ObjectID = require('mongodb').ObjectID,\n    gridform = require('gridform'),\n    formidable = require('formidable'),\n    gridstream = require('gridfs-stream'); // https://github.com/aheckmann/gridform\n\nmodule.exports = function(app, collections){\n    \n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////                USER        ////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////   \n\napp.get ('/profile', function(req,res) {\n    var uid = req.session.userid,\n        udata = req.session.userdata || {};\n        \n    console.log ('/profile uid ['+uid+'] : ' + JSON.stringify (udata));\n    collections.groups_collection.find().toArray( function (err, groups) {\n        console.log ('/profile groups : ' + JSON.stringify (groups));\n        //res.render('profile.ejs', { layout: false, locals: {  feedid: whatid, udata: udata } });\n        res.render('profile.hogan', { layout: false, locals: {  me: udata, groups: groups } });\n\t});\n});\n\napp.get('/media/:filename', function (req,res) {\n    var gs = new mongodb.GridStore(collections.db, new ObjectID(req.params.filename), 'r');\n    gs.open(function(err, gs){\n        gs.stream([autoclose=false]).pipe(res);\n    });\n\n});\n\napp.post ('/profile', function(req,res) {\n    \n    /*\n    var options = { db: collections.db };\n    var form = gridform(options);\n    */\n\n    var uid = new ObjectID ();\n\n    var incomingForm = new formidable.IncomingForm();\n\n    // overwrite this method if you are interested in directly accessing the multipart stream\n    incomingForm.onPart = function(part) {\n        \n        console.log ('/profile onPart, partname : ['+part.name+'], part.filename :  ' + part.filename);\n        if (part.filename === undefined) {\n            // let formidable handle all non-file parts\n            return incomingForm.handlePart(part);\n        }\n \n        var form = this;\n        form._flushing++;\n        \n        \n        // open gridFS write Stream\n        var filename = 'profile-pic'+uid;\n        var options = {mode: 'w', content_type: part.mime};\n        if (form.chunk_size) options.chunk_size = this.chunk_size;\n        if (form.root) options.root = this.root;\n        if (form.metadata) options.metadata = this.metadata;\n        console.log ('/profile onPart  open gridFS ['+filename+']  : options : ' + options ); \n        var grid_ws = gridstream(collections.db).createWriteStream(options);\n        \n        form.emit('fileBegin', part.name, grid_ws);\n        \n        /*\n        var gridOnDrain = function() { \n            console.log ('/profile grid_ws.drain : resuming form');\n            form.resume();\n        }\n        grid_ws.on('drain', gridOnDrain);\n        */\n        \n        var partOnData = function(buffer) {\n            console.log ('/profile part.data:   pause form & write to grid');\n            //form.pause();\n            grid_ws.write(buffer);\n        };\n        part.on('data', partOnData);\n        \n        part.once('end', function  () {\n            console.log ('/profile part.end:  got end');\n            part.removeListener('data', partOnData);\n            //grid_ws.removeListener('drain', gridOnDrain);\n            grid_ws.once('drain', function (err) {\n                console.log ('/profile part.end: final grid_ws.drain:  ' + err);\n                if (err) return form.emit('error', err = err);\n\n                form._flushing--;\n                form.emit('file', 'fileid', grid_ws.id);\n                form._maybeEnd();\n              });\n            console.log ('/profile part.end:  end grid_ws');\n            grid_ws.end();\n          });\n    }\n\n    // we disabled the bodyParser for multipart, so using formidable to stream the data to mongo gridFS\n    incomingForm.parse(req, function (err, fields, files) {\n    \n        console.log ('/profile parse fields ' + JSON.stringify(fields));\n        console.log ('/profile parse file [' + err + '] ' + JSON.stringify(files));\n        \n        var user =  {\n            _id: uid,\n            username : fields[\"user[email]\"],\n    \t\tfullname: fields[\"user[name]\"],\n    \t\tpoints: 0,\n    \t\tbelongs_to_primary: fields[\"user[location]\"],\n            desc:  fields[\"user[description]\"],\n            picture_url: '/media/'+files[\"fileid\"],\n            completed_events: {},\n    \t    booked_training: {}\n        };\n    \n        \n        collections.users_collection.insert (user, function(err, docs) {\n            console.log ('/profile parse, saved user, send response redirect');\n            \n            collections.groups_collection.findOne({_id: user.belongs_to_primary}, function(err, item) {\n                user.outlet = item;\n                req.session.userid = user._id;\n        \t\treq.session.userdata = user;  \n                res.redirect('/#home');\n            });\n        })\n    \n    });\n  \n  \n/*   \n    var uid = req.session.username,\n        udata = req.session.userdata;\n        \n    if (!uid) {\n        res.send ('Please Login', 400);\n        return;\n    }\n \n    console.log ('/profile body :: ' + JSON.stringify(req.body));\n    console.log ('/profile body :: ' + JSON.stringify(req.files));\n    \n    var user =  {\n    \tusername : req.body.user.email,\n\t\tfullname: req.body.user.name,\n\t\tpoints: 0,\n\t\tbelongs_to_primary: req.body.user.location,\n        desc: req.body.user.description\n    };\n\n    collections.users_collection.insert (user, function(err, docs) {\n        res.redirect('/');\n    })\n*/\n});\n\n\n\n// LOGIN POST\napp.post('/ajaxlogin', function (req,res) {\n    var uname = req.body.username;\n    console.log ('ajaxlogin: Attempt to login as ' + uname + ', sessionid : ' + req.sessionID);\n    \n    if (uname) {\n        collections.users_collection.findOne({username: uname}, function(err, user) {\n    \t\t\tif (err || !user) {\n    \t\t\t\tres.send({\n    \t\t\t\t\tmessage: 'username not found: ' + uname\n    \t\t\t\t\t});\n    \t\t\t} else {\n\t\t\t\t\t\tconsole.log ('/home - got userdata : ' + JSON.stringify(user));  \n                        collections.groups_collection.findOne({_id: new ObjectID (user.belongs_to_primary)}, function(err, item) {\n                            user.outlet = item;\n    \t\t\t\t\t\t//Properties on req.session are automatically saved on a response\n    \t\t\t\t\t\treq.session.userid = user._id;\n    \t\t\t\t\t\treq.session.userdata = user;  \n    \t\t\t\t\t\tres.send({ \n    \t\t\t\t\t\t\tusername: user._id, \n    \t\t\t\t\t\t\tuserdata: user\n    \t\t\t\t\t\t\t});\n                        });\n\t\t\t\t\t}\n\t\t\t\treturn;\n    \t\n    \t});\n/*\n        queryAPI('query?q='+escape('select Id, Name, PortalPic__c, PortalID__C, Points__c, Account.Name, Account.PortalPic__c, Account.id, (select Id, Name, Attempts__c, Best_Score__c, Passed__c, First_Score__c from Game_Events__r), (select Id, Name, Type__c, Training_Availability__c  from Training_Participation__r) from Contact where PortalID__c = \\'' + uid + '\\''), null, 'GET',  function (results) {\n           console.log ('login: got query results ' + JSON.stringify(results));\n           if (results.totalSize == 1) {\n               var udata = {\n                   id:  results.records[0].Id,\n                   fullname: results.records[0].Name,\n                   points: results.records[0].Points__c, \n                   outlet : {\n                       id: results.records[0].Account.Id,\n                       name: results.records[0].Account.Name,\n                       picture_url: results.records[0].Account.PortalPic__c\n                   },\n                   picture_url: results.records[0].PortalPic__c, \n                   completed_events: {},\n                   booked_training: {}\n                   };\n                   \n                if (results.records[0].Game_Events__r) {\n                    var gameevents =  results.records[0].Game_Events__r.records;\n                    for (var gidx in gameevents) {\n                        udata.completed_events[gameevents[gidx].Name] = {\n                            id:  gameevents[gidx].Id,\n                            attempts: gameevents[gidx].Attempts__c,\n                            passed: gameevents[gidx].Passed__c,\n                            score: gameevents[gidx].First_Score__c,\n                            bestscore: gameevents[gidx].Best_Score__c\n                        };\n                    }\n                }\n                \n                 if (results.records[0].Training_Participation__r) {\n                    var tevents =  results.records[0].Training_Participation__r.records;\n                    for (var gidx in tevents) {\n                        udata.booked_training[tevents[gidx].Training_Availability__c] = {\n                            id:  tevents[gidx].Id,\n                            name:  tevents[gidx].Name,\n                            type: tevents[gidx].Type__c\n                        };\n                    }\n                }\n                \n                console.log ('/home - got userdata : ' + JSON.stringify(udata));    \n                var sess = req.session;\n                //Properties on req.session are automatically saved on a response\n                sess.username = uid;\n                sess.userdata = udata;  \n                sess.completed_events = udata.completed_events;  \n                \n//                sess.start_idx = event_index -1;\n//                createEvents(uid, udata,  null);\n//                createTrainings (uid, udata);\n                \n                res.send({ \n                        username: uid, \n                        userdata: udata\n//                        current_index: sess.start_idx\n                        });\n               \n                return;\n           } else {\n                res.send({message : 'username not found (ensure Contact exists with username in PortalID__c field): ' + uid});\n                return;\n           }\n        });\n*/\n    } else {\n\tres.send({message : 'Please enter username'});\n    }\n});\n\napp.get('/ajaxlogin', function (req,res) {\n    var uid = req.session.userid,\n        udata = req.session.userdata;\n//        start_idx = req.session.start_idx;\n        \n    console.log ('ajaxlogin: checking valid session for ' + uid + ', sessionid : ' + req.sessionID);\n        \n    if (!uid) {\n        // no active session\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} else {\n\t    // got active session\n        req.session = null; // not changing the session\n        \n        res.send({ \n                username: uid, \n                userdata: udata, \n//                current_index: start_idx\n                }); \n    }\n});\n\napp.get('/login-oauth/:provider', function (req, res) {\n    // We have nothing - redirect to the Authorization Server\n    req.session.oauth_state = req.url;\n    var oauthURL = process.env.SFDC_HOSTNAME + \"/services/oauth2/authorize?response_type=code&\" +\n        \"client_id=\" + process.env.FORCE_DOT_COM_CLIENT_ID + \"&redirect_uri=\" + \"http://localhost:\" + (process.env.PORT || 3001) + \"/token\" + \"&display=touch\";\n    console.log('redirecting: '+oauthURL);\n\tres.redirect(oauthURL);  // Redirect to salesforce.com\n\tres.end();\n});\n\napp.get('/logout', function (req,res) {\n    req.session.destroy();\n    res.redirect('/');\n    \n});\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////                CHAT        ////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////    \n\napp.post ('/post/:what', function (req,res) {\n    console.log ('/post/:what' + req.params.what + ' : ' + req.body.me);\n    var uid = req.session.userid,\n        udata = req.session.userdata,\n        whatid = req.params.what,\n        files = req.files,\n        filename = req.body.fname,\n        filedesc = req.body.fdesc,\n\t\tme = req.body.me;\n        \n\n        \n    if (!uid && !me) {\n\t\tconsole.log ('/post/:what : no uid');\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n    if (whatid == 'me') whatid = udata.outlet.id;\n\t\n\t//  THIS IS A WORKAROUND BEBAUSE PHONGGAP DOESNT SEND COOKIES WITH FileTransfer.upload!! NEED TO FIX\n\tvar fullname = me;\n    if (udata) fullname = udata.fullname;\n\t// END OF WORKAROUND\n    \n    if (files) {\n        \n        console.log('/post got a file' + filename);\n        console.dir(files);\n        \n        var host =  (require('url').parse(foauth.getOAuthResponse().instance_url))['host'];\n\n        rest.post('https://' + host + '/services/data/v24.0/' + 'chatter/feeds/record/'+whatid+'/feed-items', {\n          multipart: true,\n          headers: { \n              'Host': host,\n              'Authorization': 'OAuth '+foauth.getOAuthResponse().access_token,\n            },\n          data: {\n            'text':  fullname + ': '+ req.body.mess,\n            'desc': filedesc,\n            'title': filename,\n            'feedItemFileUpload': rest.file(files.attach.path, files.attach.name, null, 'binary',  files.attach.type)\n          }\n        }).on('complete', function(results) {\n            req.session = null; // method doesnt update the session\n\t\t\tconsole.log ('/post/:what : results : ' + results);\n\t\t\tconsole.log ('/post/:what : results : ' + JSON.stringify(results));\n            res.send (results);\n        });\n        \n    } else {\n\t\tconsole.log('/post no file');\n        var bdy = { \"body\" :   {\"messageSegments\" : [{\"type\": \"Text\", \"text\" : fullname + ': '+ req.body.mess  }] }};\n        queryAPI('chatter/feeds/record/'+whatid+'/feed-items', bdy, 'POST',  function(results) {\n            //console.log ('/post : results : ' + JSON.stringify(results));\n            req.session = null; // method doesnt update the session\n            res.send (results);\n       });\n    }\n});\n\napp.post ('/postcomment', function (req,res) {\n    \n    var uid = req.session.userid,\n         udata = req.session.userdata;\n         \n    if (!uid) {\n    \tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n\n\n    var bdy = { \"body\" :   {\"messageSegments\" : [{\"type\": \"Text\", \"text\" : udata.fullname + ': '+  req.body.mess  }] }};\n    queryAPI('chatter/feed-items/'+ req.body.feeditem +'/comments', bdy, 'POST', function(results) {\n        //console.log ('/postcomment : results : ' + JSON.stringify(results));\n        req.session = null; // method doesnt update the session\n        res.send (results);\n   });\n});\n\napp.get ('/feedfile', function(req,res) {\n    var uid = req.session.userid,\n        what = req.query.what,\n        mt = req.query.mt;\n        \n    if (!uid) {\n//        res.send ('Please Login', 400);\n//        return;\n\t}\n    \n    console.log ('/feedfile ' + what);\n    \n    var host =  (require('url').parse(foauth.getOAuthResponse().instance_url))['host'];\n\tres.header('Content-Type', mt);\n\tres.attachment();\n\t\n\tvar data = null;\n\thttps.get({\n\t\t\tmethod: 'get',\n\t\t\thost: host,\n\t\t\tpath: what,\n\t\t\theaders: {\n\t\t\t  'Authorization': 'OAuth '+foauth.getOAuthResponse().access_token,\n\t\t}}, function(fileres) {\n\t\t\tconsole.log(\"/feedfile : statusCode: \", fileres.statusCode);\n    \n\t\t\tfileres.on('data', function(_data) {\n\t\t\t\tconsole.log ('/feedfile : got some data');\n\t\t\t\tres.write (new Buffer(_data, 'binary'));\n\t\t\t\t\n\t\t\t});\n    \n\t\t\tfileres.on('end', function() {\n\t\t\t\tconsole.log ('/feedfile : end, send the response');\n\t\t\t\tres.end();\n\t\t\t});\n\t\t}).on('error', function(e) {\n\t\t  console.log(e);\n\t\t})\n});\n/*\napp.get ('/chat/:what', function(req,res) {\n    var uid = req.session.username,\n        udata = req.session.userdata,\n        whatid = req.params.what;\n        \n    if (!uid) {\n        res.send ('Please Login', 400);\n    \treturn;\n\t}   \n\n    res.render('chat.ejs', { layout: false, locals: {  feedid: whatid, udata: udata } });\n    //res.render('chat.ejs', { locals: {  feedid: udata.outlet.id, udata: udata } });\n});\n*/\napp.get ('/myfeed/:what', function (req,res) {\n    var uid = req.session.userid,\n        udata = req.session.userdata,\n        whatid = req.params.what;\n        \n    if (!uid) {\n        res.send ('Please Login', 400);\n\t\treturn;\n\t}\n    if (whatid == 'me') {\n    \tconsole.log ('/myfeed : query for primary_group : ' + udata.belongs_to_primary);\n    \tcollections.groups_collection.findOne({_id: new mongodb.ObjectID (udata.belongs_to_primary)}, function(err, group) {\n    \t\t\tconsole.log ('/myfeed : got primary_group_memebers : [' + err + '] : ' + JSON.stringify(group));\n    \t\t\tvar team_data = {};\n    \t\t\tteam_data.outlet  = { name: group.name, pic: group.picture_url};\n    \t\t\tteam_data.outlet_team = {};\n    \t\t\tcollections.users_collection.find({_id: { $in: group.members\t}}).toArray( function (err, users) {\n\n\t\t\t\t\t\tfor (var idx in users) {\n\t\t\t\t\t\t\tvar member =  users[idx];\n\t\t\t\t\t\t\tteam_data.outlet_team[member.fullname] =   { \n\t\t\t\t\t\t\t\tpoints: member.points,\n\t\t\t\t\t\t\t\tpic: member.picture_url\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tcollections.posts_collection.find({parentid: group._id}).toArray( function (err, posts) {\n\t\t\t\t\t\t\treq.session = null; // method doesnt update the session\n\t\t\t\t\t\t\tres.send({team: team_data, feed :posts, me: udata});\n\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t});\n    \t/*\n\t\t\tvar team_data = null,\n\t\t\tfeedres = null,\n\t\t\tsentres = false;\n\t\t\t\n\t\t\tvar sendresponse = function () {\n\t\t\t\tif (feedres && team_data && sentres==false) {\n\t\t\t\t\treq.session = null; // method doesnt update the session\n\t\t\t\t\tsentres = true;\n\t\t\t\t\tres.send({team: team_data, feed :feedres, me: udata});\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// get user names and pictures and outlets too!\n\t\t\tqueryAPI('query?q='+escape('select Name, PortalPic__c,  (select Name, Points__c, PortalPic__c from Contacts) from Account where Id = \\'' + udata.outlet.id + '\\''), null, 'GET',  function (results) {\n\t\t\t\tconsole.log ('myfeed: got team query results :' + JSON.stringify(results));\n\t\t\t\tteam_data = {};\n\t\t\t\tif (results.totalSize == 1) {\n\t\t\t\t\tteam_data.outlet  = { name: results.records[0].Name, pic: results.records[0].PortalPic__c};\n\t\t\t\t\tteam_data.outlet_team = {};\n\t\t\t\t\t\n\t\t\t\t\tif (results.records[0].Contacts) {\n\t\t\t\t\t\tvar team =  results.records[0].Contacts.records;\n\t\t\t\t\t\tfor (var m in team) {\n\t\t\t\t\t\t\tteam_data.outlet_team[team[m].Name] =   { \n\t\t\t\t\t\t\t\tpoints: team[m].Points__c,\n\t\t\t\t\t\t\t\tpic: team[m].PortalPic__c\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsendresponse();\n\t\t\t});\n\t\t\tqueryAPI('chatter/feeds/record/'+udata.outlet.id+'/feed-items', null, 'GET', function (results) {\n\t\t\t\tfeedres = results;\n\t\t\t\tsendresponse();\n\t\t\t});\n\t\t\t*/\n    } else {\n        // its a training id\n        // get user names and pictures and outlets too!\n         queryAPI('query?q='+escape('select Name, (select Contact__r.Name, Contact__r.Points__c, Contact__r.PortalPic__c from Training_Participation__r) from TR_Training_Availability__c where Id = \\'' + whatid + '\\''), null, 'GET',  function (results) {\n               console.log ('myfeed: got team query results :' + JSON.stringify(results));\n               var team_data = {};\n               if (results.totalSize == 1) {\n                    team_data.outlet  = { name: results.records[0].Name, pic: 'none'};\n                    team_data.outlet_team = {};\n                    \n                    if (results.records[0].Training_Participation__r) {\n                        var team =  results.records[0].Training_Participation__r.records;\n                        for (var m in team) {\n                             team_data.outlet_team[team[m].Contact__r.Name] =   { \n                                    points: team[m].Contact__r.Points__c,\n                                    pic: team[m].Contact__r.PortalPic__c \n                            };\n                        }\n                    }\n               }\n             queryAPI('chatter/feeds/record/'+whatid+'/feed-items', null, 'GET', function (results1) {\n                //console.log ('/myfeed : results : ' + JSON.stringify(results));\n                req.session = null; // method doesnt update the session\n                res.send({team: team_data, feed :results1, me: udata});\n            });\n        });        \n    }\n   \n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////                EVENTS        //////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////////////////// \n\nvar PASS_SCORE = 100;\napp.post('/donequiz', function (req,res) {\n    var uid = req.session.userid,\n        sid = req.sessionID,\n        udata = req.session.userdata;\n    if (!uid) {\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n\n\t\n\tvar qid = req.body.id,\n\t\t\tscore = req.body.score,\n\t\t\tquesTried = req.body.quesTried,\n\t\t\tnow_passed = (req.body.quesTried>0 && req.body.score>=PASS_SCORE),\n\t\t\taready_passed = false;\n\t\t\t\n\tconsole.log ('donequiz: complted quiz:' + uid + ', quiz : ' + qid + ', score ' + score + ', quesTried : ' + quesTried + ', now_passed : ' + now_passed);\n\t// need to of least tryed one question to register quiz attempt!\n\tif ( quesTried > 0) {\n\t\t\n        collections.events_collection.findOne({_id: qid}, function(err, record) {\n    \t\tvar alreadydone = udata.completed_events;\n    \t\tvar points_award = 0;\n\n    \t\tif (!alreadydone[qid]) { // first atemmpt\n    \t\t\talreadydone[qid] = { id: \"\", passed: now_passed, score: score, attempts: 1, bestscore: score};\n    \t\t\tpoints_award = score * record.points/100;\n    \t\t\t\n    \t\t\tudata.points = udata.points + points_award;\n    \t\t\tconsole.log ('points: adding ' + points_award + ', total now : ' + udata.points);\n    \t\t} else { // NOT first attempt\n                console.log ('donequiz: not first attempt for : ' + qid);\n    \t\t\taready_passed = alreadydone[qid].passed;\n    \t\t\talreadydone[qid].attempts = alreadydone[qid].attempts + 1;\n    \t\t\talreadydone[qid].bestscore = Math.max(alreadydone[qid].bestscore, score);\n    \t\t\tif (!aready_passed) alreadydone[qid].passed = now_passed;\n    \t\t}\n\n    \t\tconsole.log ('donequiz: create results event ' + JSON.stringify(alreadydone[qid]));\n    \t\t// create event to register new results of quiz\n            \n            \n            /* update mongo */\n            var updatesJson = {};\n            updatesJson[\"completed_events.\"+qid] = alreadydone[qid];\n            collections.users_collection.update ({username: uid}, { $set: updatesJson }, {safe:true}, function(err) {\n                        if (err) { \n                            console.warn(err.message);\n                        } else {\n                            console.log('successfully updated'); \n             \n                        \tvar event = {\n                    \t\t\titem_id: qid,\n                    \t\t\titem_type: \"QUIZ\",\n                    \t\t\tresults_data: alreadydone[qid]\n                    \t\t};\n                    \t\t//if (!events_by_user[uid]) events_by_user[uid] = [];\t\n                    \t\t//events_by_user[uid].push(event);\n                            \n                            sendEventsToSession([event], sid);\n                            \n                            req.session.userdata = udata;  // update the session store with the new values.\n                            console.log ('/donequiz - udata.completed_events : ' + JSON.stringify(req.session.userdata));\n                            res.send({points: udata.points});\n                            \n                \n                            if ((!aready_passed) && now_passed) {\n                        \t\t// just passwd new quiz, hunt for new unlocks!!\n                    \t\t\tcreateEvents (uid, udata, qid, sid);\n                    \t\t}\n                        }\n                    });\n                        \n            \n            /*\n            // send update to salesforce\n            var bdy = { Name: qid, Attempts__c: alreadydone[qid].attempts, Passed__c:  alreadydone[qid].passed, First_Score__c: alreadydone[qid].score, Best_Score__c: alreadydone[qid].bestscore};\n            var sfdc_url = 'sobjects/Game_Event__c/' + alreadydone[qid].id;\n            var httpmethod = 'PATCH'; // its an update\n            if (alreadydone[qid].id.length == 0) {\n                // its a insert, set the m/d file\n                bdy.Contact__c = udata.id;\n                bdy.Points__c = points_award;\n                httpmethod = 'POST';\n            }\n            console.log ('/donequiz - ' + sfdc_url + ' : ' + JSON.stringify(bdy));\n            \n            queryAPI(sfdc_url, bdy, httpmethod, function(response) {\n                if (response) {\n                    console.log ('/donequiz -  response : ' +  JSON.stringify(response));\n                    console.log ('/donequiz setting id ' + qid + ' : ' + response.id);\n                    alreadydone[qid].id = response.id;\n                }\n    \n                \n        \t\tvar event = {\n    //    \t\t\tindex: event_index++,\n    //    \t\t\ttimestamp: new Date().getTime(),\n    //    \t\t\tactive: true,\n        \t\t\titem_id: qid,\n        \t\t\titem_type: \"QUIZ\",\n        \t\t\tresults_data: alreadydone[qid]\n        \t\t};\n        \t\t//if (!events_by_user[uid]) events_by_user[uid] = [];\t\n        \t\t//events_by_user[uid].push(event);\n                \n                sendEventsToSession([event], sid);\n                \n                req.session.userdata = udata;  // update the session store with the new values.\n                console.log ('/donequiz - udata.completed_events : ' + JSON.stringify(req.session.userdata));\n                res.send({points: udata.points});\n                \n    \n                if ((!aready_passed) && now_passed) {\n            \t\t// just passwd new quiz, hunt for new unlocks!!\n        \t\t\tcreateEvents (uid, udata, qid, sid);\n        \t\t}\n        \t\t//notify_long_connection_by_user(uid, udata);\n            });\n            */\n        });\n\t} else {\n\t\n    \t// update points in response\n        req.session = null;\n    \tres.send({points: udata.points});\n\t}\n});\n\n\n\napp.post('/booktraining', function (req,res) {\n    var uid = req.session.username,\n        sid = req.sessionID,\n        udata = req.session.userdata;\n    if (!uid) {\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n\n\tvar tid = req.body.tid,\n\t\ttdate = req.body.tdate;\n\n\tconsole.log ('booktraining() complted quiz:' + tid + ', data : ' + tdate);\n\t// need to of least tryed one question to register quiz attempt!\n\n\t\t\n\t\tvar alreadybooked = udata.booked_training;\n        if (!alreadybooked[tid]) { // first atemmpt\n            console.log ('booktraining() first atemmpt');\n    \t\talreadybooked[tid] = { id: \"\",   type: 'Booked on ' + tdate};\n        } else {\n            // just update date\n            console.log ('booktraining() just update date');\n            alreadybooked[tid] = { id: alreadybooked[tid].id, type: 're-Booked on ' + tdate };\n        }\n        \n        // send update to salesforce\n        var bdy = { Type__c:  alreadybooked[tid].type};\n        var sfdc_url = 'sobjects/TR_Training_Participation__c/' + alreadybooked[tid].id;\n        var httpmethod = 'PATCH'; // its an update\n        if (alreadybooked[tid].id.length == 0) {\n            // its a insert, set the m/d file\n            bdy.Contact__c = udata.id;\n            bdy.Training_Availability__c = tid;\n            httpmethod = 'POST';\n        }\n        console.log ('booktraining() ' + sfdc_url + ' : ' + JSON.stringify(bdy));\n        \n        queryAPI(sfdc_url, bdy, httpmethod, function(response) {\n            if (response) {\n                console.log ('/booktraining -  response : ' +  JSON.stringify(response));\n                console.log ('/booktraining setting id ' + tid + ' : ' + response.id);\n                alreadybooked[tid].id = response.id;\n            }\n\n            \n    \t\tvar event = {\n//    \t\t\tindex: event_index++,\n//    \t\t\ttimestamp: new Date().getTime(),\n//    \t\t\tactive: true,\n    \t\t\titem_id: tid,\n    \t\t\titem_type: \"TRAINING\",\n    \t\t\tresults_data: alreadybooked[tid]\n    \t\t};\n    \t\t//if (!events_by_user[uid]) events_by_user[uid] = [];\t\n    \t\t//events_by_user[uid].push(event);\n            sendEventsToSession([event], sid);\n            \n            \n            req.session.userdata = udata;  // update the session store with the new values.\n            console.log ('/booktraining - udata.completed_events : ' + JSON.stringify(req.session.userdata));\n            res.send({points: udata.points});\n            \n\n    \t\t//notify_long_connection_by_user(uid, udata);\n        });\n\n});\n\n// If we have a LongPoll request, respond with the events. otherwise add it to the 'temp_events_pending_longpoll' array!\n//var temp_events_pending_longpoll = {};\n/*\nfunction sendEventsToSession (events, sid) {\n\tconsole.log ('sendEventsToSession()');\n\tvar req_info = long_connections_by_session[sid];\n\tif (!req_info || req_info.completed) {\n\t\tconsole.log ('sendEventsToSession() no outstanding longpolling requests for ' + sid + ', store events for pending longpoll');\n\t\tif (!temp_events_pending_longpoll[sid])    \n\t\t\ttemp_events_pending_longpoll[sid] = events;\n\t\telse\n\t\t\ttemp_events_pending_longpoll[sid].push.apply(temp_events_pending_longpoll[sid], events);\n\t} else {\n\t\tconsole.log ('sendEventsToSession() got active connection for user ' + sid + ', sending events');\n\n\t\tclearTimeout(req_info.timeoutid);\n\t\treq_info.completed = true;\n\t\treq_info.request.resume();\n\t\t//event.my_points = udata.points;\n\t\treq_info.request.session = null; // method doesnt update the session\n\t\treq_info.response.send (JSON.stringify(events));\n\t}\n}\n*/\n\n\n\nvar connectionTimeout = 25; // always send a empty '200' reponse to each open request after 60seconds.\napp.get('/longpoll/:lasteventprocessed', function (req, res) {\n    var uid = req.session.userid,\n        udata = req.session.userdata,\n        sid = req.sessionID,\n        lasteventprocessed = req.params.lasteventprocessed;\n        \n    if (!uid) {\n    \tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n    \n    if (lasteventprocessed == 0) {\n        collections.long_connections_by_session[sid] = null;\n        //temp_events_pending_longpoll[sid] = null;\n       createEvents(uid, udata,  null, req.sessionID);\n//       createTrainings (uid, udata, req.sessionID);\n    }\n    \n\tconsole.log ('longpoll() got request from ' + uid + ' last eventprocessed from url : ' + lasteventprocessed);\n\t// check the required parameters\n\n    \n\t//var event = nextEvent(uid, lasteventprocessed);\n    //var events = temp_events_pending_longpoll[sid];\n\t//if (!events) {\n\n    collections.session_events_collection.findAndModify (\n        {_id: sid},\n        [],\n    \t{$unset :{ 'events' : 1}},\n    \t{new: false, upsert: false },\n    \tfunction(err, data) {\n            if (err || !data || !data.events) {\n                console.log ('longpoll() :: no event data ('  + err + ')  : ' + JSON.stringify(data));\n            \tconsole.log ('longpoll() pause request, no event to send ' + lasteventprocessed);\n        \n        \t\tvar req_info = { request: req, response: res, lasteventprocessed: lasteventprocessed, completed: false};\n        \t\treq_info.timeoutid = setTimeout( function () { \n        \t\t\tconsole.log ('longpoll() saved req_info,  timeout pulse');\n        \t\t\treq_info.request.resume();\n        \t\t\treq_info.response.send({item_type: \"PULSE\"});\n        \t\t\treq_info.completed = true;\n        \t\t\t }, connectionTimeout * 1000); \n        \n        \t\t//if (!long_connections_by_session[sid])\n        \t\t//\tlong_connections_by_session[sid] = [];  \n        \t\tcollections.long_connections_by_session[sid] = req_info;\n        \t\treq.pause();\n        \t\tconsole.log ('longpoll() stored and paused request');\n        \n            } else {\n        \t\tconsole.log ('longpoll() send the stored event data : ' + JSON.stringify(data));\n                res.send(JSON.stringify(data.events));\n            }\n    \t});\n/*\n\t} else {\n\t\tconsole.log ('longpoll() got event to send to user');\n\t\t//event.my_points =udata.points;\n\t\t//setTimeout (function() {  // ADD A 1 SECOND DELAY - JUST FOR EFFECT!!!\n\t\tres.send(JSON.stringify(events));\n\t\tconsole.log ('longpoll sent :' + JSON.stringify(events));\n        temp_events_pending_longpoll[sid] = null;\n\t\t//}, 1000);\n\t}\n*/\n\n});\n\napp.get ('/stream/:filename', function (req,res) {\n\tvar fn = __dirname+'/public/media/' +req.params.filename;\n\tconsole.log ('stream: filename ' + fn);\n\tres.sendfile (fn);\n});\n\n\n\n\nfunction createEvents(uid, udata, just_completed, sid) {\n    console.log ('createEvents() ' + uid + ', just_completed (set if just want delta): ' + just_completed);\n\t\n    // TODO...\n    var cursor = collections.events_collection.find ({});\n    cursor.toArray( function (err, item) {\n        console.log ('createEvents() query events item (' + err + ') : ' + JSON.stringify (item)); \n        var ret_events = [];\n        for (var idx in item) {\n\n            var i = item[idx]._id;\n    \t\tvar e = item[idx];\n    \t\tconsole.log ('createEvents : checking item : ' + i + '  :: ' + JSON.stringify (e));\n    \t\t\n    \t\tvar event = null, \n    \t\t\tresults_data = null,\n    \t\t\tselected = true, \n    \t\t\tnewlyselected = false;\n    \t\t\t\t\n    \t\tfor (var needtocomplete in e.forwho.completed) {\n    \t\t\tconsole.log ('createEvents: checking prereq for event, required : ' + needtocomplete + ', is it in ' + JSON.stringify(udata.completed_events) );\n    \t\t\tif (just_completed == needtocomplete ) {\n    \t\t\t\tnewlyselected = true;\n    \t\t\t}\n    \t\t\tvar hascompleted = udata.completed_events[needtocomplete];\n    \t\t\tif ((!hascompleted) || hascompleted.passed == false) {\n    \t\t\t//if (! (needtocomplete in users_collection[user].completed_events)) {\n    \t\t\t\tselected = false; break;\n    \t\t\t}\n    \t\t}\n    \t\tif (((!selected) || (just_completed != null && newlyselected == false))) {\n                console.log ('not selected');\n    \t\t} else {\n                // 100 points for just getting a new event\n        \t    //udata.points = udata.points + 50;\n        \t\t//console.log ('createEvents: points: adding ' + '50' + ', total now : ' + udata.points);\n        \n        \t\tvar event = {\n            //\t\t\tindex: event_index++,\n            //\t\t\ttimestamp: new Date().getTime(),\n            //\t\t\tactive: true,\n            \t\t\titem_id: i,\n            \t\t\titem_type: e.type,\n            \t\t\titem_data: e,\n            \t\t\tresults_data: udata.completed_events[i]\n        \t\t    };\n        \t\t//if (!events_by_user[uid])\tevents_by_user[uid] = [];\t\n        \t\t//events_by_user[uid].push(event);\n        \t\tconsole.log('createEvents: ADDED EVENT  [' + event.item_id +'], event_data ' + JSON.stringify(event.item_data) + ', results_data ' + JSON.stringify(event.results_data)  + ', newlyselected : '+ newlyselected);\n                ret_events.push (event);\n    \t\t}\n        }\n        sendEventsToSession(ret_events, sid);\n    });\n}\n\nfunction createTrainings (uid, udata, sid) {\n    console.log ('createTrainings :' + uid);\n     queryAPI('query?q='+escape('select Id, Name, Description__c, Start_date__c, Total_Participations__c, TR_Training__r.Content_Reference__c  , Training_Categories__c  from TR_Training_Availability__c where Account__c = \\'' + udata.outlet.id + '\\''), null, 'GET',  function (results) {\n           console.log ('createTrainings: got  query results :' + JSON.stringify(results));\n            if (results.totalSize >= 1) {\n                var ret_events = [];\n                for (var m in results.records) {\n                    var trec = results.records[m];\n                    \n                    var event = {\n    //                \t\tindex: event_index++,\n    //            \t\t\ttimestamp: new Date().getTime(),\n    //            \t\t\tactive: true,\n                \t\t\titem_id: trec.Id,\n                \t\t\titem_type: 'TRAINING',\n                \t\t\titem_data: {\n                                name: trec.Name,\n                        \t\tdesc: trec.Description__c,\n                    \t\t\tinfo: trec.Total_Participations__c\n                                },\n            \t\t\t    results_data: udata.booked_training[trec.Id]\n            \t\t    };\n//                    if (!events_by_user[uid])    events_by_user[uid] = [];\t\n//            \t\tevents_by_user[uid].push(event);\n                    console.log('createTrainings: ADDED EVENT [' + JSON.stringify(event));\n                    ret_events.push(event);\n                    \n                }\n//              notify_long_connection_by_user(uid, udata);\n                sendEventsToSession(ret_events, sid);\n           }\n     });\n}\n\n\n\nfunction sendEventsToSession (events, sid) {\n\tconsole.log ('sendEventsToSession() [' + sid + '] : '+ events.length);\n    var req_info = collections.long_connections_by_session[sid];\n    if (!req_info || req_info.completed) { \n        console.log ('sendEventsToSession() : save events to database & message all dynos to see if they have a longpoll for that session');\n\t    collections.session_events_collection.update ({_id: sid}, {$pushAll :{'events' :  events}}, {upsert: true}, function(err, data) {\n\t\t\tconsole.log ('sendEventsToSession, created event data on session : [' + err + '] : ' + data);\n\t\t\tcollections.longpoll_exchange.publish ('#', {type: 'NEW_EVENT_DATA', sessionid: sid}, { contentType: 'application/json'});\n    \t});\n    } else {\n        clearTimeout(req_info.timeoutid);\n    \treq_info.completed = true;\n    \treq_info.request.resume();\n    \t//event.my_points = udata.points;\n    \treq_info.request.session = null; // method doesnt update the session\n\t\treq_info.response.send (JSON.stringify(events));\n    }\n}\n\n\n\n\n\n}"]],"start1":0,"start2":0,"length1":0,"length2":37195}]],"length":37195,"saved":false}
{"contributors":[],"silentsave":false,"ts":1347358331172,"patch":[[{"diffs":[[1,"var rest = require('restler'),\n    mongodb = require('mongodb'),\n    ObjectID = require('mongodb').ObjectID,\n    gridform = require('gridform'),\n    formidable = require('formidable'),\n    gridstream = require('gridfs-stream'); // https://github.com/aheckmann/gridform\n\nmodule.exports = function(app, collections){\n    \n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////                USER        ////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////   \n\napp.get ('/profile', function(req,res) {\n    var uid = req.session.userid,\n        udata = req.session.userdata || {};\n        \n    console.log ('/profile uid ['+uid+'] : ' + JSON.stringify (udata));\n    collections.groups_collection.find().toArray( function (err, groups) {\n        console.log ('/profile groups : ' + JSON.stringify (groups));\n        //res.render('profile.ejs', { layout: false, locals: {  feedid: whatid, udata: udata } });\n        res.render('profile.hogan', { layout: false, locals: {  me: udata, groups: groups } });\n\t});\n});\n\napp.get('/media/:filename', function (req,res) {\n    var gs = new mongodb.GridStore(collections.db, new ObjectID(req.params.filename), 'r');\n    gs.open(function(err, gs){\n        gs.stream([autoclose=false]).pipe(res);\n    });\n\n});\n\napp.post ('/profile', function(req,res) {\n    \n    /*\n    var options = { db: collections.db };\n    var form = gridform(options);\n    */\n\n    var uid = new ObjectID ();\n\n    var incomingForm = new formidable.IncomingForm();\n\n    // overwrite this method if you are interested in directly accessing the multipart stream\n    incomingForm.onPart = function(part) {\n        \n        console.log ('/profile onPart, partname : ['+part.name+'], part.filename :  ' + part.filename);\n        if (part.filename === undefined) {\n            // let formidable handle all non-file parts\n            return incomingForm.handlePart(part);\n        }\n \n        var form = this;\n        form._flushing++;\n        \n        \n        // open gridFS write Stream\n        var filename = 'profile-pic'+uid;\n        var options = {mode: 'w', content_type: part.mime};\n        if (form.chunk_size) options.chunk_size = this.chunk_size;\n        if (form.root) options.root = this.root;\n        if (form.metadata) options.metadata = this.metadata;\n        console.log ('/profile onPart  open gridFS ['+filename+']  : options : ' + options ); \n        var grid_ws = gridstream(collections.db).createWriteStream(options);\n        \n        form.emit('fileBegin', part.name, grid_ws);\n        \n        /*\n        var gridOnDrain = function() { \n            console.log ('/profile grid_ws.drain : resuming form');\n            form.resume();\n        }\n        grid_ws.on('drain', gridOnDrain);\n        */\n        \n        var partOnData = function(buffer) {\n            console.log ('/profile part.data:   pause form & write to grid');\n            //form.pause();\n            grid_ws.write(buffer);\n        };\n        part.on('data', partOnData);\n        \n        part.once('end', function  () {\n            console.log ('/profile part.end:  got end');\n            part.removeListener('data', partOnData);\n            //grid_ws.removeListener('drain', gridOnDrain);\n            grid_ws.once('drain', function (err) {\n                console.log ('/profile part.end: final grid_ws.drain:  ' + err);\n                if (err) return form.emit('error', err = err);\n\n                form._flushing--;\n                form.emit('file', 'fileid', grid_ws.id);\n                form._maybeEnd();\n              });\n            console.log ('/profile part.end:  end grid_ws');\n            grid_ws.end();\n          });\n    }\n\n    // we disabled the bodyParser for multipart, so using formidable to stream the data to mongo gridFS\n    incomingForm.parse(req, function (err, fields, files) {\n    \n        console.log ('/profile parse fields ' + JSON.stringify(fields));\n        console.log ('/profile parse file [' + err + '] ' + JSON.stringify(files));\n        \n        var user =  {\n            _id: uid,\n            username : fields[\"user[email]\"],\n    \t\tfullname: fields[\"user[name]\"],\n    \t\tpoints: 0,\n    \t\tbelongs_to_primary: fields[\"user[location]\"],\n            desc:  fields[\"user[description]\"],\n            picture_url: '/media/'+files[\"fileid\"],\n            completed_events: {},\n    \t    booked_training: {}\n        };\n    \n        \n        collections.users_collection.insert (user, function(err, docs) {\n            console.log ('/profile parse, saved user, send response redirect');\n            \n            collections.groups_collection.findOne({_id: user.belongs_to_primary}, function(err, item) {\n                user.outlet = item;\n                req.session.userid = user._id;\n        \t\treq.session.userdata = user;  \n                res.redirect('/#home');\n            });\n        })\n    \n    });\n  \n  \n/*   \n    var uid = req.session.username,\n        udata = req.session.userdata;\n        \n    if (!uid) {\n        res.send ('Please Login', 400);\n        return;\n    }\n \n    console.log ('/profile body :: ' + JSON.stringify(req.body));\n    console.log ('/profile body :: ' + JSON.stringify(req.files));\n    \n    var user =  {\n    \tusername : req.body.user.email,\n\t\tfullname: req.body.user.name,\n\t\tpoints: 0,\n\t\tbelongs_to_primary: req.body.user.location,\n        desc: req.body.user.description\n    };\n\n    collections.users_collection.insert (user, function(err, docs) {\n        res.redirect('/');\n    })\n*/\n});\n\n\n\n// LOGIN POST\napp.post('/ajaxlogin', function (req,res) {\n    var uname = req.body.username;\n    console.log ('ajaxlogin: Attempt to login as ' + uname + ', sessionid : ' + req.sessionID);\n    \n    if (uname) {\n        collections.users_collection.findOne({username: uname}, function(err, user) {\n    \t\t\tif (err || !user) {\n    \t\t\t\tres.send({\n    \t\t\t\t\tmessage: 'username not found: ' + uname\n    \t\t\t\t\t});\n    \t\t\t} else {\n\t\t\t\t\t\tconsole.log ('/home - got userdata : ' + JSON.stringify(user));  \n                        collections.groups_collection.findOne({_id: new ObjectID (user.belongs_to_primary)}, function(err, item) {\n                            user.outlet = item;\n    \t\t\t\t\t\t//Properties on req.session are automatically saved on a response\n    \t\t\t\t\t\treq.session.userid = user._id;\n    \t\t\t\t\t\treq.session.userdata = user;  \n    \t\t\t\t\t\tres.send({ \n    \t\t\t\t\t\t\tusername: user._id, \n    \t\t\t\t\t\t\tuserdata: user\n    \t\t\t\t\t\t\t});\n                        });\n\t\t\t\t\t}\n\t\t\t\treturn;\n    \t\n    \t});\n/*\n        queryAPI('query?q='+escape('select Id, Name, PortalPic__c, PortalID__C, Points__c, Account.Name, Account.PortalPic__c, Account.id, (select Id, Name, Attempts__c, Best_Score__c, Passed__c, First_Score__c from Game_Events__r), (select Id, Name, Type__c, Training_Availability__c  from Training_Participation__r) from Contact where PortalID__c = \\'' + uid + '\\''), null, 'GET',  function (results) {\n           console.log ('login: got query results ' + JSON.stringify(results));\n           if (results.totalSize == 1) {\n               var udata = {\n                   id:  results.records[0].Id,\n                   fullname: results.records[0].Name,\n                   points: results.records[0].Points__c, \n                   outlet : {\n                       id: results.records[0].Account.Id,\n                       name: results.records[0].Account.Name,\n                       picture_url: results.records[0].Account.PortalPic__c\n                   },\n                   picture_url: results.records[0].PortalPic__c, \n                   completed_events: {},\n                   booked_training: {}\n                   };\n                   \n                if (results.records[0].Game_Events__r) {\n                    var gameevents =  results.records[0].Game_Events__r.records;\n                    for (var gidx in gameevents) {\n                        udata.completed_events[gameevents[gidx].Name] = {\n                            id:  gameevents[gidx].Id,\n                            attempts: gameevents[gidx].Attempts__c,\n                            passed: gameevents[gidx].Passed__c,\n                            score: gameevents[gidx].First_Score__c,\n                            bestscore: gameevents[gidx].Best_Score__c\n                        };\n                    }\n                }\n                \n                 if (results.records[0].Training_Participation__r) {\n                    var tevents =  results.records[0].Training_Participation__r.records;\n                    for (var gidx in tevents) {\n                        udata.booked_training[tevents[gidx].Training_Availability__c] = {\n                            id:  tevents[gidx].Id,\n                            name:  tevents[gidx].Name,\n                            type: tevents[gidx].Type__c\n                        };\n                    }\n                }\n                \n                console.log ('/home - got userdata : ' + JSON.stringify(udata));    \n                var sess = req.session;\n                //Properties on req.session are automatically saved on a response\n                sess.username = uid;\n                sess.userdata = udata;  \n                sess.completed_events = udata.completed_events;  \n                \n//                sess.start_idx = event_index -1;\n//                createEvents(uid, udata,  null);\n//                createTrainings (uid, udata);\n                \n                res.send({ \n                        username: uid, \n                        userdata: udata\n//                        current_index: sess.start_idx\n                        });\n               \n                return;\n           } else {\n                res.send({message : 'username not found (ensure Contact exists with username in PortalID__c field): ' + uid});\n                return;\n           }\n        });\n*/\n    } else {\n\tres.send({message : 'Please enter username'});\n    }\n});\n\napp.get('/ajaxlogin', function (req,res) {\n    var uid = req.session.userid,\n        udata = req.session.userdata;\n//        start_idx = req.session.start_idx;\n        \n    console.log ('ajaxlogin: checking valid session for ' + uid + ', sessionid : ' + req.sessionID);\n        \n    if (!uid) {\n        // no active session\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} else {\n\t    // got active session\n        req.session = null; // not changing the session\n        \n        res.send({ \n                username: uid, \n                userdata: udata, \n//                current_index: start_idx\n                }); \n    }\n});\n\napp.get('/login-oauth/:provider', function (req, res) {\n    // We have nothing - redirect to the Authorization Server\n    req.session.oauth_state = req.url;\n    var oauthURL = \"https://\" + process.env.SFDC_HOSTNAME + \"/services/oauth2/authorize?response_type=code&\" +\n        \"client_id=\" + process.env.FORCE_DOT_COM_CLIENT_ID + \"&redirect_uri=\" + \"http://localhost:\" + (process.env.PORT || 3001) + \"/token\" + \"&display=touch\";\n    console.log('redirecting: '+oauthURL);\n\tres.redirect(oauthURL);  // Redirect to salesforce.com\n\tres.end();\n});\n\napp.get('/logout', function (req,res) {\n    req.session.destroy();\n    res.redirect('/');\n    \n});\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////                CHAT        ////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////    \n\napp.post ('/post/:what', function (req,res) {\n    console.log ('/post/:what' + req.params.what + ' : ' + req.body.me);\n    var uid = req.session.userid,\n        udata = req.session.userdata,\n        whatid = req.params.what,\n        files = req.files,\n        filename = req.body.fname,\n        filedesc = req.body.fdesc,\n\t\tme = req.body.me;\n        \n\n        \n    if (!uid && !me) {\n\t\tconsole.log ('/post/:what : no uid');\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n    if (whatid == 'me') whatid = udata.outlet.id;\n\t\n\t//  THIS IS A WORKAROUND BEBAUSE PHONGGAP DOESNT SEND COOKIES WITH FileTransfer.upload!! NEED TO FIX\n\tvar fullname = me;\n    if (udata) fullname = udata.fullname;\n\t// END OF WORKAROUND\n    \n    if (files) {\n        \n        console.log('/post got a file' + filename);\n        console.dir(files);\n        \n        var host =  (require('url').parse(foauth.getOAuthResponse().instance_url))['host'];\n\n        rest.post('https://' + host + '/services/data/v24.0/' + 'chatter/feeds/record/'+whatid+'/feed-items', {\n          multipart: true,\n          headers: { \n              'Host': host,\n              'Authorization': 'OAuth '+foauth.getOAuthResponse().access_token,\n            },\n          data: {\n            'text':  fullname + ': '+ req.body.mess,\n            'desc': filedesc,\n            'title': filename,\n            'feedItemFileUpload': rest.file(files.attach.path, files.attach.name, null, 'binary',  files.attach.type)\n          }\n        }).on('complete', function(results) {\n            req.session = null; // method doesnt update the session\n\t\t\tconsole.log ('/post/:what : results : ' + results);\n\t\t\tconsole.log ('/post/:what : results : ' + JSON.stringify(results));\n            res.send (results);\n        });\n        \n    } else {\n\t\tconsole.log('/post no file');\n        var bdy = { \"body\" :   {\"messageSegments\" : [{\"type\": \"Text\", \"text\" : fullname + ': '+ req.body.mess  }] }};\n        queryAPI('chatter/feeds/record/'+whatid+'/feed-items', bdy, 'POST',  function(results) {\n            //console.log ('/post : results : ' + JSON.stringify(results));\n            req.session = null; // method doesnt update the session\n            res.send (results);\n       });\n    }\n});\n\napp.post ('/postcomment', function (req,res) {\n    \n    var uid = req.session.userid,\n         udata = req.session.userdata;\n         \n    if (!uid) {\n    \tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n\n\n    var bdy = { \"body\" :   {\"messageSegments\" : [{\"type\": \"Text\", \"text\" : udata.fullname + ': '+  req.body.mess  }] }};\n    queryAPI('chatter/feed-items/'+ req.body.feeditem +'/comments', bdy, 'POST', function(results) {\n        //console.log ('/postcomment : results : ' + JSON.stringify(results));\n        req.session = null; // method doesnt update the session\n        res.send (results);\n   });\n});\n\napp.get ('/feedfile', function(req,res) {\n    var uid = req.session.userid,\n        what = req.query.what,\n        mt = req.query.mt;\n        \n    if (!uid) {\n//        res.send ('Please Login', 400);\n//        return;\n\t}\n    \n    console.log ('/feedfile ' + what);\n    \n    var host =  (require('url').parse(foauth.getOAuthResponse().instance_url))['host'];\n\tres.header('Content-Type', mt);\n\tres.attachment();\n\t\n\tvar data = null;\n\thttps.get({\n\t\t\tmethod: 'get',\n\t\t\thost: host,\n\t\t\tpath: what,\n\t\t\theaders: {\n\t\t\t  'Authorization': 'OAuth '+foauth.getOAuthResponse().access_token,\n\t\t}}, function(fileres) {\n\t\t\tconsole.log(\"/feedfile : statusCode: \", fileres.statusCode);\n    \n\t\t\tfileres.on('data', function(_data) {\n\t\t\t\tconsole.log ('/feedfile : got some data');\n\t\t\t\tres.write (new Buffer(_data, 'binary'));\n\t\t\t\t\n\t\t\t});\n    \n\t\t\tfileres.on('end', function() {\n\t\t\t\tconsole.log ('/feedfile : end, send the response');\n\t\t\t\tres.end();\n\t\t\t});\n\t\t}).on('error', function(e) {\n\t\t  console.log(e);\n\t\t})\n});\n/*\napp.get ('/chat/:what', function(req,res) {\n    var uid = req.session.username,\n        udata = req.session.userdata,\n        whatid = req.params.what;\n        \n    if (!uid) {\n        res.send ('Please Login', 400);\n    \treturn;\n\t}   \n\n    res.render('chat.ejs', { layout: false, locals: {  feedid: whatid, udata: udata } });\n    //res.render('chat.ejs', { locals: {  feedid: udata.outlet.id, udata: udata } });\n});\n*/\napp.get ('/myfeed/:what', function (req,res) {\n    var uid = req.session.userid,\n        udata = req.session.userdata,\n        whatid = req.params.what;\n        \n    if (!uid) {\n        res.send ('Please Login', 400);\n\t\treturn;\n\t}\n    if (whatid == 'me') {\n    \tconsole.log ('/myfeed : query for primary_group : ' + udata.belongs_to_primary);\n    \tcollections.groups_collection.findOne({_id: new mongodb.ObjectID (udata.belongs_to_primary)}, function(err, group) {\n    \t\t\tconsole.log ('/myfeed : got primary_group_memebers : [' + err + '] : ' + JSON.stringify(group));\n    \t\t\tvar team_data = {};\n    \t\t\tteam_data.outlet  = { name: group.name, pic: group.picture_url};\n    \t\t\tteam_data.outlet_team = {};\n    \t\t\tcollections.users_collection.find({_id: { $in: group.members\t}}).toArray( function (err, users) {\n\n\t\t\t\t\t\tfor (var idx in users) {\n\t\t\t\t\t\t\tvar member =  users[idx];\n\t\t\t\t\t\t\tteam_data.outlet_team[member.fullname] =   { \n\t\t\t\t\t\t\t\tpoints: member.points,\n\t\t\t\t\t\t\t\tpic: member.picture_url\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tcollections.posts_collection.find({parentid: group._id}).toArray( function (err, posts) {\n\t\t\t\t\t\t\treq.session = null; // method doesnt update the session\n\t\t\t\t\t\t\tres.send({team: team_data, feed :posts, me: udata});\n\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t});\n    \t/*\n\t\t\tvar team_data = null,\n\t\t\tfeedres = null,\n\t\t\tsentres = false;\n\t\t\t\n\t\t\tvar sendresponse = function () {\n\t\t\t\tif (feedres && team_data && sentres==false) {\n\t\t\t\t\treq.session = null; // method doesnt update the session\n\t\t\t\t\tsentres = true;\n\t\t\t\t\tres.send({team: team_data, feed :feedres, me: udata});\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// get user names and pictures and outlets too!\n\t\t\tqueryAPI('query?q='+escape('select Name, PortalPic__c,  (select Name, Points__c, PortalPic__c from Contacts) from Account where Id = \\'' + udata.outlet.id + '\\''), null, 'GET',  function (results) {\n\t\t\t\tconsole.log ('myfeed: got team query results :' + JSON.stringify(results));\n\t\t\t\tteam_data = {};\n\t\t\t\tif (results.totalSize == 1) {\n\t\t\t\t\tteam_data.outlet  = { name: results.records[0].Name, pic: results.records[0].PortalPic__c};\n\t\t\t\t\tteam_data.outlet_team = {};\n\t\t\t\t\t\n\t\t\t\t\tif (results.records[0].Contacts) {\n\t\t\t\t\t\tvar team =  results.records[0].Contacts.records;\n\t\t\t\t\t\tfor (var m in team) {\n\t\t\t\t\t\t\tteam_data.outlet_team[team[m].Name] =   { \n\t\t\t\t\t\t\t\tpoints: team[m].Points__c,\n\t\t\t\t\t\t\t\tpic: team[m].PortalPic__c\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsendresponse();\n\t\t\t});\n\t\t\tqueryAPI('chatter/feeds/record/'+udata.outlet.id+'/feed-items', null, 'GET', function (results) {\n\t\t\t\tfeedres = results;\n\t\t\t\tsendresponse();\n\t\t\t});\n\t\t\t*/\n    } else {\n        // its a training id\n        // get user names and pictures and outlets too!\n         queryAPI('query?q='+escape('select Name, (select Contact__r.Name, Contact__r.Points__c, Contact__r.PortalPic__c from Training_Participation__r) from TR_Training_Availability__c where Id = \\'' + whatid + '\\''), null, 'GET',  function (results) {\n               console.log ('myfeed: got team query results :' + JSON.stringify(results));\n               var team_data = {};\n               if (results.totalSize == 1) {\n                    team_data.outlet  = { name: results.records[0].Name, pic: 'none'};\n                    team_data.outlet_team = {};\n                    \n                    if (results.records[0].Training_Participation__r) {\n                        var team =  results.records[0].Training_Participation__r.records;\n                        for (var m in team) {\n                             team_data.outlet_team[team[m].Contact__r.Name] =   { \n                                    points: team[m].Contact__r.Points__c,\n                                    pic: team[m].Contact__r.PortalPic__c \n                            };\n                        }\n                    }\n               }\n             queryAPI('chatter/feeds/record/'+whatid+'/feed-items', null, 'GET', function (results1) {\n                //console.log ('/myfeed : results : ' + JSON.stringify(results));\n                req.session = null; // method doesnt update the session\n                res.send({team: team_data, feed :results1, me: udata});\n            });\n        });        \n    }\n   \n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////                EVENTS        //////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////////////////// \n\nvar PASS_SCORE = 100;\napp.post('/donequiz', function (req,res) {\n    var uid = req.session.userid,\n        sid = req.sessionID,\n        udata = req.session.userdata;\n    if (!uid) {\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n\n\t\n\tvar qid = req.body.id,\n\t\t\tscore = req.body.score,\n\t\t\tquesTried = req.body.quesTried,\n\t\t\tnow_passed = (req.body.quesTried>0 && req.body.score>=PASS_SCORE),\n\t\t\taready_passed = false;\n\t\t\t\n\tconsole.log ('donequiz: complted quiz:' + uid + ', quiz : ' + qid + ', score ' + score + ', quesTried : ' + quesTried + ', now_passed : ' + now_passed);\n\t// need to of least tryed one question to register quiz attempt!\n\tif ( quesTried > 0) {\n\t\t\n        collections.events_collection.findOne({_id: qid}, function(err, record) {\n    \t\tvar alreadydone = udata.completed_events;\n    \t\tvar points_award = 0;\n\n    \t\tif (!alreadydone[qid]) { // first atemmpt\n    \t\t\talreadydone[qid] = { id: \"\", passed: now_passed, score: score, attempts: 1, bestscore: score};\n    \t\t\tpoints_award = score * record.points/100;\n    \t\t\t\n    \t\t\tudata.points = udata.points + points_award;\n    \t\t\tconsole.log ('points: adding ' + points_award + ', total now : ' + udata.points);\n    \t\t} else { // NOT first attempt\n                console.log ('donequiz: not first attempt for : ' + qid);\n    \t\t\taready_passed = alreadydone[qid].passed;\n    \t\t\talreadydone[qid].attempts = alreadydone[qid].attempts + 1;\n    \t\t\talreadydone[qid].bestscore = Math.max(alreadydone[qid].bestscore, score);\n    \t\t\tif (!aready_passed) alreadydone[qid].passed = now_passed;\n    \t\t}\n\n    \t\tconsole.log ('donequiz: create results event ' + JSON.stringify(alreadydone[qid]));\n    \t\t// create event to register new results of quiz\n            \n            \n            /* update mongo */\n            var updatesJson = {};\n            updatesJson[\"completed_events.\"+qid] = alreadydone[qid];\n            collections.users_collection.update ({username: uid}, { $set: updatesJson }, {safe:true}, function(err) {\n                        if (err) { \n                            console.warn(err.message);\n                        } else {\n                            console.log('successfully updated'); \n             \n                        \tvar event = {\n                    \t\t\titem_id: qid,\n                    \t\t\titem_type: \"QUIZ\",\n                    \t\t\tresults_data: alreadydone[qid]\n                    \t\t};\n                    \t\t//if (!events_by_user[uid]) events_by_user[uid] = [];\t\n                    \t\t//events_by_user[uid].push(event);\n                            \n                            sendEventsToSession([event], sid);\n                            \n                            req.session.userdata = udata;  // update the session store with the new values.\n                            console.log ('/donequiz - udata.completed_events : ' + JSON.stringify(req.session.userdata));\n                            res.send({points: udata.points});\n                            \n                \n                            if ((!aready_passed) && now_passed) {\n                        \t\t// just passwd new quiz, hunt for new unlocks!!\n                    \t\t\tcreateEvents (uid, udata, qid, sid);\n                    \t\t}\n                        }\n                    });\n                        \n            \n            /*\n            // send update to salesforce\n            var bdy = { Name: qid, Attempts__c: alreadydone[qid].attempts, Passed__c:  alreadydone[qid].passed, First_Score__c: alreadydone[qid].score, Best_Score__c: alreadydone[qid].bestscore};\n            var sfdc_url = 'sobjects/Game_Event__c/' + alreadydone[qid].id;\n            var httpmethod = 'PATCH'; // its an update\n            if (alreadydone[qid].id.length == 0) {\n                // its a insert, set the m/d file\n                bdy.Contact__c = udata.id;\n                bdy.Points__c = points_award;\n                httpmethod = 'POST';\n            }\n            console.log ('/donequiz - ' + sfdc_url + ' : ' + JSON.stringify(bdy));\n            \n            queryAPI(sfdc_url, bdy, httpmethod, function(response) {\n                if (response) {\n                    console.log ('/donequiz -  response : ' +  JSON.stringify(response));\n                    console.log ('/donequiz setting id ' + qid + ' : ' + response.id);\n                    alreadydone[qid].id = response.id;\n                }\n    \n                \n        \t\tvar event = {\n    //    \t\t\tindex: event_index++,\n    //    \t\t\ttimestamp: new Date().getTime(),\n    //    \t\t\tactive: true,\n        \t\t\titem_id: qid,\n        \t\t\titem_type: \"QUIZ\",\n        \t\t\tresults_data: alreadydone[qid]\n        \t\t};\n        \t\t//if (!events_by_user[uid]) events_by_user[uid] = [];\t\n        \t\t//events_by_user[uid].push(event);\n                \n                sendEventsToSession([event], sid);\n                \n                req.session.userdata = udata;  // update the session store with the new values.\n                console.log ('/donequiz - udata.completed_events : ' + JSON.stringify(req.session.userdata));\n                res.send({points: udata.points});\n                \n    \n                if ((!aready_passed) && now_passed) {\n            \t\t// just passwd new quiz, hunt for new unlocks!!\n        \t\t\tcreateEvents (uid, udata, qid, sid);\n        \t\t}\n        \t\t//notify_long_connection_by_user(uid, udata);\n            });\n            */\n        });\n\t} else {\n\t\n    \t// update points in response\n        req.session = null;\n    \tres.send({points: udata.points});\n\t}\n});\n\n\n\napp.post('/booktraining', function (req,res) {\n    var uid = req.session.username,\n        sid = req.sessionID,\n        udata = req.session.userdata;\n    if (!uid) {\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n\n\tvar tid = req.body.tid,\n\t\ttdate = req.body.tdate;\n\n\tconsole.log ('booktraining() complted quiz:' + tid + ', data : ' + tdate);\n\t// need to of least tryed one question to register quiz attempt!\n\n\t\t\n\t\tvar alreadybooked = udata.booked_training;\n        if (!alreadybooked[tid]) { // first atemmpt\n            console.log ('booktraining() first atemmpt');\n    \t\talreadybooked[tid] = { id: \"\",   type: 'Booked on ' + tdate};\n        } else {\n            // just update date\n            console.log ('booktraining() just update date');\n            alreadybooked[tid] = { id: alreadybooked[tid].id, type: 're-Booked on ' + tdate };\n        }\n        \n        // send update to salesforce\n        var bdy = { Type__c:  alreadybooked[tid].type};\n        var sfdc_url = 'sobjects/TR_Training_Participation__c/' + alreadybooked[tid].id;\n        var httpmethod = 'PATCH'; // its an update\n        if (alreadybooked[tid].id.length == 0) {\n            // its a insert, set the m/d file\n            bdy.Contact__c = udata.id;\n            bdy.Training_Availability__c = tid;\n            httpmethod = 'POST';\n        }\n        console.log ('booktraining() ' + sfdc_url + ' : ' + JSON.stringify(bdy));\n        \n        queryAPI(sfdc_url, bdy, httpmethod, function(response) {\n            if (response) {\n                console.log ('/booktraining -  response : ' +  JSON.stringify(response));\n                console.log ('/booktraining setting id ' + tid + ' : ' + response.id);\n                alreadybooked[tid].id = response.id;\n            }\n\n            \n    \t\tvar event = {\n//    \t\t\tindex: event_index++,\n//    \t\t\ttimestamp: new Date().getTime(),\n//    \t\t\tactive: true,\n    \t\t\titem_id: tid,\n    \t\t\titem_type: \"TRAINING\",\n    \t\t\tresults_data: alreadybooked[tid]\n    \t\t};\n    \t\t//if (!events_by_user[uid]) events_by_user[uid] = [];\t\n    \t\t//events_by_user[uid].push(event);\n            sendEventsToSession([event], sid);\n            \n            \n            req.session.userdata = udata;  // update the session store with the new values.\n            console.log ('/booktraining - udata.completed_events : ' + JSON.stringify(req.session.userdata));\n            res.send({points: udata.points});\n            \n\n    \t\t//notify_long_connection_by_user(uid, udata);\n        });\n\n});\n\n// If we have a LongPoll request, respond with the events. otherwise add it to the 'temp_events_pending_longpoll' array!\n//var temp_events_pending_longpoll = {};\n/*\nfunction sendEventsToSession (events, sid) {\n\tconsole.log ('sendEventsToSession()');\n\tvar req_info = long_connections_by_session[sid];\n\tif (!req_info || req_info.completed) {\n\t\tconsole.log ('sendEventsToSession() no outstanding longpolling requests for ' + sid + ', store events for pending longpoll');\n\t\tif (!temp_events_pending_longpoll[sid])    \n\t\t\ttemp_events_pending_longpoll[sid] = events;\n\t\telse\n\t\t\ttemp_events_pending_longpoll[sid].push.apply(temp_events_pending_longpoll[sid], events);\n\t} else {\n\t\tconsole.log ('sendEventsToSession() got active connection for user ' + sid + ', sending events');\n\n\t\tclearTimeout(req_info.timeoutid);\n\t\treq_info.completed = true;\n\t\treq_info.request.resume();\n\t\t//event.my_points = udata.points;\n\t\treq_info.request.session = null; // method doesnt update the session\n\t\treq_info.response.send (JSON.stringify(events));\n\t}\n}\n*/\n\n\n\nvar connectionTimeout = 25; // always send a empty '200' reponse to each open request after 60seconds.\napp.get('/longpoll/:lasteventprocessed', function (req, res) {\n    var uid = req.session.userid,\n        udata = req.session.userdata,\n        sid = req.sessionID,\n        lasteventprocessed = req.params.lasteventprocessed;\n        \n    if (!uid) {\n    \tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n    \n    if (lasteventprocessed == 0) {\n        collections.long_connections_by_session[sid] = null;\n        //temp_events_pending_longpoll[sid] = null;\n       createEvents(uid, udata,  null, req.sessionID);\n//       createTrainings (uid, udata, req.sessionID);\n    }\n    \n\tconsole.log ('longpoll() got request from ' + uid + ' last eventprocessed from url : ' + lasteventprocessed);\n\t// check the required parameters\n\n    \n\t//var event = nextEvent(uid, lasteventprocessed);\n    //var events = temp_events_pending_longpoll[sid];\n\t//if (!events) {\n\n    collections.session_events_collection.findAndModify (\n        {_id: sid},\n        [],\n    \t{$unset :{ 'events' : 1}},\n    \t{new: false, upsert: false },\n    \tfunction(err, data) {\n            if (err || !data || !data.events) {\n                console.log ('longpoll() :: no event data ('  + err + ')  : ' + JSON.stringify(data));\n            \tconsole.log ('longpoll() pause request, no event to send ' + lasteventprocessed);\n        \n        \t\tvar req_info = { request: req, response: res, lasteventprocessed: lasteventprocessed, completed: false};\n        \t\treq_info.timeoutid = setTimeout( function () { \n        \t\t\tconsole.log ('longpoll() saved req_info,  timeout pulse');\n        \t\t\treq_info.request.resume();\n        \t\t\treq_info.response.send({item_type: \"PULSE\"});\n        \t\t\treq_info.completed = true;\n        \t\t\t }, connectionTimeout * 1000); \n        \n        \t\t//if (!long_connections_by_session[sid])\n        \t\t//\tlong_connections_by_session[sid] = [];  \n        \t\tcollections.long_connections_by_session[sid] = req_info;\n        \t\treq.pause();\n        \t\tconsole.log ('longpoll() stored and paused request');\n        \n            } else {\n        \t\tconsole.log ('longpoll() send the stored event data : ' + JSON.stringify(data));\n                res.send(JSON.stringify(data.events));\n            }\n    \t});\n/*\n\t} else {\n\t\tconsole.log ('longpoll() got event to send to user');\n\t\t//event.my_points =udata.points;\n\t\t//setTimeout (function() {  // ADD A 1 SECOND DELAY - JUST FOR EFFECT!!!\n\t\tres.send(JSON.stringify(events));\n\t\tconsole.log ('longpoll sent :' + JSON.stringify(events));\n        temp_events_pending_longpoll[sid] = null;\n\t\t//}, 1000);\n\t}\n*/\n\n});\n\napp.get ('/stream/:filename', function (req,res) {\n\tvar fn = __dirname+'/public/media/' +req.params.filename;\n\tconsole.log ('stream: filename ' + fn);\n\tres.sendfile (fn);\n});\n\n\n\n\nfunction createEvents(uid, udata, just_completed, sid) {\n    console.log ('createEvents() ' + uid + ', just_completed (set if just want delta): ' + just_completed);\n\t\n    // TODO...\n    var cursor = collections.events_collection.find ({});\n    cursor.toArray( function (err, item) {\n        console.log ('createEvents() query events item (' + err + ') : ' + JSON.stringify (item)); \n        var ret_events = [];\n        for (var idx in item) {\n\n            var i = item[idx]._id;\n    \t\tvar e = item[idx];\n    \t\tconsole.log ('createEvents : checking item : ' + i + '  :: ' + JSON.stringify (e));\n    \t\t\n    \t\tvar event = null, \n    \t\t\tresults_data = null,\n    \t\t\tselected = true, \n    \t\t\tnewlyselected = false;\n    \t\t\t\t\n    \t\tfor (var needtocomplete in e.forwho.completed) {\n    \t\t\tconsole.log ('createEvents: checking prereq for event, required : ' + needtocomplete + ', is it in ' + JSON.stringify(udata.completed_events) );\n    \t\t\tif (just_completed == needtocomplete ) {\n    \t\t\t\tnewlyselected = true;\n    \t\t\t}\n    \t\t\tvar hascompleted = udata.completed_events[needtocomplete];\n    \t\t\tif ((!hascompleted) || hascompleted.passed == false) {\n    \t\t\t//if (! (needtocomplete in users_collection[user].completed_events)) {\n    \t\t\t\tselected = false; break;\n    \t\t\t}\n    \t\t}\n    \t\tif (((!selected) || (just_completed != null && newlyselected == false))) {\n                console.log ('not selected');\n    \t\t} else {\n                // 100 points for just getting a new event\n        \t    //udata.points = udata.points + 50;\n        \t\t//console.log ('createEvents: points: adding ' + '50' + ', total now : ' + udata.points);\n        \n        \t\tvar event = {\n            //\t\t\tindex: event_index++,\n            //\t\t\ttimestamp: new Date().getTime(),\n            //\t\t\tactive: true,\n            \t\t\titem_id: i,\n            \t\t\titem_type: e.type,\n            \t\t\titem_data: e,\n            \t\t\tresults_data: udata.completed_events[i]\n        \t\t    };\n        \t\t//if (!events_by_user[uid])\tevents_by_user[uid] = [];\t\n        \t\t//events_by_user[uid].push(event);\n        \t\tconsole.log('createEvents: ADDED EVENT  [' + event.item_id +'], event_data ' + JSON.stringify(event.item_data) + ', results_data ' + JSON.stringify(event.results_data)  + ', newlyselected : '+ newlyselected);\n                ret_events.push (event);\n    \t\t}\n        }\n        sendEventsToSession(ret_events, sid);\n    });\n}\n\nfunction createTrainings (uid, udata, sid) {\n    console.log ('createTrainings :' + uid);\n     queryAPI('query?q='+escape('select Id, Name, Description__c, Start_date__c, Total_Participations__c, TR_Training__r.Content_Reference__c  , Training_Categories__c  from TR_Training_Availability__c where Account__c = \\'' + udata.outlet.id + '\\''), null, 'GET',  function (results) {\n           console.log ('createTrainings: got  query results :' + JSON.stringify(results));\n            if (results.totalSize >= 1) {\n                var ret_events = [];\n                for (var m in results.records) {\n                    var trec = results.records[m];\n                    \n                    var event = {\n    //                \t\tindex: event_index++,\n    //            \t\t\ttimestamp: new Date().getTime(),\n    //            \t\t\tactive: true,\n                \t\t\titem_id: trec.Id,\n                \t\t\titem_type: 'TRAINING',\n                \t\t\titem_data: {\n                                name: trec.Name,\n                        \t\tdesc: trec.Description__c,\n                    \t\t\tinfo: trec.Total_Participations__c\n                                },\n            \t\t\t    results_data: udata.booked_training[trec.Id]\n            \t\t    };\n//                    if (!events_by_user[uid])    events_by_user[uid] = [];\t\n//            \t\tevents_by_user[uid].push(event);\n                    console.log('createTrainings: ADDED EVENT [' + JSON.stringify(event));\n                    ret_events.push(event);\n                    \n                }\n//              notify_long_connection_by_user(uid, udata);\n                sendEventsToSession(ret_events, sid);\n           }\n     });\n}\n\n\n\nfunction sendEventsToSession (events, sid) {\n\tconsole.log ('sendEventsToSession() [' + sid + '] : '+ events.length);\n    var req_info = collections.long_connections_by_session[sid];\n    if (!req_info || req_info.completed) { \n        console.log ('sendEventsToSession() : save events to database & message all dynos to see if they have a longpoll for that session');\n\t    collections.session_events_collection.update ({_id: sid}, {$pushAll :{'events' :  events}}, {upsert: true}, function(err, data) {\n\t\t\tconsole.log ('sendEventsToSession, created event data on session : [' + err + '] : ' + data);\n\t\t\tcollections.longpoll_exchange.publish ('#', {type: 'NEW_EVENT_DATA', sessionid: sid}, { contentType: 'application/json'});\n    \t});\n    } else {\n        clearTimeout(req_info.timeoutid);\n    \treq_info.completed = true;\n    \treq_info.request.resume();\n    \t//event.my_points = udata.points;\n    \treq_info.request.session = null; // method doesnt update the session\n\t\treq_info.response.send (JSON.stringify(events));\n    }\n}\n\n\n\n\n\n}"]],"start1":0,"start2":0,"length1":0,"length2":37208}]],"length":37208,"saved":false}
{"contributors":[],"silentsave":false,"ts":1347358510020,"patch":[[{"diffs":[[1,"var rest = require('restler'),\n    mongodb = require('mongodb'),\n    ObjectID = require('mongodb').ObjectID,\n    gridform = require('gridform'),\n    formidable = require('formidable'),\n    gridstream = require('gridfs-stream'); // https://github.com/aheckmann/gridform\n\nmodule.exports = function(app, collections){\n    \n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////                USER        ////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////   \n\napp.get ('/profile', function(req,res) {\n    var uid = req.session.userid,\n        udata = req.session.userdata || {};\n        \n    console.log ('/profile uid ['+uid+'] : ' + JSON.stringify (udata));\n    collections.groups_collection.find().toArray( function (err, groups) {\n        console.log ('/profile groups : ' + JSON.stringify (groups));\n        //res.render('profile.ejs', { layout: false, locals: {  feedid: whatid, udata: udata } });\n        res.render('profile.hogan', { layout: false, locals: {  me: udata, groups: groups } });\n\t});\n});\n\napp.get('/media/:filename', function (req,res) {\n    var gs = new mongodb.GridStore(collections.db, new ObjectID(req.params.filename), 'r');\n    gs.open(function(err, gs){\n        gs.stream([autoclose=false]).pipe(res);\n    });\n\n});\n\napp.post ('/profile', function(req,res) {\n    \n    /*\n    var options = { db: collections.db };\n    var form = gridform(options);\n    */\n\n    var uid = new ObjectID ();\n\n    var incomingForm = new formidable.IncomingForm();\n\n    // overwrite this method if you are interested in directly accessing the multipart stream\n    incomingForm.onPart = function(part) {\n        \n        console.log ('/profile onPart, partname : ['+part.name+'], part.filename :  ' + part.filename);\n        if (part.filename === undefined) {\n            // let formidable handle all non-file parts\n            return incomingForm.handlePart(part);\n        }\n \n        var form = this;\n        form._flushing++;\n        \n        \n        // open gridFS write Stream\n        var filename = 'profile-pic'+uid;\n        var options = {mode: 'w', content_type: part.mime};\n        if (form.chunk_size) options.chunk_size = this.chunk_size;\n        if (form.root) options.root = this.root;\n        if (form.metadata) options.metadata = this.metadata;\n        console.log ('/profile onPart  open gridFS ['+filename+']  : options : ' + options ); \n        var grid_ws = gridstream(collections.db).createWriteStream(options);\n        \n        form.emit('fileBegin', part.name, grid_ws);\n        \n        /*\n        var gridOnDrain = function() { \n            console.log ('/profile grid_ws.drain : resuming form');\n            form.resume();\n        }\n        grid_ws.on('drain', gridOnDrain);\n        */\n        \n        var partOnData = function(buffer) {\n            console.log ('/profile part.data:   pause form & write to grid');\n            //form.pause();\n            grid_ws.write(buffer);\n        };\n        part.on('data', partOnData);\n        \n        part.once('end', function  () {\n            console.log ('/profile part.end:  got end');\n            part.removeListener('data', partOnData);\n            //grid_ws.removeListener('drain', gridOnDrain);\n            grid_ws.once('drain', function (err) {\n                console.log ('/profile part.end: final grid_ws.drain:  ' + err);\n                if (err) return form.emit('error', err = err);\n\n                form._flushing--;\n                form.emit('file', 'fileid', grid_ws.id);\n                form._maybeEnd();\n              });\n            console.log ('/profile part.end:  end grid_ws');\n            grid_ws.end();\n          });\n    }\n\n    // we disabled the bodyParser for multipart, so using formidable to stream the data to mongo gridFS\n    incomingForm.parse(req, function (err, fields, files) {\n    \n        console.log ('/profile parse fields ' + JSON.stringify(fields));\n        console.log ('/profile parse file [' + err + '] ' + JSON.stringify(files));\n        \n        var user =  {\n            _id: uid,\n            username : fields[\"user[email]\"],\n    \t\tfullname: fields[\"user[name]\"],\n    \t\tpoints: 0,\n    \t\tbelongs_to_primary: fields[\"user[location]\"],\n            desc:  fields[\"user[description]\"],\n            picture_url: '/media/'+files[\"fileid\"],\n            completed_events: {},\n    \t    booked_training: {}\n        };\n    \n        \n        collections.users_collection.insert (user, function(err, docs) {\n            console.log ('/profile parse, saved user, send response redirect');\n            \n            collections.groups_collection.findOne({_id: user.belongs_to_primary}, function(err, item) {\n                user.outlet = item;\n                req.session.userid = user._id;\n        \t\treq.session.userdata = user;  \n                res.redirect('/#home');\n            });\n        })\n    \n    });\n  \n  \n/*   \n    var uid = req.session.username,\n        udata = req.session.userdata;\n        \n    if (!uid) {\n        res.send ('Please Login', 400);\n        return;\n    }\n \n    console.log ('/profile body :: ' + JSON.stringify(req.body));\n    console.log ('/profile body :: ' + JSON.stringify(req.files));\n    \n    var user =  {\n    \tusername : req.body.user.email,\n\t\tfullname: req.body.user.name,\n\t\tpoints: 0,\n\t\tbelongs_to_primary: req.body.user.location,\n        desc: req.body.user.description\n    };\n\n    collections.users_collection.insert (user, function(err, docs) {\n        res.redirect('/');\n    })\n*/\n});\n\n\n\n// LOGIN POST\napp.post('/ajaxlogin', function (req,res) {\n    var uname = req.body.username;\n    console.log ('ajaxlogin: Attempt to login as ' + uname + ', sessionid : ' + req.sessionID);\n    \n    if (uname) {\n        collections.users_collection.findOne({username: uname}, function(err, user) {\n    \t\t\tif (err || !user) {\n    \t\t\t\tres.send({\n    \t\t\t\t\tmessage: 'username not found: ' + uname\n    \t\t\t\t\t});\n    \t\t\t} else {\n\t\t\t\t\t\tconsole.log ('/home - got userdata : ' + JSON.stringify(user));  \n                        collections.groups_collection.findOne({_id: new ObjectID (user.belongs_to_primary)}, function(err, item) {\n                            user.outlet = item;\n    \t\t\t\t\t\t//Properties on req.session are automatically saved on a response\n    \t\t\t\t\t\treq.session.userid = user._id;\n    \t\t\t\t\t\treq.session.userdata = user;  \n    \t\t\t\t\t\tres.send({ \n    \t\t\t\t\t\t\tusername: user._id, \n    \t\t\t\t\t\t\tuserdata: user\n    \t\t\t\t\t\t\t});\n                        });\n\t\t\t\t\t}\n\t\t\t\treturn;\n    \t\n    \t});\n/*\n        queryAPI('query?q='+escape('select Id, Name, PortalPic__c, PortalID__C, Points__c, Account.Name, Account.PortalPic__c, Account.id, (select Id, Name, Attempts__c, Best_Score__c, Passed__c, First_Score__c from Game_Events__r), (select Id, Name, Type__c, Training_Availability__c  from Training_Participation__r) from Contact where PortalID__c = \\'' + uid + '\\''), null, 'GET',  function (results) {\n           console.log ('login: got query results ' + JSON.stringify(results));\n           if (results.totalSize == 1) {\n               var udata = {\n                   id:  results.records[0].Id,\n                   fullname: results.records[0].Name,\n                   points: results.records[0].Points__c, \n                   outlet : {\n                       id: results.records[0].Account.Id,\n                       name: results.records[0].Account.Name,\n                       picture_url: results.records[0].Account.PortalPic__c\n                   },\n                   picture_url: results.records[0].PortalPic__c, \n                   completed_events: {},\n                   booked_training: {}\n                   };\n                   \n                if (results.records[0].Game_Events__r) {\n                    var gameevents =  results.records[0].Game_Events__r.records;\n                    for (var gidx in gameevents) {\n                        udata.completed_events[gameevents[gidx].Name] = {\n                            id:  gameevents[gidx].Id,\n                            attempts: gameevents[gidx].Attempts__c,\n                            passed: gameevents[gidx].Passed__c,\n                            score: gameevents[gidx].First_Score__c,\n                            bestscore: gameevents[gidx].Best_Score__c\n                        };\n                    }\n                }\n                \n                 if (results.records[0].Training_Participation__r) {\n                    var tevents =  results.records[0].Training_Participation__r.records;\n                    for (var gidx in tevents) {\n                        udata.booked_training[tevents[gidx].Training_Availability__c] = {\n                            id:  tevents[gidx].Id,\n                            name:  tevents[gidx].Name,\n                            type: tevents[gidx].Type__c\n                        };\n                    }\n                }\n                \n                console.log ('/home - got userdata : ' + JSON.stringify(udata));    \n                var sess = req.session;\n                //Properties on req.session are automatically saved on a response\n                sess.username = uid;\n                sess.userdata = udata;  \n                sess.completed_events = udata.completed_events;  \n                \n//                sess.start_idx = event_index -1;\n//                createEvents(uid, udata,  null);\n//                createTrainings (uid, udata);\n                \n                res.send({ \n                        username: uid, \n                        userdata: udata\n//                        current_index: sess.start_idx\n                        });\n               \n                return;\n           } else {\n                res.send({message : 'username not found (ensure Contact exists with username in PortalID__c field): ' + uid});\n                return;\n           }\n        });\n*/\n    } else {\n\tres.send({message : 'Please enter username'});\n    }\n});\n\napp.get('/ajaxlogin', function (req,res) {\n    var uid = req.session.userid,\n        udata = req.session.userdata;\n//        start_idx = req.session.start_idx;\n        \n    console.log ('ajaxlogin: checking valid session for ' + uid + ', sessionid : ' + req.sessionID);\n        \n    if (!uid) {\n        // no active session\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} else {\n\t    // got active session\n        req.session = null; // not changing the session\n        \n        res.send({ \n                username: uid, \n                userdata: udata, \n//                current_index: start_idx\n                }); \n    }\n});\n\napp.get('/login-oauth/:provider', function (req, res) {\n    // We have nothing - redirect to the Authorization Server\n    req.session.oauth_state = req.url;\n    var oauthURL = \"https://\" + process.env.SFDC_HOSTNAME + \"/services/oauth2/authorize?response_type=code&\" +\n        \"client_id=\" + process.env.CLIENT_ID + \"&redirect_uri=\" + \"http://localhost:\" + (process.env.PORT || 3001) + \"/token\" + \"&display=touch\";\n    console.log('redirecting: '+oauthURL);\n\tres.redirect(oauthURL);  // Redirect to salesforce.com\n\tres.end();\n});\n\napp.get('/logout', function (req,res) {\n    req.session.destroy();\n    res.redirect('/');\n    \n});\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////                CHAT        ////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////    \n\napp.post ('/post/:what', function (req,res) {\n    console.log ('/post/:what' + req.params.what + ' : ' + req.body.me);\n    var uid = req.session.userid,\n        udata = req.session.userdata,\n        whatid = req.params.what,\n        files = req.files,\n        filename = req.body.fname,\n        filedesc = req.body.fdesc,\n\t\tme = req.body.me;\n        \n\n        \n    if (!uid && !me) {\n\t\tconsole.log ('/post/:what : no uid');\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n    if (whatid == 'me') whatid = udata.outlet.id;\n\t\n\t//  THIS IS A WORKAROUND BEBAUSE PHONGGAP DOESNT SEND COOKIES WITH FileTransfer.upload!! NEED TO FIX\n\tvar fullname = me;\n    if (udata) fullname = udata.fullname;\n\t// END OF WORKAROUND\n    \n    if (files) {\n        \n        console.log('/post got a file' + filename);\n        console.dir(files);\n        \n        var host =  (require('url').parse(foauth.getOAuthResponse().instance_url))['host'];\n\n        rest.post('https://' + host + '/services/data/v24.0/' + 'chatter/feeds/record/'+whatid+'/feed-items', {\n          multipart: true,\n          headers: { \n              'Host': host,\n              'Authorization': 'OAuth '+foauth.getOAuthResponse().access_token,\n            },\n          data: {\n            'text':  fullname + ': '+ req.body.mess,\n            'desc': filedesc,\n            'title': filename,\n            'feedItemFileUpload': rest.file(files.attach.path, files.attach.name, null, 'binary',  files.attach.type)\n          }\n        }).on('complete', function(results) {\n            req.session = null; // method doesnt update the session\n\t\t\tconsole.log ('/post/:what : results : ' + results);\n\t\t\tconsole.log ('/post/:what : results : ' + JSON.stringify(results));\n            res.send (results);\n        });\n        \n    } else {\n\t\tconsole.log('/post no file');\n        var bdy = { \"body\" :   {\"messageSegments\" : [{\"type\": \"Text\", \"text\" : fullname + ': '+ req.body.mess  }] }};\n        queryAPI('chatter/feeds/record/'+whatid+'/feed-items', bdy, 'POST',  function(results) {\n            //console.log ('/post : results : ' + JSON.stringify(results));\n            req.session = null; // method doesnt update the session\n            res.send (results);\n       });\n    }\n});\n\napp.post ('/postcomment', function (req,res) {\n    \n    var uid = req.session.userid,\n         udata = req.session.userdata;\n         \n    if (!uid) {\n    \tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n\n\n    var bdy = { \"body\" :   {\"messageSegments\" : [{\"type\": \"Text\", \"text\" : udata.fullname + ': '+  req.body.mess  }] }};\n    queryAPI('chatter/feed-items/'+ req.body.feeditem +'/comments', bdy, 'POST', function(results) {\n        //console.log ('/postcomment : results : ' + JSON.stringify(results));\n        req.session = null; // method doesnt update the session\n        res.send (results);\n   });\n});\n\napp.get ('/feedfile', function(req,res) {\n    var uid = req.session.userid,\n        what = req.query.what,\n        mt = req.query.mt;\n        \n    if (!uid) {\n//        res.send ('Please Login', 400);\n//        return;\n\t}\n    \n    console.log ('/feedfile ' + what);\n    \n    var host =  (require('url').parse(foauth.getOAuthResponse().instance_url))['host'];\n\tres.header('Content-Type', mt);\n\tres.attachment();\n\t\n\tvar data = null;\n\thttps.get({\n\t\t\tmethod: 'get',\n\t\t\thost: host,\n\t\t\tpath: what,\n\t\t\theaders: {\n\t\t\t  'Authorization': 'OAuth '+foauth.getOAuthResponse().access_token,\n\t\t}}, function(fileres) {\n\t\t\tconsole.log(\"/feedfile : statusCode: \", fileres.statusCode);\n    \n\t\t\tfileres.on('data', function(_data) {\n\t\t\t\tconsole.log ('/feedfile : got some data');\n\t\t\t\tres.write (new Buffer(_data, 'binary'));\n\t\t\t\t\n\t\t\t});\n    \n\t\t\tfileres.on('end', function() {\n\t\t\t\tconsole.log ('/feedfile : end, send the response');\n\t\t\t\tres.end();\n\t\t\t});\n\t\t}).on('error', function(e) {\n\t\t  console.log(e);\n\t\t})\n});\n/*\napp.get ('/chat/:what', function(req,res) {\n    var uid = req.session.username,\n        udata = req.session.userdata,\n        whatid = req.params.what;\n        \n    if (!uid) {\n        res.send ('Please Login', 400);\n    \treturn;\n\t}   \n\n    res.render('chat.ejs', { layout: false, locals: {  feedid: whatid, udata: udata } });\n    //res.render('chat.ejs', { locals: {  feedid: udata.outlet.id, udata: udata } });\n});\n*/\napp.get ('/myfeed/:what', function (req,res) {\n    var uid = req.session.userid,\n        udata = req.session.userdata,\n        whatid = req.params.what;\n        \n    if (!uid) {\n        res.send ('Please Login', 400);\n\t\treturn;\n\t}\n    if (whatid == 'me') {\n    \tconsole.log ('/myfeed : query for primary_group : ' + udata.belongs_to_primary);\n    \tcollections.groups_collection.findOne({_id: new mongodb.ObjectID (udata.belongs_to_primary)}, function(err, group) {\n    \t\t\tconsole.log ('/myfeed : got primary_group_memebers : [' + err + '] : ' + JSON.stringify(group));\n    \t\t\tvar team_data = {};\n    \t\t\tteam_data.outlet  = { name: group.name, pic: group.picture_url};\n    \t\t\tteam_data.outlet_team = {};\n    \t\t\tcollections.users_collection.find({_id: { $in: group.members\t}}).toArray( function (err, users) {\n\n\t\t\t\t\t\tfor (var idx in users) {\n\t\t\t\t\t\t\tvar member =  users[idx];\n\t\t\t\t\t\t\tteam_data.outlet_team[member.fullname] =   { \n\t\t\t\t\t\t\t\tpoints: member.points,\n\t\t\t\t\t\t\t\tpic: member.picture_url\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tcollections.posts_collection.find({parentid: group._id}).toArray( function (err, posts) {\n\t\t\t\t\t\t\treq.session = null; // method doesnt update the session\n\t\t\t\t\t\t\tres.send({team: team_data, feed :posts, me: udata});\n\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t});\n    \t/*\n\t\t\tvar team_data = null,\n\t\t\tfeedres = null,\n\t\t\tsentres = false;\n\t\t\t\n\t\t\tvar sendresponse = function () {\n\t\t\t\tif (feedres && team_data && sentres==false) {\n\t\t\t\t\treq.session = null; // method doesnt update the session\n\t\t\t\t\tsentres = true;\n\t\t\t\t\tres.send({team: team_data, feed :feedres, me: udata});\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// get user names and pictures and outlets too!\n\t\t\tqueryAPI('query?q='+escape('select Name, PortalPic__c,  (select Name, Points__c, PortalPic__c from Contacts) from Account where Id = \\'' + udata.outlet.id + '\\''), null, 'GET',  function (results) {\n\t\t\t\tconsole.log ('myfeed: got team query results :' + JSON.stringify(results));\n\t\t\t\tteam_data = {};\n\t\t\t\tif (results.totalSize == 1) {\n\t\t\t\t\tteam_data.outlet  = { name: results.records[0].Name, pic: results.records[0].PortalPic__c};\n\t\t\t\t\tteam_data.outlet_team = {};\n\t\t\t\t\t\n\t\t\t\t\tif (results.records[0].Contacts) {\n\t\t\t\t\t\tvar team =  results.records[0].Contacts.records;\n\t\t\t\t\t\tfor (var m in team) {\n\t\t\t\t\t\t\tteam_data.outlet_team[team[m].Name] =   { \n\t\t\t\t\t\t\t\tpoints: team[m].Points__c,\n\t\t\t\t\t\t\t\tpic: team[m].PortalPic__c\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsendresponse();\n\t\t\t});\n\t\t\tqueryAPI('chatter/feeds/record/'+udata.outlet.id+'/feed-items', null, 'GET', function (results) {\n\t\t\t\tfeedres = results;\n\t\t\t\tsendresponse();\n\t\t\t});\n\t\t\t*/\n    } else {\n        // its a training id\n        // get user names and pictures and outlets too!\n         queryAPI('query?q='+escape('select Name, (select Contact__r.Name, Contact__r.Points__c, Contact__r.PortalPic__c from Training_Participation__r) from TR_Training_Availability__c where Id = \\'' + whatid + '\\''), null, 'GET',  function (results) {\n               console.log ('myfeed: got team query results :' + JSON.stringify(results));\n               var team_data = {};\n               if (results.totalSize == 1) {\n                    team_data.outlet  = { name: results.records[0].Name, pic: 'none'};\n                    team_data.outlet_team = {};\n                    \n                    if (results.records[0].Training_Participation__r) {\n                        var team =  results.records[0].Training_Participation__r.records;\n                        for (var m in team) {\n                             team_data.outlet_team[team[m].Contact__r.Name] =   { \n                                    points: team[m].Contact__r.Points__c,\n                                    pic: team[m].Contact__r.PortalPic__c \n                            };\n                        }\n                    }\n               }\n             queryAPI('chatter/feeds/record/'+whatid+'/feed-items', null, 'GET', function (results1) {\n                //console.log ('/myfeed : results : ' + JSON.stringify(results));\n                req.session = null; // method doesnt update the session\n                res.send({team: team_data, feed :results1, me: udata});\n            });\n        });        \n    }\n   \n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////                EVENTS        //////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////////////////// \n\nvar PASS_SCORE = 100;\napp.post('/donequiz', function (req,res) {\n    var uid = req.session.userid,\n        sid = req.sessionID,\n        udata = req.session.userdata;\n    if (!uid) {\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n\n\t\n\tvar qid = req.body.id,\n\t\t\tscore = req.body.score,\n\t\t\tquesTried = req.body.quesTried,\n\t\t\tnow_passed = (req.body.quesTried>0 && req.body.score>=PASS_SCORE),\n\t\t\taready_passed = false;\n\t\t\t\n\tconsole.log ('donequiz: complted quiz:' + uid + ', quiz : ' + qid + ', score ' + score + ', quesTried : ' + quesTried + ', now_passed : ' + now_passed);\n\t// need to of least tryed one question to register quiz attempt!\n\tif ( quesTried > 0) {\n\t\t\n        collections.events_collection.findOne({_id: qid}, function(err, record) {\n    \t\tvar alreadydone = udata.completed_events;\n    \t\tvar points_award = 0;\n\n    \t\tif (!alreadydone[qid]) { // first atemmpt\n    \t\t\talreadydone[qid] = { id: \"\", passed: now_passed, score: score, attempts: 1, bestscore: score};\n    \t\t\tpoints_award = score * record.points/100;\n    \t\t\t\n    \t\t\tudata.points = udata.points + points_award;\n    \t\t\tconsole.log ('points: adding ' + points_award + ', total now : ' + udata.points);\n    \t\t} else { // NOT first attempt\n                console.log ('donequiz: not first attempt for : ' + qid);\n    \t\t\taready_passed = alreadydone[qid].passed;\n    \t\t\talreadydone[qid].attempts = alreadydone[qid].attempts + 1;\n    \t\t\talreadydone[qid].bestscore = Math.max(alreadydone[qid].bestscore, score);\n    \t\t\tif (!aready_passed) alreadydone[qid].passed = now_passed;\n    \t\t}\n\n    \t\tconsole.log ('donequiz: create results event ' + JSON.stringify(alreadydone[qid]));\n    \t\t// create event to register new results of quiz\n            \n            \n            /* update mongo */\n            var updatesJson = {};\n            updatesJson[\"completed_events.\"+qid] = alreadydone[qid];\n            collections.users_collection.update ({username: uid}, { $set: updatesJson }, {safe:true}, function(err) {\n                        if (err) { \n                            console.warn(err.message);\n                        } else {\n                            console.log('successfully updated'); \n             \n                        \tvar event = {\n                    \t\t\titem_id: qid,\n                    \t\t\titem_type: \"QUIZ\",\n                    \t\t\tresults_data: alreadydone[qid]\n                    \t\t};\n                    \t\t//if (!events_by_user[uid]) events_by_user[uid] = [];\t\n                    \t\t//events_by_user[uid].push(event);\n                            \n                            sendEventsToSession([event], sid);\n                            \n                            req.session.userdata = udata;  // update the session store with the new values.\n                            console.log ('/donequiz - udata.completed_events : ' + JSON.stringify(req.session.userdata));\n                            res.send({points: udata.points});\n                            \n                \n                            if ((!aready_passed) && now_passed) {\n                        \t\t// just passwd new quiz, hunt for new unlocks!!\n                    \t\t\tcreateEvents (uid, udata, qid, sid);\n                    \t\t}\n                        }\n                    });\n                        \n            \n            /*\n            // send update to salesforce\n            var bdy = { Name: qid, Attempts__c: alreadydone[qid].attempts, Passed__c:  alreadydone[qid].passed, First_Score__c: alreadydone[qid].score, Best_Score__c: alreadydone[qid].bestscore};\n            var sfdc_url = 'sobjects/Game_Event__c/' + alreadydone[qid].id;\n            var httpmethod = 'PATCH'; // its an update\n            if (alreadydone[qid].id.length == 0) {\n                // its a insert, set the m/d file\n                bdy.Contact__c = udata.id;\n                bdy.Points__c = points_award;\n                httpmethod = 'POST';\n            }\n            console.log ('/donequiz - ' + sfdc_url + ' : ' + JSON.stringify(bdy));\n            \n            queryAPI(sfdc_url, bdy, httpmethod, function(response) {\n                if (response) {\n                    console.log ('/donequiz -  response : ' +  JSON.stringify(response));\n                    console.log ('/donequiz setting id ' + qid + ' : ' + response.id);\n                    alreadydone[qid].id = response.id;\n                }\n    \n                \n        \t\tvar event = {\n    //    \t\t\tindex: event_index++,\n    //    \t\t\ttimestamp: new Date().getTime(),\n    //    \t\t\tactive: true,\n        \t\t\titem_id: qid,\n        \t\t\titem_type: \"QUIZ\",\n        \t\t\tresults_data: alreadydone[qid]\n        \t\t};\n        \t\t//if (!events_by_user[uid]) events_by_user[uid] = [];\t\n        \t\t//events_by_user[uid].push(event);\n                \n                sendEventsToSession([event], sid);\n                \n                req.session.userdata = udata;  // update the session store with the new values.\n                console.log ('/donequiz - udata.completed_events : ' + JSON.stringify(req.session.userdata));\n                res.send({points: udata.points});\n                \n    \n                if ((!aready_passed) && now_passed) {\n            \t\t// just passwd new quiz, hunt for new unlocks!!\n        \t\t\tcreateEvents (uid, udata, qid, sid);\n        \t\t}\n        \t\t//notify_long_connection_by_user(uid, udata);\n            });\n            */\n        });\n\t} else {\n\t\n    \t// update points in response\n        req.session = null;\n    \tres.send({points: udata.points});\n\t}\n});\n\n\n\napp.post('/booktraining', function (req,res) {\n    var uid = req.session.username,\n        sid = req.sessionID,\n        udata = req.session.userdata;\n    if (!uid) {\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n\n\tvar tid = req.body.tid,\n\t\ttdate = req.body.tdate;\n\n\tconsole.log ('booktraining() complted quiz:' + tid + ', data : ' + tdate);\n\t// need to of least tryed one question to register quiz attempt!\n\n\t\t\n\t\tvar alreadybooked = udata.booked_training;\n        if (!alreadybooked[tid]) { // first atemmpt\n            console.log ('booktraining() first atemmpt');\n    \t\talreadybooked[tid] = { id: \"\",   type: 'Booked on ' + tdate};\n        } else {\n            // just update date\n            console.log ('booktraining() just update date');\n            alreadybooked[tid] = { id: alreadybooked[tid].id, type: 're-Booked on ' + tdate };\n        }\n        \n        // send update to salesforce\n        var bdy = { Type__c:  alreadybooked[tid].type};\n        var sfdc_url = 'sobjects/TR_Training_Participation__c/' + alreadybooked[tid].id;\n        var httpmethod = 'PATCH'; // its an update\n        if (alreadybooked[tid].id.length == 0) {\n            // its a insert, set the m/d file\n            bdy.Contact__c = udata.id;\n            bdy.Training_Availability__c = tid;\n            httpmethod = 'POST';\n        }\n        console.log ('booktraining() ' + sfdc_url + ' : ' + JSON.stringify(bdy));\n        \n        queryAPI(sfdc_url, bdy, httpmethod, function(response) {\n            if (response) {\n                console.log ('/booktraining -  response : ' +  JSON.stringify(response));\n                console.log ('/booktraining setting id ' + tid + ' : ' + response.id);\n                alreadybooked[tid].id = response.id;\n            }\n\n            \n    \t\tvar event = {\n//    \t\t\tindex: event_index++,\n//    \t\t\ttimestamp: new Date().getTime(),\n//    \t\t\tactive: true,\n    \t\t\titem_id: tid,\n    \t\t\titem_type: \"TRAINING\",\n    \t\t\tresults_data: alreadybooked[tid]\n    \t\t};\n    \t\t//if (!events_by_user[uid]) events_by_user[uid] = [];\t\n    \t\t//events_by_user[uid].push(event);\n            sendEventsToSession([event], sid);\n            \n            \n            req.session.userdata = udata;  // update the session store with the new values.\n            console.log ('/booktraining - udata.completed_events : ' + JSON.stringify(req.session.userdata));\n            res.send({points: udata.points});\n            \n\n    \t\t//notify_long_connection_by_user(uid, udata);\n        });\n\n});\n\n// If we have a LongPoll request, respond with the events. otherwise add it to the 'temp_events_pending_longpoll' array!\n//var temp_events_pending_longpoll = {};\n/*\nfunction sendEventsToSession (events, sid) {\n\tconsole.log ('sendEventsToSession()');\n\tvar req_info = long_connections_by_session[sid];\n\tif (!req_info || req_info.completed) {\n\t\tconsole.log ('sendEventsToSession() no outstanding longpolling requests for ' + sid + ', store events for pending longpoll');\n\t\tif (!temp_events_pending_longpoll[sid])    \n\t\t\ttemp_events_pending_longpoll[sid] = events;\n\t\telse\n\t\t\ttemp_events_pending_longpoll[sid].push.apply(temp_events_pending_longpoll[sid], events);\n\t} else {\n\t\tconsole.log ('sendEventsToSession() got active connection for user ' + sid + ', sending events');\n\n\t\tclearTimeout(req_info.timeoutid);\n\t\treq_info.completed = true;\n\t\treq_info.request.resume();\n\t\t//event.my_points = udata.points;\n\t\treq_info.request.session = null; // method doesnt update the session\n\t\treq_info.response.send (JSON.stringify(events));\n\t}\n}\n*/\n\n\n\nvar connectionTimeout = 25; // always send a empty '200' reponse to each open request after 60seconds.\napp.get('/longpoll/:lasteventprocessed', function (req, res) {\n    var uid = req.session.userid,\n        udata = req.session.userdata,\n        sid = req.sessionID,\n        lasteventprocessed = req.params.lasteventprocessed;\n        \n    if (!uid) {\n    \tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n    \n    if (lasteventprocessed == 0) {\n        collections.long_connections_by_session[sid] = null;\n        //temp_events_pending_longpoll[sid] = null;\n       createEvents(uid, udata,  null, req.sessionID);\n//       createTrainings (uid, udata, req.sessionID);\n    }\n    \n\tconsole.log ('longpoll() got request from ' + uid + ' last eventprocessed from url : ' + lasteventprocessed);\n\t// check the required parameters\n\n    \n\t//var event = nextEvent(uid, lasteventprocessed);\n    //var events = temp_events_pending_longpoll[sid];\n\t//if (!events) {\n\n    collections.session_events_collection.findAndModify (\n        {_id: sid},\n        [],\n    \t{$unset :{ 'events' : 1}},\n    \t{new: false, upsert: false },\n    \tfunction(err, data) {\n            if (err || !data || !data.events) {\n                console.log ('longpoll() :: no event data ('  + err + ')  : ' + JSON.stringify(data));\n            \tconsole.log ('longpoll() pause request, no event to send ' + lasteventprocessed);\n        \n        \t\tvar req_info = { request: req, response: res, lasteventprocessed: lasteventprocessed, completed: false};\n        \t\treq_info.timeoutid = setTimeout( function () { \n        \t\t\tconsole.log ('longpoll() saved req_info,  timeout pulse');\n        \t\t\treq_info.request.resume();\n        \t\t\treq_info.response.send({item_type: \"PULSE\"});\n        \t\t\treq_info.completed = true;\n        \t\t\t }, connectionTimeout * 1000); \n        \n        \t\t//if (!long_connections_by_session[sid])\n        \t\t//\tlong_connections_by_session[sid] = [];  \n        \t\tcollections.long_connections_by_session[sid] = req_info;\n        \t\treq.pause();\n        \t\tconsole.log ('longpoll() stored and paused request');\n        \n            } else {\n        \t\tconsole.log ('longpoll() send the stored event data : ' + JSON.stringify(data));\n                res.send(JSON.stringify(data.events));\n            }\n    \t});\n/*\n\t} else {\n\t\tconsole.log ('longpoll() got event to send to user');\n\t\t//event.my_points =udata.points;\n\t\t//setTimeout (function() {  // ADD A 1 SECOND DELAY - JUST FOR EFFECT!!!\n\t\tres.send(JSON.stringify(events));\n\t\tconsole.log ('longpoll sent :' + JSON.stringify(events));\n        temp_events_pending_longpoll[sid] = null;\n\t\t//}, 1000);\n\t}\n*/\n\n});\n\napp.get ('/stream/:filename', function (req,res) {\n\tvar fn = __dirname+'/public/media/' +req.params.filename;\n\tconsole.log ('stream: filename ' + fn);\n\tres.sendfile (fn);\n});\n\n\n\n\nfunction createEvents(uid, udata, just_completed, sid) {\n    console.log ('createEvents() ' + uid + ', just_completed (set if just want delta): ' + just_completed);\n\t\n    // TODO...\n    var cursor = collections.events_collection.find ({});\n    cursor.toArray( function (err, item) {\n        console.log ('createEvents() query events item (' + err + ') : ' + JSON.stringify (item)); \n        var ret_events = [];\n        for (var idx in item) {\n\n            var i = item[idx]._id;\n    \t\tvar e = item[idx];\n    \t\tconsole.log ('createEvents : checking item : ' + i + '  :: ' + JSON.stringify (e));\n    \t\t\n    \t\tvar event = null, \n    \t\t\tresults_data = null,\n    \t\t\tselected = true, \n    \t\t\tnewlyselected = false;\n    \t\t\t\t\n    \t\tfor (var needtocomplete in e.forwho.completed) {\n    \t\t\tconsole.log ('createEvents: checking prereq for event, required : ' + needtocomplete + ', is it in ' + JSON.stringify(udata.completed_events) );\n    \t\t\tif (just_completed == needtocomplete ) {\n    \t\t\t\tnewlyselected = true;\n    \t\t\t}\n    \t\t\tvar hascompleted = udata.completed_events[needtocomplete];\n    \t\t\tif ((!hascompleted) || hascompleted.passed == false) {\n    \t\t\t//if (! (needtocomplete in users_collection[user].completed_events)) {\n    \t\t\t\tselected = false; break;\n    \t\t\t}\n    \t\t}\n    \t\tif (((!selected) || (just_completed != null && newlyselected == false))) {\n                console.log ('not selected');\n    \t\t} else {\n                // 100 points for just getting a new event\n        \t    //udata.points = udata.points + 50;\n        \t\t//console.log ('createEvents: points: adding ' + '50' + ', total now : ' + udata.points);\n        \n        \t\tvar event = {\n            //\t\t\tindex: event_index++,\n            //\t\t\ttimestamp: new Date().getTime(),\n            //\t\t\tactive: true,\n            \t\t\titem_id: i,\n            \t\t\titem_type: e.type,\n            \t\t\titem_data: e,\n            \t\t\tresults_data: udata.completed_events[i]\n        \t\t    };\n        \t\t//if (!events_by_user[uid])\tevents_by_user[uid] = [];\t\n        \t\t//events_by_user[uid].push(event);\n        \t\tconsole.log('createEvents: ADDED EVENT  [' + event.item_id +'], event_data ' + JSON.stringify(event.item_data) + ', results_data ' + JSON.stringify(event.results_data)  + ', newlyselected : '+ newlyselected);\n                ret_events.push (event);\n    \t\t}\n        }\n        sendEventsToSession(ret_events, sid);\n    });\n}\n\nfunction createTrainings (uid, udata, sid) {\n    console.log ('createTrainings :' + uid);\n     queryAPI('query?q='+escape('select Id, Name, Description__c, Start_date__c, Total_Participations__c, TR_Training__r.Content_Reference__c  , Training_Categories__c  from TR_Training_Availability__c where Account__c = \\'' + udata.outlet.id + '\\''), null, 'GET',  function (results) {\n           console.log ('createTrainings: got  query results :' + JSON.stringify(results));\n            if (results.totalSize >= 1) {\n                var ret_events = [];\n                for (var m in results.records) {\n                    var trec = results.records[m];\n                    \n                    var event = {\n    //                \t\tindex: event_index++,\n    //            \t\t\ttimestamp: new Date().getTime(),\n    //            \t\t\tactive: true,\n                \t\t\titem_id: trec.Id,\n                \t\t\titem_type: 'TRAINING',\n                \t\t\titem_data: {\n                                name: trec.Name,\n                        \t\tdesc: trec.Description__c,\n                    \t\t\tinfo: trec.Total_Participations__c\n                                },\n            \t\t\t    results_data: udata.booked_training[trec.Id]\n            \t\t    };\n//                    if (!events_by_user[uid])    events_by_user[uid] = [];\t\n//            \t\tevents_by_user[uid].push(event);\n                    console.log('createTrainings: ADDED EVENT [' + JSON.stringify(event));\n                    ret_events.push(event);\n                    \n                }\n//              notify_long_connection_by_user(uid, udata);\n                sendEventsToSession(ret_events, sid);\n           }\n     });\n}\n\n\n\nfunction sendEventsToSession (events, sid) {\n\tconsole.log ('sendEventsToSession() [' + sid + '] : '+ events.length);\n    var req_info = collections.long_connections_by_session[sid];\n    if (!req_info || req_info.completed) { \n        console.log ('sendEventsToSession() : save events to database & message all dynos to see if they have a longpoll for that session');\n\t    collections.session_events_collection.update ({_id: sid}, {$pushAll :{'events' :  events}}, {upsert: true}, function(err, data) {\n\t\t\tconsole.log ('sendEventsToSession, created event data on session : [' + err + '] : ' + data);\n\t\t\tcollections.longpoll_exchange.publish ('#', {type: 'NEW_EVENT_DATA', sessionid: sid}, { contentType: 'application/json'});\n    \t});\n    } else {\n        clearTimeout(req_info.timeoutid);\n    \treq_info.completed = true;\n    \treq_info.request.resume();\n    \t//event.my_points = udata.points;\n    \treq_info.request.session = null; // method doesnt update the session\n\t\treq_info.response.send (JSON.stringify(events));\n    }\n}\n\n\n\n\n\n}"]],"start1":0,"start2":0,"length1":0,"length2":37194}]],"length":37194,"saved":false}
{"contributors":[],"silentsave":false,"ts":1347358644757,"patch":[[{"diffs":[[1,"var rest = require('restler'),\n    mongodb = require('mongodb'),\n    ObjectID = require('mongodb').ObjectID,\n    gridform = require('gridform'),\n    formidable = require('formidable'),\n    gridstream = require('gridfs-stream'); // https://github.com/aheckmann/gridform\n\nmodule.exports = function(app, collections){\n    \n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////                USER        ////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////   \n\napp.get ('/profile', function(req,res) {\n    var uid = req.session.userid,\n        udata = req.session.userdata || {};\n        \n    console.log ('/profile uid ['+uid+'] : ' + JSON.stringify (udata));\n    collections.groups_collection.find().toArray( function (err, groups) {\n        console.log ('/profile groups : ' + JSON.stringify (groups));\n        //res.render('profile.ejs', { layout: false, locals: {  feedid: whatid, udata: udata } });\n        res.render('profile.hogan', { layout: false, locals: {  me: udata, groups: groups } });\n\t});\n});\n\napp.get('/media/:filename', function (req,res) {\n    var gs = new mongodb.GridStore(collections.db, new ObjectID(req.params.filename), 'r');\n    gs.open(function(err, gs){\n        gs.stream([autoclose=false]).pipe(res);\n    });\n\n});\n\napp.post ('/profile', function(req,res) {\n    \n    /*\n    var options = { db: collections.db };\n    var form = gridform(options);\n    */\n\n    var uid = new ObjectID ();\n\n    var incomingForm = new formidable.IncomingForm();\n\n    // overwrite this method if you are interested in directly accessing the multipart stream\n    incomingForm.onPart = function(part) {\n        \n        console.log ('/profile onPart, partname : ['+part.name+'], part.filename :  ' + part.filename);\n        if (part.filename === undefined) {\n            // let formidable handle all non-file parts\n            return incomingForm.handlePart(part);\n        }\n \n        var form = this;\n        form._flushing++;\n        \n        \n        // open gridFS write Stream\n        var filename = 'profile-pic'+uid;\n        var options = {mode: 'w', content_type: part.mime};\n        if (form.chunk_size) options.chunk_size = this.chunk_size;\n        if (form.root) options.root = this.root;\n        if (form.metadata) options.metadata = this.metadata;\n        console.log ('/profile onPart  open gridFS ['+filename+']  : options : ' + options ); \n        var grid_ws = gridstream(collections.db).createWriteStream(options);\n        \n        form.emit('fileBegin', part.name, grid_ws);\n        \n        /*\n        var gridOnDrain = function() { \n            console.log ('/profile grid_ws.drain : resuming form');\n            form.resume();\n        }\n        grid_ws.on('drain', gridOnDrain);\n        */\n        \n        var partOnData = function(buffer) {\n            console.log ('/profile part.data:   pause form & write to grid');\n            //form.pause();\n            grid_ws.write(buffer);\n        };\n        part.on('data', partOnData);\n        \n        part.once('end', function  () {\n            console.log ('/profile part.end:  got end');\n            part.removeListener('data', partOnData);\n            //grid_ws.removeListener('drain', gridOnDrain);\n            grid_ws.once('drain', function (err) {\n                console.log ('/profile part.end: final grid_ws.drain:  ' + err);\n                if (err) return form.emit('error', err = err);\n\n                form._flushing--;\n                form.emit('file', 'fileid', grid_ws.id);\n                form._maybeEnd();\n              });\n            console.log ('/profile part.end:  end grid_ws');\n            grid_ws.end();\n          });\n    }\n\n    // we disabled the bodyParser for multipart, so using formidable to stream the data to mongo gridFS\n    incomingForm.parse(req, function (err, fields, files) {\n    \n        console.log ('/profile parse fields ' + JSON.stringify(fields));\n        console.log ('/profile parse file [' + err + '] ' + JSON.stringify(files));\n        \n        var user =  {\n            _id: uid,\n            username : fields[\"user[email]\"],\n    \t\tfullname: fields[\"user[name]\"],\n    \t\tpoints: 0,\n    \t\tbelongs_to_primary: fields[\"user[location]\"],\n            desc:  fields[\"user[description]\"],\n            picture_url: '/media/'+files[\"fileid\"],\n            completed_events: {},\n    \t    booked_training: {}\n        };\n    \n        \n        collections.users_collection.insert (user, function(err, docs) {\n            console.log ('/profile parse, saved user, send response redirect');\n            \n            collections.groups_collection.findOne({_id: user.belongs_to_primary}, function(err, item) {\n                user.outlet = item;\n                req.session.userid = user._id;\n        \t\treq.session.userdata = user;  \n                res.redirect('/#home');\n            });\n        })\n    \n    });\n  \n  \n/*   \n    var uid = req.session.username,\n        udata = req.session.userdata;\n        \n    if (!uid) {\n        res.send ('Please Login', 400);\n        return;\n    }\n \n    console.log ('/profile body :: ' + JSON.stringify(req.body));\n    console.log ('/profile body :: ' + JSON.stringify(req.files));\n    \n    var user =  {\n    \tusername : req.body.user.email,\n\t\tfullname: req.body.user.name,\n\t\tpoints: 0,\n\t\tbelongs_to_primary: req.body.user.location,\n        desc: req.body.user.description\n    };\n\n    collections.users_collection.insert (user, function(err, docs) {\n        res.redirect('/');\n    })\n*/\n});\n\n\n\n// LOGIN POST\napp.post('/ajaxlogin', function (req,res) {\n    var uname = req.body.username;\n    console.log ('ajaxlogin: Attempt to login as ' + uname + ', sessionid : ' + req.sessionID);\n    \n    if (uname) {\n        collections.users_collection.findOne({username: uname}, function(err, user) {\n    \t\t\tif (err || !user) {\n    \t\t\t\tres.send({\n    \t\t\t\t\tmessage: 'username not found: ' + uname\n    \t\t\t\t\t});\n    \t\t\t} else {\n\t\t\t\t\t\tconsole.log ('/home - got userdata : ' + JSON.stringify(user));  \n                        collections.groups_collection.findOne({_id: new ObjectID (user.belongs_to_primary)}, function(err, item) {\n                            user.outlet = item;\n    \t\t\t\t\t\t//Properties on req.session are automatically saved on a response\n    \t\t\t\t\t\treq.session.userid = user._id;\n    \t\t\t\t\t\treq.session.userdata = user;  \n    \t\t\t\t\t\tres.send({ \n    \t\t\t\t\t\t\tusername: user._id, \n    \t\t\t\t\t\t\tuserdata: user\n    \t\t\t\t\t\t\t});\n                        });\n\t\t\t\t\t}\n\t\t\t\treturn;\n    \t\n    \t});\n/*\n        queryAPI('query?q='+escape('select Id, Name, PortalPic__c, PortalID__C, Points__c, Account.Name, Account.PortalPic__c, Account.id, (select Id, Name, Attempts__c, Best_Score__c, Passed__c, First_Score__c from Game_Events__r), (select Id, Name, Type__c, Training_Availability__c  from Training_Participation__r) from Contact where PortalID__c = \\'' + uid + '\\''), null, 'GET',  function (results) {\n           console.log ('login: got query results ' + JSON.stringify(results));\n           if (results.totalSize == 1) {\n               var udata = {\n                   id:  results.records[0].Id,\n                   fullname: results.records[0].Name,\n                   points: results.records[0].Points__c, \n                   outlet : {\n                       id: results.records[0].Account.Id,\n                       name: results.records[0].Account.Name,\n                       picture_url: results.records[0].Account.PortalPic__c\n                   },\n                   picture_url: results.records[0].PortalPic__c, \n                   completed_events: {},\n                   booked_training: {}\n                   };\n                   \n                if (results.records[0].Game_Events__r) {\n                    var gameevents =  results.records[0].Game_Events__r.records;\n                    for (var gidx in gameevents) {\n                        udata.completed_events[gameevents[gidx].Name] = {\n                            id:  gameevents[gidx].Id,\n                            attempts: gameevents[gidx].Attempts__c,\n                            passed: gameevents[gidx].Passed__c,\n                            score: gameevents[gidx].First_Score__c,\n                            bestscore: gameevents[gidx].Best_Score__c\n                        };\n                    }\n                }\n                \n                 if (results.records[0].Training_Participation__r) {\n                    var tevents =  results.records[0].Training_Participation__r.records;\n                    for (var gidx in tevents) {\n                        udata.booked_training[tevents[gidx].Training_Availability__c] = {\n                            id:  tevents[gidx].Id,\n                            name:  tevents[gidx].Name,\n                            type: tevents[gidx].Type__c\n                        };\n                    }\n                }\n                \n                console.log ('/home - got userdata : ' + JSON.stringify(udata));    \n                var sess = req.session;\n                //Properties on req.session are automatically saved on a response\n                sess.username = uid;\n                sess.userdata = udata;  \n                sess.completed_events = udata.completed_events;  \n                \n//                sess.start_idx = event_index -1;\n//                createEvents(uid, udata,  null);\n//                createTrainings (uid, udata);\n                \n                res.send({ \n                        username: uid, \n                        userdata: udata\n//                        current_index: sess.start_idx\n                        });\n               \n                return;\n           } else {\n                res.send({message : 'username not found (ensure Contact exists with username in PortalID__c field): ' + uid});\n                return;\n           }\n        });\n*/\n    } else {\n\tres.send({message : 'Please enter username'});\n    }\n});\n\napp.get('/ajaxlogin', function (req,res) {\n    var uid = req.session.userid,\n        udata = req.session.userdata;\n//        start_idx = req.session.start_idx;\n        \n    console.log ('ajaxlogin: checking valid session for ' + uid + ', sessionid : ' + req.sessionID);\n        \n    if (!uid) {\n        // no active session\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} else {\n\t    // got active session\n        req.session = null; // not changing the session\n        \n        res.send({ \n                username: uid, \n                userdata: udata, \n//                current_index: start_idx\n                }); \n    }\n});\n\napp.get('/login-oauth/:provider', function (req, res) {\n    // We have nothing - redirect to the Authorization Server\n    req.session.oauth_state = req.url;\n    var oauthURL = \"https://\" + process.env.SFDC_HOSTNAME + \"/services/oauth2/authorize?response_type=code&\" +\n        \"client_id=\" + process.env.CLIENT_ID + \"&redirect_uri=\" + \"http://localhost:\" + (process.env.PORT || 3001) + \"/auth-callback\" + \"&display=touch\";\n    console.log('redirecting: '+oauthURL);\n\tres.redirect(oauthURL);  // Redirect to salesforce.com\n\tres.end();\n});\n\napp.get('/logout', function (req,res) {\n    req.session.destroy();\n    res.redirect('/');\n    \n});\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////                CHAT        ////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////    \n\napp.post ('/post/:what', function (req,res) {\n    console.log ('/post/:what' + req.params.what + ' : ' + req.body.me);\n    var uid = req.session.userid,\n        udata = req.session.userdata,\n        whatid = req.params.what,\n        files = req.files,\n        filename = req.body.fname,\n        filedesc = req.body.fdesc,\n\t\tme = req.body.me;\n        \n\n        \n    if (!uid && !me) {\n\t\tconsole.log ('/post/:what : no uid');\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n    if (whatid == 'me') whatid = udata.outlet.id;\n\t\n\t//  THIS IS A WORKAROUND BEBAUSE PHONGGAP DOESNT SEND COOKIES WITH FileTransfer.upload!! NEED TO FIX\n\tvar fullname = me;\n    if (udata) fullname = udata.fullname;\n\t// END OF WORKAROUND\n    \n    if (files) {\n        \n        console.log('/post got a file' + filename);\n        console.dir(files);\n        \n        var host =  (require('url').parse(foauth.getOAuthResponse().instance_url))['host'];\n\n        rest.post('https://' + host + '/services/data/v24.0/' + 'chatter/feeds/record/'+whatid+'/feed-items', {\n          multipart: true,\n          headers: { \n              'Host': host,\n              'Authorization': 'OAuth '+foauth.getOAuthResponse().access_token,\n            },\n          data: {\n            'text':  fullname + ': '+ req.body.mess,\n            'desc': filedesc,\n            'title': filename,\n            'feedItemFileUpload': rest.file(files.attach.path, files.attach.name, null, 'binary',  files.attach.type)\n          }\n        }).on('complete', function(results) {\n            req.session = null; // method doesnt update the session\n\t\t\tconsole.log ('/post/:what : results : ' + results);\n\t\t\tconsole.log ('/post/:what : results : ' + JSON.stringify(results));\n            res.send (results);\n        });\n        \n    } else {\n\t\tconsole.log('/post no file');\n        var bdy = { \"body\" :   {\"messageSegments\" : [{\"type\": \"Text\", \"text\" : fullname + ': '+ req.body.mess  }] }};\n        queryAPI('chatter/feeds/record/'+whatid+'/feed-items', bdy, 'POST',  function(results) {\n            //console.log ('/post : results : ' + JSON.stringify(results));\n            req.session = null; // method doesnt update the session\n            res.send (results);\n       });\n    }\n});\n\napp.post ('/postcomment', function (req,res) {\n    \n    var uid = req.session.userid,\n         udata = req.session.userdata;\n         \n    if (!uid) {\n    \tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n\n\n    var bdy = { \"body\" :   {\"messageSegments\" : [{\"type\": \"Text\", \"text\" : udata.fullname + ': '+  req.body.mess  }] }};\n    queryAPI('chatter/feed-items/'+ req.body.feeditem +'/comments', bdy, 'POST', function(results) {\n        //console.log ('/postcomment : results : ' + JSON.stringify(results));\n        req.session = null; // method doesnt update the session\n        res.send (results);\n   });\n});\n\napp.get ('/feedfile', function(req,res) {\n    var uid = req.session.userid,\n        what = req.query.what,\n        mt = req.query.mt;\n        \n    if (!uid) {\n//        res.send ('Please Login', 400);\n//        return;\n\t}\n    \n    console.log ('/feedfile ' + what);\n    \n    var host =  (require('url').parse(foauth.getOAuthResponse().instance_url))['host'];\n\tres.header('Content-Type', mt);\n\tres.attachment();\n\t\n\tvar data = null;\n\thttps.get({\n\t\t\tmethod: 'get',\n\t\t\thost: host,\n\t\t\tpath: what,\n\t\t\theaders: {\n\t\t\t  'Authorization': 'OAuth '+foauth.getOAuthResponse().access_token,\n\t\t}}, function(fileres) {\n\t\t\tconsole.log(\"/feedfile : statusCode: \", fileres.statusCode);\n    \n\t\t\tfileres.on('data', function(_data) {\n\t\t\t\tconsole.log ('/feedfile : got some data');\n\t\t\t\tres.write (new Buffer(_data, 'binary'));\n\t\t\t\t\n\t\t\t});\n    \n\t\t\tfileres.on('end', function() {\n\t\t\t\tconsole.log ('/feedfile : end, send the response');\n\t\t\t\tres.end();\n\t\t\t});\n\t\t}).on('error', function(e) {\n\t\t  console.log(e);\n\t\t})\n});\n/*\napp.get ('/chat/:what', function(req,res) {\n    var uid = req.session.username,\n        udata = req.session.userdata,\n        whatid = req.params.what;\n        \n    if (!uid) {\n        res.send ('Please Login', 400);\n    \treturn;\n\t}   \n\n    res.render('chat.ejs', { layout: false, locals: {  feedid: whatid, udata: udata } });\n    //res.render('chat.ejs', { locals: {  feedid: udata.outlet.id, udata: udata } });\n});\n*/\napp.get ('/myfeed/:what', function (req,res) {\n    var uid = req.session.userid,\n        udata = req.session.userdata,\n        whatid = req.params.what;\n        \n    if (!uid) {\n        res.send ('Please Login', 400);\n\t\treturn;\n\t}\n    if (whatid == 'me') {\n    \tconsole.log ('/myfeed : query for primary_group : ' + udata.belongs_to_primary);\n    \tcollections.groups_collection.findOne({_id: new mongodb.ObjectID (udata.belongs_to_primary)}, function(err, group) {\n    \t\t\tconsole.log ('/myfeed : got primary_group_memebers : [' + err + '] : ' + JSON.stringify(group));\n    \t\t\tvar team_data = {};\n    \t\t\tteam_data.outlet  = { name: group.name, pic: group.picture_url};\n    \t\t\tteam_data.outlet_team = {};\n    \t\t\tcollections.users_collection.find({_id: { $in: group.members\t}}).toArray( function (err, users) {\n\n\t\t\t\t\t\tfor (var idx in users) {\n\t\t\t\t\t\t\tvar member =  users[idx];\n\t\t\t\t\t\t\tteam_data.outlet_team[member.fullname] =   { \n\t\t\t\t\t\t\t\tpoints: member.points,\n\t\t\t\t\t\t\t\tpic: member.picture_url\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tcollections.posts_collection.find({parentid: group._id}).toArray( function (err, posts) {\n\t\t\t\t\t\t\treq.session = null; // method doesnt update the session\n\t\t\t\t\t\t\tres.send({team: team_data, feed :posts, me: udata});\n\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t});\n    \t/*\n\t\t\tvar team_data = null,\n\t\t\tfeedres = null,\n\t\t\tsentres = false;\n\t\t\t\n\t\t\tvar sendresponse = function () {\n\t\t\t\tif (feedres && team_data && sentres==false) {\n\t\t\t\t\treq.session = null; // method doesnt update the session\n\t\t\t\t\tsentres = true;\n\t\t\t\t\tres.send({team: team_data, feed :feedres, me: udata});\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// get user names and pictures and outlets too!\n\t\t\tqueryAPI('query?q='+escape('select Name, PortalPic__c,  (select Name, Points__c, PortalPic__c from Contacts) from Account where Id = \\'' + udata.outlet.id + '\\''), null, 'GET',  function (results) {\n\t\t\t\tconsole.log ('myfeed: got team query results :' + JSON.stringify(results));\n\t\t\t\tteam_data = {};\n\t\t\t\tif (results.totalSize == 1) {\n\t\t\t\t\tteam_data.outlet  = { name: results.records[0].Name, pic: results.records[0].PortalPic__c};\n\t\t\t\t\tteam_data.outlet_team = {};\n\t\t\t\t\t\n\t\t\t\t\tif (results.records[0].Contacts) {\n\t\t\t\t\t\tvar team =  results.records[0].Contacts.records;\n\t\t\t\t\t\tfor (var m in team) {\n\t\t\t\t\t\t\tteam_data.outlet_team[team[m].Name] =   { \n\t\t\t\t\t\t\t\tpoints: team[m].Points__c,\n\t\t\t\t\t\t\t\tpic: team[m].PortalPic__c\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsendresponse();\n\t\t\t});\n\t\t\tqueryAPI('chatter/feeds/record/'+udata.outlet.id+'/feed-items', null, 'GET', function (results) {\n\t\t\t\tfeedres = results;\n\t\t\t\tsendresponse();\n\t\t\t});\n\t\t\t*/\n    } else {\n        // its a training id\n        // get user names and pictures and outlets too!\n         queryAPI('query?q='+escape('select Name, (select Contact__r.Name, Contact__r.Points__c, Contact__r.PortalPic__c from Training_Participation__r) from TR_Training_Availability__c where Id = \\'' + whatid + '\\''), null, 'GET',  function (results) {\n               console.log ('myfeed: got team query results :' + JSON.stringify(results));\n               var team_data = {};\n               if (results.totalSize == 1) {\n                    team_data.outlet  = { name: results.records[0].Name, pic: 'none'};\n                    team_data.outlet_team = {};\n                    \n                    if (results.records[0].Training_Participation__r) {\n                        var team =  results.records[0].Training_Participation__r.records;\n                        for (var m in team) {\n                             team_data.outlet_team[team[m].Contact__r.Name] =   { \n                                    points: team[m].Contact__r.Points__c,\n                                    pic: team[m].Contact__r.PortalPic__c \n                            };\n                        }\n                    }\n               }\n             queryAPI('chatter/feeds/record/'+whatid+'/feed-items', null, 'GET', function (results1) {\n                //console.log ('/myfeed : results : ' + JSON.stringify(results));\n                req.session = null; // method doesnt update the session\n                res.send({team: team_data, feed :results1, me: udata});\n            });\n        });        \n    }\n   \n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////                EVENTS        //////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////////////////// \n\nvar PASS_SCORE = 100;\napp.post('/donequiz', function (req,res) {\n    var uid = req.session.userid,\n        sid = req.sessionID,\n        udata = req.session.userdata;\n    if (!uid) {\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n\n\t\n\tvar qid = req.body.id,\n\t\t\tscore = req.body.score,\n\t\t\tquesTried = req.body.quesTried,\n\t\t\tnow_passed = (req.body.quesTried>0 && req.body.score>=PASS_SCORE),\n\t\t\taready_passed = false;\n\t\t\t\n\tconsole.log ('donequiz: complted quiz:' + uid + ', quiz : ' + qid + ', score ' + score + ', quesTried : ' + quesTried + ', now_passed : ' + now_passed);\n\t// need to of least tryed one question to register quiz attempt!\n\tif ( quesTried > 0) {\n\t\t\n        collections.events_collection.findOne({_id: qid}, function(err, record) {\n    \t\tvar alreadydone = udata.completed_events;\n    \t\tvar points_award = 0;\n\n    \t\tif (!alreadydone[qid]) { // first atemmpt\n    \t\t\talreadydone[qid] = { id: \"\", passed: now_passed, score: score, attempts: 1, bestscore: score};\n    \t\t\tpoints_award = score * record.points/100;\n    \t\t\t\n    \t\t\tudata.points = udata.points + points_award;\n    \t\t\tconsole.log ('points: adding ' + points_award + ', total now : ' + udata.points);\n    \t\t} else { // NOT first attempt\n                console.log ('donequiz: not first attempt for : ' + qid);\n    \t\t\taready_passed = alreadydone[qid].passed;\n    \t\t\talreadydone[qid].attempts = alreadydone[qid].attempts + 1;\n    \t\t\talreadydone[qid].bestscore = Math.max(alreadydone[qid].bestscore, score);\n    \t\t\tif (!aready_passed) alreadydone[qid].passed = now_passed;\n    \t\t}\n\n    \t\tconsole.log ('donequiz: create results event ' + JSON.stringify(alreadydone[qid]));\n    \t\t// create event to register new results of quiz\n            \n            \n            /* update mongo */\n            var updatesJson = {};\n            updatesJson[\"completed_events.\"+qid] = alreadydone[qid];\n            collections.users_collection.update ({username: uid}, { $set: updatesJson }, {safe:true}, function(err) {\n                        if (err) { \n                            console.warn(err.message);\n                        } else {\n                            console.log('successfully updated'); \n             \n                        \tvar event = {\n                    \t\t\titem_id: qid,\n                    \t\t\titem_type: \"QUIZ\",\n                    \t\t\tresults_data: alreadydone[qid]\n                    \t\t};\n                    \t\t//if (!events_by_user[uid]) events_by_user[uid] = [];\t\n                    \t\t//events_by_user[uid].push(event);\n                            \n                            sendEventsToSession([event], sid);\n                            \n                            req.session.userdata = udata;  // update the session store with the new values.\n                            console.log ('/donequiz - udata.completed_events : ' + JSON.stringify(req.session.userdata));\n                            res.send({points: udata.points});\n                            \n                \n                            if ((!aready_passed) && now_passed) {\n                        \t\t// just passwd new quiz, hunt for new unlocks!!\n                    \t\t\tcreateEvents (uid, udata, qid, sid);\n                    \t\t}\n                        }\n                    });\n                        \n            \n            /*\n            // send update to salesforce\n            var bdy = { Name: qid, Attempts__c: alreadydone[qid].attempts, Passed__c:  alreadydone[qid].passed, First_Score__c: alreadydone[qid].score, Best_Score__c: alreadydone[qid].bestscore};\n            var sfdc_url = 'sobjects/Game_Event__c/' + alreadydone[qid].id;\n            var httpmethod = 'PATCH'; // its an update\n            if (alreadydone[qid].id.length == 0) {\n                // its a insert, set the m/d file\n                bdy.Contact__c = udata.id;\n                bdy.Points__c = points_award;\n                httpmethod = 'POST';\n            }\n            console.log ('/donequiz - ' + sfdc_url + ' : ' + JSON.stringify(bdy));\n            \n            queryAPI(sfdc_url, bdy, httpmethod, function(response) {\n                if (response) {\n                    console.log ('/donequiz -  response : ' +  JSON.stringify(response));\n                    console.log ('/donequiz setting id ' + qid + ' : ' + response.id);\n                    alreadydone[qid].id = response.id;\n                }\n    \n                \n        \t\tvar event = {\n    //    \t\t\tindex: event_index++,\n    //    \t\t\ttimestamp: new Date().getTime(),\n    //    \t\t\tactive: true,\n        \t\t\titem_id: qid,\n        \t\t\titem_type: \"QUIZ\",\n        \t\t\tresults_data: alreadydone[qid]\n        \t\t};\n        \t\t//if (!events_by_user[uid]) events_by_user[uid] = [];\t\n        \t\t//events_by_user[uid].push(event);\n                \n                sendEventsToSession([event], sid);\n                \n                req.session.userdata = udata;  // update the session store with the new values.\n                console.log ('/donequiz - udata.completed_events : ' + JSON.stringify(req.session.userdata));\n                res.send({points: udata.points});\n                \n    \n                if ((!aready_passed) && now_passed) {\n            \t\t// just passwd new quiz, hunt for new unlocks!!\n        \t\t\tcreateEvents (uid, udata, qid, sid);\n        \t\t}\n        \t\t//notify_long_connection_by_user(uid, udata);\n            });\n            */\n        });\n\t} else {\n\t\n    \t// update points in response\n        req.session = null;\n    \tres.send({points: udata.points});\n\t}\n});\n\n\n\napp.post('/booktraining', function (req,res) {\n    var uid = req.session.username,\n        sid = req.sessionID,\n        udata = req.session.userdata;\n    if (!uid) {\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n\n\tvar tid = req.body.tid,\n\t\ttdate = req.body.tdate;\n\n\tconsole.log ('booktraining() complted quiz:' + tid + ', data : ' + tdate);\n\t// need to of least tryed one question to register quiz attempt!\n\n\t\t\n\t\tvar alreadybooked = udata.booked_training;\n        if (!alreadybooked[tid]) { // first atemmpt\n            console.log ('booktraining() first atemmpt');\n    \t\talreadybooked[tid] = { id: \"\",   type: 'Booked on ' + tdate};\n        } else {\n            // just update date\n            console.log ('booktraining() just update date');\n            alreadybooked[tid] = { id: alreadybooked[tid].id, type: 're-Booked on ' + tdate };\n        }\n        \n        // send update to salesforce\n        var bdy = { Type__c:  alreadybooked[tid].type};\n        var sfdc_url = 'sobjects/TR_Training_Participation__c/' + alreadybooked[tid].id;\n        var httpmethod = 'PATCH'; // its an update\n        if (alreadybooked[tid].id.length == 0) {\n            // its a insert, set the m/d file\n            bdy.Contact__c = udata.id;\n            bdy.Training_Availability__c = tid;\n            httpmethod = 'POST';\n        }\n        console.log ('booktraining() ' + sfdc_url + ' : ' + JSON.stringify(bdy));\n        \n        queryAPI(sfdc_url, bdy, httpmethod, function(response) {\n            if (response) {\n                console.log ('/booktraining -  response : ' +  JSON.stringify(response));\n                console.log ('/booktraining setting id ' + tid + ' : ' + response.id);\n                alreadybooked[tid].id = response.id;\n            }\n\n            \n    \t\tvar event = {\n//    \t\t\tindex: event_index++,\n//    \t\t\ttimestamp: new Date().getTime(),\n//    \t\t\tactive: true,\n    \t\t\titem_id: tid,\n    \t\t\titem_type: \"TRAINING\",\n    \t\t\tresults_data: alreadybooked[tid]\n    \t\t};\n    \t\t//if (!events_by_user[uid]) events_by_user[uid] = [];\t\n    \t\t//events_by_user[uid].push(event);\n            sendEventsToSession([event], sid);\n            \n            \n            req.session.userdata = udata;  // update the session store with the new values.\n            console.log ('/booktraining - udata.completed_events : ' + JSON.stringify(req.session.userdata));\n            res.send({points: udata.points});\n            \n\n    \t\t//notify_long_connection_by_user(uid, udata);\n        });\n\n});\n\n// If we have a LongPoll request, respond with the events. otherwise add it to the 'temp_events_pending_longpoll' array!\n//var temp_events_pending_longpoll = {};\n/*\nfunction sendEventsToSession (events, sid) {\n\tconsole.log ('sendEventsToSession()');\n\tvar req_info = long_connections_by_session[sid];\n\tif (!req_info || req_info.completed) {\n\t\tconsole.log ('sendEventsToSession() no outstanding longpolling requests for ' + sid + ', store events for pending longpoll');\n\t\tif (!temp_events_pending_longpoll[sid])    \n\t\t\ttemp_events_pending_longpoll[sid] = events;\n\t\telse\n\t\t\ttemp_events_pending_longpoll[sid].push.apply(temp_events_pending_longpoll[sid], events);\n\t} else {\n\t\tconsole.log ('sendEventsToSession() got active connection for user ' + sid + ', sending events');\n\n\t\tclearTimeout(req_info.timeoutid);\n\t\treq_info.completed = true;\n\t\treq_info.request.resume();\n\t\t//event.my_points = udata.points;\n\t\treq_info.request.session = null; // method doesnt update the session\n\t\treq_info.response.send (JSON.stringify(events));\n\t}\n}\n*/\n\n\n\nvar connectionTimeout = 25; // always send a empty '200' reponse to each open request after 60seconds.\napp.get('/longpoll/:lasteventprocessed', function (req, res) {\n    var uid = req.session.userid,\n        udata = req.session.userdata,\n        sid = req.sessionID,\n        lasteventprocessed = req.params.lasteventprocessed;\n        \n    if (!uid) {\n    \tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n    \n    if (lasteventprocessed == 0) {\n        collections.long_connections_by_session[sid] = null;\n        //temp_events_pending_longpoll[sid] = null;\n       createEvents(uid, udata,  null, req.sessionID);\n//       createTrainings (uid, udata, req.sessionID);\n    }\n    \n\tconsole.log ('longpoll() got request from ' + uid + ' last eventprocessed from url : ' + lasteventprocessed);\n\t// check the required parameters\n\n    \n\t//var event = nextEvent(uid, lasteventprocessed);\n    //var events = temp_events_pending_longpoll[sid];\n\t//if (!events) {\n\n    collections.session_events_collection.findAndModify (\n        {_id: sid},\n        [],\n    \t{$unset :{ 'events' : 1}},\n    \t{new: false, upsert: false },\n    \tfunction(err, data) {\n            if (err || !data || !data.events) {\n                console.log ('longpoll() :: no event data ('  + err + ')  : ' + JSON.stringify(data));\n            \tconsole.log ('longpoll() pause request, no event to send ' + lasteventprocessed);\n        \n        \t\tvar req_info = { request: req, response: res, lasteventprocessed: lasteventprocessed, completed: false};\n        \t\treq_info.timeoutid = setTimeout( function () { \n        \t\t\tconsole.log ('longpoll() saved req_info,  timeout pulse');\n        \t\t\treq_info.request.resume();\n        \t\t\treq_info.response.send({item_type: \"PULSE\"});\n        \t\t\treq_info.completed = true;\n        \t\t\t }, connectionTimeout * 1000); \n        \n        \t\t//if (!long_connections_by_session[sid])\n        \t\t//\tlong_connections_by_session[sid] = [];  \n        \t\tcollections.long_connections_by_session[sid] = req_info;\n        \t\treq.pause();\n        \t\tconsole.log ('longpoll() stored and paused request');\n        \n            } else {\n        \t\tconsole.log ('longpoll() send the stored event data : ' + JSON.stringify(data));\n                res.send(JSON.stringify(data.events));\n            }\n    \t});\n/*\n\t} else {\n\t\tconsole.log ('longpoll() got event to send to user');\n\t\t//event.my_points =udata.points;\n\t\t//setTimeout (function() {  // ADD A 1 SECOND DELAY - JUST FOR EFFECT!!!\n\t\tres.send(JSON.stringify(events));\n\t\tconsole.log ('longpoll sent :' + JSON.stringify(events));\n        temp_events_pending_longpoll[sid] = null;\n\t\t//}, 1000);\n\t}\n*/\n\n});\n\napp.get ('/stream/:filename', function (req,res) {\n\tvar fn = __dirname+'/public/media/' +req.params.filename;\n\tconsole.log ('stream: filename ' + fn);\n\tres.sendfile (fn);\n});\n\n\n\n\nfunction createEvents(uid, udata, just_completed, sid) {\n    console.log ('createEvents() ' + uid + ', just_completed (set if just want delta): ' + just_completed);\n\t\n    // TODO...\n    var cursor = collections.events_collection.find ({});\n    cursor.toArray( function (err, item) {\n        console.log ('createEvents() query events item (' + err + ') : ' + JSON.stringify (item)); \n        var ret_events = [];\n        for (var idx in item) {\n\n            var i = item[idx]._id;\n    \t\tvar e = item[idx];\n    \t\tconsole.log ('createEvents : checking item : ' + i + '  :: ' + JSON.stringify (e));\n    \t\t\n    \t\tvar event = null, \n    \t\t\tresults_data = null,\n    \t\t\tselected = true, \n    \t\t\tnewlyselected = false;\n    \t\t\t\t\n    \t\tfor (var needtocomplete in e.forwho.completed) {\n    \t\t\tconsole.log ('createEvents: checking prereq for event, required : ' + needtocomplete + ', is it in ' + JSON.stringify(udata.completed_events) );\n    \t\t\tif (just_completed == needtocomplete ) {\n    \t\t\t\tnewlyselected = true;\n    \t\t\t}\n    \t\t\tvar hascompleted = udata.completed_events[needtocomplete];\n    \t\t\tif ((!hascompleted) || hascompleted.passed == false) {\n    \t\t\t//if (! (needtocomplete in users_collection[user].completed_events)) {\n    \t\t\t\tselected = false; break;\n    \t\t\t}\n    \t\t}\n    \t\tif (((!selected) || (just_completed != null && newlyselected == false))) {\n                console.log ('not selected');\n    \t\t} else {\n                // 100 points for just getting a new event\n        \t    //udata.points = udata.points + 50;\n        \t\t//console.log ('createEvents: points: adding ' + '50' + ', total now : ' + udata.points);\n        \n        \t\tvar event = {\n            //\t\t\tindex: event_index++,\n            //\t\t\ttimestamp: new Date().getTime(),\n            //\t\t\tactive: true,\n            \t\t\titem_id: i,\n            \t\t\titem_type: e.type,\n            \t\t\titem_data: e,\n            \t\t\tresults_data: udata.completed_events[i]\n        \t\t    };\n        \t\t//if (!events_by_user[uid])\tevents_by_user[uid] = [];\t\n        \t\t//events_by_user[uid].push(event);\n        \t\tconsole.log('createEvents: ADDED EVENT  [' + event.item_id +'], event_data ' + JSON.stringify(event.item_data) + ', results_data ' + JSON.stringify(event.results_data)  + ', newlyselected : '+ newlyselected);\n                ret_events.push (event);\n    \t\t}\n        }\n        sendEventsToSession(ret_events, sid);\n    });\n}\n\nfunction createTrainings (uid, udata, sid) {\n    console.log ('createTrainings :' + uid);\n     queryAPI('query?q='+escape('select Id, Name, Description__c, Start_date__c, Total_Participations__c, TR_Training__r.Content_Reference__c  , Training_Categories__c  from TR_Training_Availability__c where Account__c = \\'' + udata.outlet.id + '\\''), null, 'GET',  function (results) {\n           console.log ('createTrainings: got  query results :' + JSON.stringify(results));\n            if (results.totalSize >= 1) {\n                var ret_events = [];\n                for (var m in results.records) {\n                    var trec = results.records[m];\n                    \n                    var event = {\n    //                \t\tindex: event_index++,\n    //            \t\t\ttimestamp: new Date().getTime(),\n    //            \t\t\tactive: true,\n                \t\t\titem_id: trec.Id,\n                \t\t\titem_type: 'TRAINING',\n                \t\t\titem_data: {\n                                name: trec.Name,\n                        \t\tdesc: trec.Description__c,\n                    \t\t\tinfo: trec.Total_Participations__c\n                                },\n            \t\t\t    results_data: udata.booked_training[trec.Id]\n            \t\t    };\n//                    if (!events_by_user[uid])    events_by_user[uid] = [];\t\n//            \t\tevents_by_user[uid].push(event);\n                    console.log('createTrainings: ADDED EVENT [' + JSON.stringify(event));\n                    ret_events.push(event);\n                    \n                }\n//              notify_long_connection_by_user(uid, udata);\n                sendEventsToSession(ret_events, sid);\n           }\n     });\n}\n\n\n\nfunction sendEventsToSession (events, sid) {\n\tconsole.log ('sendEventsToSession() [' + sid + '] : '+ events.length);\n    var req_info = collections.long_connections_by_session[sid];\n    if (!req_info || req_info.completed) { \n        console.log ('sendEventsToSession() : save events to database & message all dynos to see if they have a longpoll for that session');\n\t    collections.session_events_collection.update ({_id: sid}, {$pushAll :{'events' :  events}}, {upsert: true}, function(err, data) {\n\t\t\tconsole.log ('sendEventsToSession, created event data on session : [' + err + '] : ' + data);\n\t\t\tcollections.longpoll_exchange.publish ('#', {type: 'NEW_EVENT_DATA', sessionid: sid}, { contentType: 'application/json'});\n    \t});\n    } else {\n        clearTimeout(req_info.timeoutid);\n    \treq_info.completed = true;\n    \treq_info.request.resume();\n    \t//event.my_points = udata.points;\n    \treq_info.request.session = null; // method doesnt update the session\n\t\treq_info.response.send (JSON.stringify(events));\n    }\n}\n\n\n\n\n\n}"]],"start1":0,"start2":0,"length1":0,"length2":37202}]],"length":37202,"saved":false}
{"contributors":[],"silentsave":false,"ts":1347359154645,"patch":[[{"diffs":[[1,"var rest = require('restler'),\n    mongodb = require('mongodb'),\n    ObjectID = require('mongodb').ObjectID,\n    gridform = require('gridform'),\n    formidable = require('formidable'),\n    gridstream = require('gridfs-stream'); // https://github.com/aheckmann/gridform\n\nmodule.exports = function(app, collections){\n    \n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////                USER        ////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////   \n\napp.get ('/profile', function(req,res) {\n    var uid = req.session.userid,\n        udata = req.session.userdata || {};\n        \n    console.log ('/profile uid ['+uid+'] : ' + JSON.stringify (udata));\n    collections.groups_collection.find().toArray( function (err, groups) {\n        console.log ('/profile groups : ' + JSON.stringify (groups));\n        //res.render('profile.ejs', { layout: false, locals: {  feedid: whatid, udata: udata } });\n        res.render('profile.hogan', { layout: false, locals: {  me: udata, groups: groups } });\n\t});\n});\n\napp.get('/media/:filename', function (req,res) {\n    var gs = new mongodb.GridStore(collections.db, new ObjectID(req.params.filename), 'r');\n    gs.open(function(err, gs){\n        gs.stream([autoclose=false]).pipe(res);\n    });\n\n});\n\napp.post ('/profile', function(req,res) {\n    \n    /*\n    var options = { db: collections.db };\n    var form = gridform(options);\n    */\n\n    var uid = new ObjectID ();\n\n    var incomingForm = new formidable.IncomingForm();\n\n    // overwrite this method if you are interested in directly accessing the multipart stream\n    incomingForm.onPart = function(part) {\n        \n        console.log ('/profile onPart, partname : ['+part.name+'], part.filename :  ' + part.filename);\n        if (part.filename === undefined) {\n            // let formidable handle all non-file parts\n            return incomingForm.handlePart(part);\n        }\n \n        var form = this;\n        form._flushing++;\n        \n        \n        // open gridFS write Stream\n        var filename = 'profile-pic'+uid;\n        var options = {mode: 'w', content_type: part.mime};\n        if (form.chunk_size) options.chunk_size = this.chunk_size;\n        if (form.root) options.root = this.root;\n        if (form.metadata) options.metadata = this.metadata;\n        console.log ('/profile onPart  open gridFS ['+filename+']  : options : ' + options ); \n        var grid_ws = gridstream(collections.db).createWriteStream(options);\n        \n        form.emit('fileBegin', part.name, grid_ws);\n        \n        /*\n        var gridOnDrain = function() { \n            console.log ('/profile grid_ws.drain : resuming form');\n            form.resume();\n        }\n        grid_ws.on('drain', gridOnDrain);\n        */\n        \n        var partOnData = function(buffer) {\n            console.log ('/profile part.data:   pause form & write to grid');\n            //form.pause();\n            grid_ws.write(buffer);\n        };\n        part.on('data', partOnData);\n        \n        part.once('end', function  () {\n            console.log ('/profile part.end:  got end');\n            part.removeListener('data', partOnData);\n            //grid_ws.removeListener('drain', gridOnDrain);\n            grid_ws.once('drain', function (err) {\n                console.log ('/profile part.end: final grid_ws.drain:  ' + err);\n                if (err) return form.emit('error', err = err);\n\n                form._flushing--;\n                form.emit('file', 'fileid', grid_ws.id);\n                form._maybeEnd();\n              });\n            console.log ('/profile part.end:  end grid_ws');\n            grid_ws.end();\n          });\n    }\n\n    // we disabled the bodyParser for multipart, so using formidable to stream the data to mongo gridFS\n    incomingForm.parse(req, function (err, fields, files) {\n    \n        console.log ('/profile parse fields ' + JSON.stringify(fields));\n        console.log ('/profile parse file [' + err + '] ' + JSON.stringify(files));\n        \n        var user =  {\n            _id: uid,\n            username : fields[\"user[email]\"],\n    \t\tfullname: fields[\"user[name]\"],\n    \t\tpoints: 0,\n    \t\tbelongs_to_primary: fields[\"user[location]\"],\n            desc:  fields[\"user[description]\"],\n            picture_url: '/media/'+files[\"fileid\"],\n            completed_events: {},\n    \t    booked_training: {}\n        };\n    \n        \n        collections.users_collection.insert (user, function(err, docs) {\n            console.log ('/profile parse, saved user, send response redirect');\n            \n            collections.groups_collection.findOne({_id: user.belongs_to_primary}, function(err, item) {\n                user.outlet = item;\n                req.session.userid = user._id;\n        \t\treq.session.userdata = user;  \n                res.redirect('/#home');\n            });\n        })\n    \n    });\n  \n  \n/*   \n    var uid = req.session.username,\n        udata = req.session.userdata;\n        \n    if (!uid) {\n        res.send ('Please Login', 400);\n        return;\n    }\n \n    console.log ('/profile body :: ' + JSON.stringify(req.body));\n    console.log ('/profile body :: ' + JSON.stringify(req.files));\n    \n    var user =  {\n    \tusername : req.body.user.email,\n\t\tfullname: req.body.user.name,\n\t\tpoints: 0,\n\t\tbelongs_to_primary: req.body.user.location,\n        desc: req.body.user.description\n    };\n\n    collections.users_collection.insert (user, function(err, docs) {\n        res.redirect('/');\n    })\n*/\n});\n\n\n\n// LOGIN POST\napp.post('/ajaxlogin', function (req,res) {\n    var uname = req.body.username;\n    console.log ('ajaxlogin: Attempt to login as ' + uname + ', sessionid : ' + req.sessionID);\n    \n    if (uname) {\n        collections.users_collection.findOne({username: uname}, function(err, user) {\n    \t\t\tif (err || !user) {\n    \t\t\t\tres.send({\n    \t\t\t\t\tmessage: 'username not found: ' + uname\n    \t\t\t\t\t});\n    \t\t\t} else {\n\t\t\t\t\t\tconsole.log ('/home - got userdata : ' + JSON.stringify(user));  \n                        collections.groups_collection.findOne({_id: new ObjectID (user.belongs_to_primary)}, function(err, item) {\n                            user.outlet = item;\n    \t\t\t\t\t\t//Properties on req.session are automatically saved on a response\n    \t\t\t\t\t\treq.session.userid = user._id;\n    \t\t\t\t\t\treq.session.userdata = user;  \n    \t\t\t\t\t\tres.send({ \n    \t\t\t\t\t\t\tusername: user._id, \n    \t\t\t\t\t\t\tuserdata: user\n    \t\t\t\t\t\t\t});\n                        });\n\t\t\t\t\t}\n\t\t\t\treturn;\n    \t\n    \t});\n/*\n        queryAPI('query?q='+escape('select Id, Name, PortalPic__c, PortalID__C, Points__c, Account.Name, Account.PortalPic__c, Account.id, (select Id, Name, Attempts__c, Best_Score__c, Passed__c, First_Score__c from Game_Events__r), (select Id, Name, Type__c, Training_Availability__c  from Training_Participation__r) from Contact where PortalID__c = \\'' + uid + '\\''), null, 'GET',  function (results) {\n           console.log ('login: got query results ' + JSON.stringify(results));\n           if (results.totalSize == 1) {\n               var udata = {\n                   id:  results.records[0].Id,\n                   fullname: results.records[0].Name,\n                   points: results.records[0].Points__c, \n                   outlet : {\n                       id: results.records[0].Account.Id,\n                       name: results.records[0].Account.Name,\n                       picture_url: results.records[0].Account.PortalPic__c\n                   },\n                   picture_url: results.records[0].PortalPic__c, \n                   completed_events: {},\n                   booked_training: {}\n                   };\n                   \n                if (results.records[0].Game_Events__r) {\n                    var gameevents =  results.records[0].Game_Events__r.records;\n                    for (var gidx in gameevents) {\n                        udata.completed_events[gameevents[gidx].Name] = {\n                            id:  gameevents[gidx].Id,\n                            attempts: gameevents[gidx].Attempts__c,\n                            passed: gameevents[gidx].Passed__c,\n                            score: gameevents[gidx].First_Score__c,\n                            bestscore: gameevents[gidx].Best_Score__c\n                        };\n                    }\n                }\n                \n                 if (results.records[0].Training_Participation__r) {\n                    var tevents =  results.records[0].Training_Participation__r.records;\n                    for (var gidx in tevents) {\n                        udata.booked_training[tevents[gidx].Training_Availability__c] = {\n                            id:  tevents[gidx].Id,\n                            name:  tevents[gidx].Name,\n                            type: tevents[gidx].Type__c\n                        };\n                    }\n                }\n                \n                console.log ('/home - got userdata : ' + JSON.stringify(udata));    \n                var sess = req.session;\n                //Properties on req.session are automatically saved on a response\n                sess.username = uid;\n                sess.userdata = udata;  \n                sess.completed_events = udata.completed_events;  \n                \n//                sess.start_idx = event_index -1;\n//                createEvents(uid, udata,  null);\n//                createTrainings (uid, udata);\n                \n                res.send({ \n                        username: uid, \n                        userdata: udata\n//                        current_index: sess.start_idx\n                        });\n               \n                return;\n           } else {\n                res.send({message : 'username not found (ensure Contact exists with username in PortalID__c field): ' + uid});\n                return;\n           }\n        });\n*/\n    } else {\n\tres.send({message : 'Please enter username'});\n    }\n});\n\napp.get('/ajaxlogin', function (req,res) {\n    var uid = req.session.userid,\n        udata = req.session.userdata;\n//        start_idx = req.session.start_idx;\n        \n    console.log ('ajaxlogin: checking valid session for ' + uid + ', sessionid : ' + req.sessionID);\n        \n    if (!uid) {\n        // no active session\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} else {\n\t    // got active session\n        req.session = null; // not changing the session\n        \n        res.send({ \n                username: uid, \n                userdata: udata, \n//                current_index: start_idx\n                }); \n    }\n});\n\napp.get('/login-oauth/:provider', function (req, res) {\n    // We have nothing - redirect to the Authorization Server\n    req.session.oauth_state = req.url;\n    var oauthURL = \"https://\" + process.env.SFDC_HOSTNAME + \"/services/oauth2/authorize?response_type=code&\" +\n        \"client_id=\" + process.env.CLIENT_ID + \"&redirect_uri=\" + \"http://localhost:\" + (process.env.PORT || 3001) + \"/auth-callback\" + \"&display=touch\";\n    console.log('redirecting: '+oauthURL);\n\tres.redirect(oauthURL);  // Redirect to salesforce.com\n\tres.end();\n});\n\napp.get('/auth-callback', function (req, res) {\n    if (req.query.code){\n        // Callback from the Authorization Server\n        console.log('code: '+req.query.code);\n        \n        rest.post(\"https://\" + process.env.SFDC_HOSTNAME +'/services/oauth2/token', {\n            data: { \n                code: req.query.code,\n                grant_type: 'authorization_code',\n                client_id: process.env.CLIENT_ID,\n                redirect_uri: \"http://localhost:\" + (process.env.PORT || 3001) + \"/auth-callback\",\n                client_secret: process.env.CLIENT_SECRET\n            },\n            }).on('complete', function(data, response) {\n              if (response.statusCode == 200) {\n                req.session.oauth = data;\n                //state = req.session.oauth_state;\n                //delete req.session.oauth_state;\n                //console.log('oauth done - redirecting to '+state);\n            \tres.redirect('/');\n              }\n            }).on('error', function(e) {\n    \t\t\t  console.error(e);\n    \t\t});\n    }\n});\n                \n\napp.get('/logout', function (req,res) {\n    req.session.destroy();\n    res.redirect('/');\n    \n});\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////                CHAT        ////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////    \n\napp.post ('/post/:what', function (req,res) {\n    console.log ('/post/:what' + req.params.what + ' : ' + req.body.me);\n    var uid = req.session.userid,\n        udata = req.session.userdata,\n        whatid = req.params.what,\n        files = req.files,\n        filename = req.body.fname,\n        filedesc = req.body.fdesc,\n\t\tme = req.body.me;\n        \n\n        \n    if (!uid && !me) {\n\t\tconsole.log ('/post/:what : no uid');\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n    if (whatid == 'me') whatid = udata.outlet.id;\n\t\n\t//  THIS IS A WORKAROUND BEBAUSE PHONGGAP DOESNT SEND COOKIES WITH FileTransfer.upload!! NEED TO FIX\n\tvar fullname = me;\n    if (udata) fullname = udata.fullname;\n\t// END OF WORKAROUND\n    \n    if (files) {\n        \n        console.log('/post got a file' + filename);\n        console.dir(files);\n        \n        var host =  (require('url').parse(foauth.getOAuthResponse().instance_url))['host'];\n\n        rest.post('https://' + host + '/services/data/v24.0/' + 'chatter/feeds/record/'+whatid+'/feed-items', {\n          multipart: true,\n          headers: { \n              'Host': host,\n              'Authorization': 'OAuth '+foauth.getOAuthResponse().access_token,\n            },\n          data: {\n            'text':  fullname + ': '+ req.body.mess,\n            'desc': filedesc,\n            'title': filename,\n            'feedItemFileUpload': rest.file(files.attach.path, files.attach.name, null, 'binary',  files.attach.type)\n          }\n        }).on('complete', function(results) {\n            req.session = null; // method doesnt update the session\n\t\t\tconsole.log ('/post/:what : results : ' + results);\n\t\t\tconsole.log ('/post/:what : results : ' + JSON.stringify(results));\n            res.send (results);\n        });\n        \n    } else {\n\t\tconsole.log('/post no file');\n        var bdy = { \"body\" :   {\"messageSegments\" : [{\"type\": \"Text\", \"text\" : fullname + ': '+ req.body.mess  }] }};\n        queryAPI('chatter/feeds/record/'+whatid+'/feed-items', bdy, 'POST',  function(results) {\n            //console.log ('/post : results : ' + JSON.stringify(results));\n            req.session = null; // method doesnt update the session\n            res.send (results);\n       });\n    }\n});\n\napp.post ('/postcomment', function (req,res) {\n    \n    var uid = req.session.userid,\n         udata = req.session.userdata;\n         \n    if (!uid) {\n    \tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n\n\n    var bdy = { \"body\" :   {\"messageSegments\" : [{\"type\": \"Text\", \"text\" : udata.fullname + ': '+  req.body.mess  }] }};\n    queryAPI('chatter/feed-items/'+ req.body.feeditem +'/comments', bdy, 'POST', function(results) {\n        //console.log ('/postcomment : results : ' + JSON.stringify(results));\n        req.session = null; // method doesnt update the session\n        res.send (results);\n   });\n});\n\napp.get ('/feedfile', function(req,res) {\n    var uid = req.session.userid,\n        what = req.query.what,\n        mt = req.query.mt;\n        \n    if (!uid) {\n//        res.send ('Please Login', 400);\n//        return;\n\t}\n    \n    console.log ('/feedfile ' + what);\n    \n    var host =  (require('url').parse(foauth.getOAuthResponse().instance_url))['host'];\n\tres.header('Content-Type', mt);\n\tres.attachment();\n\t\n\tvar data = null;\n\thttps.get({\n\t\t\tmethod: 'get',\n\t\t\thost: host,\n\t\t\tpath: what,\n\t\t\theaders: {\n\t\t\t  'Authorization': 'OAuth '+foauth.getOAuthResponse().access_token,\n\t\t}}, function(fileres) {\n\t\t\tconsole.log(\"/feedfile : statusCode: \", fileres.statusCode);\n    \n\t\t\tfileres.on('data', function(_data) {\n\t\t\t\tconsole.log ('/feedfile : got some data');\n\t\t\t\tres.write (new Buffer(_data, 'binary'));\n\t\t\t\t\n\t\t\t});\n    \n\t\t\tfileres.on('end', function() {\n\t\t\t\tconsole.log ('/feedfile : end, send the response');\n\t\t\t\tres.end();\n\t\t\t});\n\t\t}).on('error', function(e) {\n\t\t  console.log(e);\n\t\t})\n});\n/*\napp.get ('/chat/:what', function(req,res) {\n    var uid = req.session.username,\n        udata = req.session.userdata,\n        whatid = req.params.what;\n        \n    if (!uid) {\n        res.send ('Please Login', 400);\n    \treturn;\n\t}   \n\n    res.render('chat.ejs', { layout: false, locals: {  feedid: whatid, udata: udata } });\n    //res.render('chat.ejs', { locals: {  feedid: udata.outlet.id, udata: udata } });\n});\n*/\napp.get ('/myfeed/:what', function (req,res) {\n    var uid = req.session.userid,\n        udata = req.session.userdata,\n        whatid = req.params.what;\n        \n    if (!uid) {\n        res.send ('Please Login', 400);\n\t\treturn;\n\t}\n    if (whatid == 'me') {\n    \tconsole.log ('/myfeed : query for primary_group : ' + udata.belongs_to_primary);\n    \tcollections.groups_collection.findOne({_id: new mongodb.ObjectID (udata.belongs_to_primary)}, function(err, group) {\n    \t\t\tconsole.log ('/myfeed : got primary_group_memebers : [' + err + '] : ' + JSON.stringify(group));\n    \t\t\tvar team_data = {};\n    \t\t\tteam_data.outlet  = { name: group.name, pic: group.picture_url};\n    \t\t\tteam_data.outlet_team = {};\n    \t\t\tcollections.users_collection.find({_id: { $in: group.members\t}}).toArray( function (err, users) {\n\n\t\t\t\t\t\tfor (var idx in users) {\n\t\t\t\t\t\t\tvar member =  users[idx];\n\t\t\t\t\t\t\tteam_data.outlet_team[member.fullname] =   { \n\t\t\t\t\t\t\t\tpoints: member.points,\n\t\t\t\t\t\t\t\tpic: member.picture_url\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tcollections.posts_collection.find({parentid: group._id}).toArray( function (err, posts) {\n\t\t\t\t\t\t\treq.session = null; // method doesnt update the session\n\t\t\t\t\t\t\tres.send({team: team_data, feed :posts, me: udata});\n\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t});\n    \t/*\n\t\t\tvar team_data = null,\n\t\t\tfeedres = null,\n\t\t\tsentres = false;\n\t\t\t\n\t\t\tvar sendresponse = function () {\n\t\t\t\tif (feedres && team_data && sentres==false) {\n\t\t\t\t\treq.session = null; // method doesnt update the session\n\t\t\t\t\tsentres = true;\n\t\t\t\t\tres.send({team: team_data, feed :feedres, me: udata});\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// get user names and pictures and outlets too!\n\t\t\tqueryAPI('query?q='+escape('select Name, PortalPic__c,  (select Name, Points__c, PortalPic__c from Contacts) from Account where Id = \\'' + udata.outlet.id + '\\''), null, 'GET',  function (results) {\n\t\t\t\tconsole.log ('myfeed: got team query results :' + JSON.stringify(results));\n\t\t\t\tteam_data = {};\n\t\t\t\tif (results.totalSize == 1) {\n\t\t\t\t\tteam_data.outlet  = { name: results.records[0].Name, pic: results.records[0].PortalPic__c};\n\t\t\t\t\tteam_data.outlet_team = {};\n\t\t\t\t\t\n\t\t\t\t\tif (results.records[0].Contacts) {\n\t\t\t\t\t\tvar team =  results.records[0].Contacts.records;\n\t\t\t\t\t\tfor (var m in team) {\n\t\t\t\t\t\t\tteam_data.outlet_team[team[m].Name] =   { \n\t\t\t\t\t\t\t\tpoints: team[m].Points__c,\n\t\t\t\t\t\t\t\tpic: team[m].PortalPic__c\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsendresponse();\n\t\t\t});\n\t\t\tqueryAPI('chatter/feeds/record/'+udata.outlet.id+'/feed-items', null, 'GET', function (results) {\n\t\t\t\tfeedres = results;\n\t\t\t\tsendresponse();\n\t\t\t});\n\t\t\t*/\n    } else {\n        // its a training id\n        // get user names and pictures and outlets too!\n         queryAPI('query?q='+escape('select Name, (select Contact__r.Name, Contact__r.Points__c, Contact__r.PortalPic__c from Training_Participation__r) from TR_Training_Availability__c where Id = \\'' + whatid + '\\''), null, 'GET',  function (results) {\n               console.log ('myfeed: got team query results :' + JSON.stringify(results));\n               var team_data = {};\n               if (results.totalSize == 1) {\n                    team_data.outlet  = { name: results.records[0].Name, pic: 'none'};\n                    team_data.outlet_team = {};\n                    \n                    if (results.records[0].Training_Participation__r) {\n                        var team =  results.records[0].Training_Participation__r.records;\n                        for (var m in team) {\n                             team_data.outlet_team[team[m].Contact__r.Name] =   { \n                                    points: team[m].Contact__r.Points__c,\n                                    pic: team[m].Contact__r.PortalPic__c \n                            };\n                        }\n                    }\n               }\n             queryAPI('chatter/feeds/record/'+whatid+'/feed-items', null, 'GET', function (results1) {\n                //console.log ('/myfeed : results : ' + JSON.stringify(results));\n                req.session = null; // method doesnt update the session\n                res.send({team: team_data, feed :results1, me: udata});\n            });\n        });        \n    }\n   \n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////                EVENTS        //////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////////////////// \n\nvar PASS_SCORE = 100;\napp.post('/donequiz', function (req,res) {\n    var uid = req.session.userid,\n        sid = req.sessionID,\n        udata = req.session.userdata;\n    if (!uid) {\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n\n\t\n\tvar qid = req.body.id,\n\t\t\tscore = req.body.score,\n\t\t\tquesTried = req.body.quesTried,\n\t\t\tnow_passed = (req.body.quesTried>0 && req.body.score>=PASS_SCORE),\n\t\t\taready_passed = false;\n\t\t\t\n\tconsole.log ('donequiz: complted quiz:' + uid + ', quiz : ' + qid + ', score ' + score + ', quesTried : ' + quesTried + ', now_passed : ' + now_passed);\n\t// need to of least tryed one question to register quiz attempt!\n\tif ( quesTried > 0) {\n\t\t\n        collections.events_collection.findOne({_id: qid}, function(err, record) {\n    \t\tvar alreadydone = udata.completed_events;\n    \t\tvar points_award = 0;\n\n    \t\tif (!alreadydone[qid]) { // first atemmpt\n    \t\t\talreadydone[qid] = { id: \"\", passed: now_passed, score: score, attempts: 1, bestscore: score};\n    \t\t\tpoints_award = score * record.points/100;\n    \t\t\t\n    \t\t\tudata.points = udata.points + points_award;\n    \t\t\tconsole.log ('points: adding ' + points_award + ', total now : ' + udata.points);\n    \t\t} else { // NOT first attempt\n                console.log ('donequiz: not first attempt for : ' + qid);\n    \t\t\taready_passed = alreadydone[qid].passed;\n    \t\t\talreadydone[qid].attempts = alreadydone[qid].attempts + 1;\n    \t\t\talreadydone[qid].bestscore = Math.max(alreadydone[qid].bestscore, score);\n    \t\t\tif (!aready_passed) alreadydone[qid].passed = now_passed;\n    \t\t}\n\n    \t\tconsole.log ('donequiz: create results event ' + JSON.stringify(alreadydone[qid]));\n    \t\t// create event to register new results of quiz\n            \n            \n            /* update mongo */\n            var updatesJson = {};\n            updatesJson[\"completed_events.\"+qid] = alreadydone[qid];\n            collections.users_collection.update ({username: uid}, { $set: updatesJson }, {safe:true}, function(err) {\n                        if (err) { \n                            console.warn(err.message);\n                        } else {\n                            console.log('successfully updated'); \n             \n                        \tvar event = {\n                    \t\t\titem_id: qid,\n                    \t\t\titem_type: \"QUIZ\",\n                    \t\t\tresults_data: alreadydone[qid]\n                    \t\t};\n                    \t\t//if (!events_by_user[uid]) events_by_user[uid] = [];\t\n                    \t\t//events_by_user[uid].push(event);\n                            \n                            sendEventsToSession([event], sid);\n                            \n                            req.session.userdata = udata;  // update the session store with the new values.\n                            console.log ('/donequiz - udata.completed_events : ' + JSON.stringify(req.session.userdata));\n                            res.send({points: udata.points});\n                            \n                \n                            if ((!aready_passed) && now_passed) {\n                        \t\t// just passwd new quiz, hunt for new unlocks!!\n                    \t\t\tcreateEvents (uid, udata, qid, sid);\n                    \t\t}\n                        }\n                    });\n                        \n            \n            /*\n            // send update to salesforce\n            var bdy = { Name: qid, Attempts__c: alreadydone[qid].attempts, Passed__c:  alreadydone[qid].passed, First_Score__c: alreadydone[qid].score, Best_Score__c: alreadydone[qid].bestscore};\n            var sfdc_url = 'sobjects/Game_Event__c/' + alreadydone[qid].id;\n            var httpmethod = 'PATCH'; // its an update\n            if (alreadydone[qid].id.length == 0) {\n                // its a insert, set the m/d file\n                bdy.Contact__c = udata.id;\n                bdy.Points__c = points_award;\n                httpmethod = 'POST';\n            }\n            console.log ('/donequiz - ' + sfdc_url + ' : ' + JSON.stringify(bdy));\n            \n            queryAPI(sfdc_url, bdy, httpmethod, function(response) {\n                if (response) {\n                    console.log ('/donequiz -  response : ' +  JSON.stringify(response));\n                    console.log ('/donequiz setting id ' + qid + ' : ' + response.id);\n                    alreadydone[qid].id = response.id;\n                }\n    \n                \n        \t\tvar event = {\n    //    \t\t\tindex: event_index++,\n    //    \t\t\ttimestamp: new Date().getTime(),\n    //    \t\t\tactive: true,\n        \t\t\titem_id: qid,\n        \t\t\titem_type: \"QUIZ\",\n        \t\t\tresults_data: alreadydone[qid]\n        \t\t};\n        \t\t//if (!events_by_user[uid]) events_by_user[uid] = [];\t\n        \t\t//events_by_user[uid].push(event);\n                \n                sendEventsToSession([event], sid);\n                \n                req.session.userdata = udata;  // update the session store with the new values.\n                console.log ('/donequiz - udata.completed_events : ' + JSON.stringify(req.session.userdata));\n                res.send({points: udata.points});\n                \n    \n                if ((!aready_passed) && now_passed) {\n            \t\t// just passwd new quiz, hunt for new unlocks!!\n        \t\t\tcreateEvents (uid, udata, qid, sid);\n        \t\t}\n        \t\t//notify_long_connection_by_user(uid, udata);\n            });\n            */\n        });\n\t} else {\n\t\n    \t// update points in response\n        req.session = null;\n    \tres.send({points: udata.points});\n\t}\n});\n\n\n\napp.post('/booktraining', function (req,res) {\n    var uid = req.session.username,\n        sid = req.sessionID,\n        udata = req.session.userdata;\n    if (!uid) {\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n\n\tvar tid = req.body.tid,\n\t\ttdate = req.body.tdate;\n\n\tconsole.log ('booktraining() complted quiz:' + tid + ', data : ' + tdate);\n\t// need to of least tryed one question to register quiz attempt!\n\n\t\t\n\t\tvar alreadybooked = udata.booked_training;\n        if (!alreadybooked[tid]) { // first atemmpt\n            console.log ('booktraining() first atemmpt');\n    \t\talreadybooked[tid] = { id: \"\",   type: 'Booked on ' + tdate};\n        } else {\n            // just update date\n            console.log ('booktraining() just update date');\n            alreadybooked[tid] = { id: alreadybooked[tid].id, type: 're-Booked on ' + tdate };\n        }\n        \n        // send update to salesforce\n        var bdy = { Type__c:  alreadybooked[tid].type};\n        var sfdc_url = 'sobjects/TR_Training_Participation__c/' + alreadybooked[tid].id;\n        var httpmethod = 'PATCH'; // its an update\n        if (alreadybooked[tid].id.length == 0) {\n            // its a insert, set the m/d file\n            bdy.Contact__c = udata.id;\n            bdy.Training_Availability__c = tid;\n            httpmethod = 'POST';\n        }\n        console.log ('booktraining() ' + sfdc_url + ' : ' + JSON.stringify(bdy));\n        \n        queryAPI(sfdc_url, bdy, httpmethod, function(response) {\n            if (response) {\n                console.log ('/booktraining -  response : ' +  JSON.stringify(response));\n                console.log ('/booktraining setting id ' + tid + ' : ' + response.id);\n                alreadybooked[tid].id = response.id;\n            }\n\n            \n    \t\tvar event = {\n//    \t\t\tindex: event_index++,\n//    \t\t\ttimestamp: new Date().getTime(),\n//    \t\t\tactive: true,\n    \t\t\titem_id: tid,\n    \t\t\titem_type: \"TRAINING\",\n    \t\t\tresults_data: alreadybooked[tid]\n    \t\t};\n    \t\t//if (!events_by_user[uid]) events_by_user[uid] = [];\t\n    \t\t//events_by_user[uid].push(event);\n            sendEventsToSession([event], sid);\n            \n            \n            req.session.userdata = udata;  // update the session store with the new values.\n            console.log ('/booktraining - udata.completed_events : ' + JSON.stringify(req.session.userdata));\n            res.send({points: udata.points});\n            \n\n    \t\t//notify_long_connection_by_user(uid, udata);\n        });\n\n});\n\n// If we have a LongPoll request, respond with the events. otherwise add it to the 'temp_events_pending_longpoll' array!\n//var temp_events_pending_longpoll = {};\n/*\nfunction sendEventsToSession (events, sid) {\n\tconsole.log ('sendEventsToSession()');\n\tvar req_info = long_connections_by_session[sid];\n\tif (!req_info || req_info.completed) {\n\t\tconsole.log ('sendEventsToSession() no outstanding longpolling requests for ' + sid + ', store events for pending longpoll');\n\t\tif (!temp_events_pending_longpoll[sid])    \n\t\t\ttemp_events_pending_longpoll[sid] = events;\n\t\telse\n\t\t\ttemp_events_pending_longpoll[sid].push.apply(temp_events_pending_longpoll[sid], events);\n\t} else {\n\t\tconsole.log ('sendEventsToSession() got active connection for user ' + sid + ', sending events');\n\n\t\tclearTimeout(req_info.timeoutid);\n\t\treq_info.completed = true;\n\t\treq_info.request.resume();\n\t\t//event.my_points = udata.points;\n\t\treq_info.request.session = null; // method doesnt update the session\n\t\treq_info.response.send (JSON.stringify(events));\n\t}\n}\n*/\n\n\n\nvar connectionTimeout = 25; // always send a empty '200' reponse to each open request after 60seconds.\napp.get('/longpoll/:lasteventprocessed', function (req, res) {\n    var uid = req.session.userid,\n        udata = req.session.userdata,\n        sid = req.sessionID,\n        lasteventprocessed = req.params.lasteventprocessed;\n        \n    if (!uid) {\n    \tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n    \n    if (lasteventprocessed == 0) {\n        collections.long_connections_by_session[sid] = null;\n        //temp_events_pending_longpoll[sid] = null;\n       createEvents(uid, udata,  null, req.sessionID);\n//       createTrainings (uid, udata, req.sessionID);\n    }\n    \n\tconsole.log ('longpoll() got request from ' + uid + ' last eventprocessed from url : ' + lasteventprocessed);\n\t// check the required parameters\n\n    \n\t//var event = nextEvent(uid, lasteventprocessed);\n    //var events = temp_events_pending_longpoll[sid];\n\t//if (!events) {\n\n    collections.session_events_collection.findAndModify (\n        {_id: sid},\n        [],\n    \t{$unset :{ 'events' : 1}},\n    \t{new: false, upsert: false },\n    \tfunction(err, data) {\n            if (err || !data || !data.events) {\n                console.log ('longpoll() :: no event data ('  + err + ')  : ' + JSON.stringify(data));\n            \tconsole.log ('longpoll() pause request, no event to send ' + lasteventprocessed);\n        \n        \t\tvar req_info = { request: req, response: res, lasteventprocessed: lasteventprocessed, completed: false};\n        \t\treq_info.timeoutid = setTimeout( function () { \n        \t\t\tconsole.log ('longpoll() saved req_info,  timeout pulse');\n        \t\t\treq_info.request.resume();\n        \t\t\treq_info.response.send({item_type: \"PULSE\"});\n        \t\t\treq_info.completed = true;\n        \t\t\t }, connectionTimeout * 1000); \n        \n        \t\t//if (!long_connections_by_session[sid])\n        \t\t//\tlong_connections_by_session[sid] = [];  \n        \t\tcollections.long_connections_by_session[sid] = req_info;\n        \t\treq.pause();\n        \t\tconsole.log ('longpoll() stored and paused request');\n        \n            } else {\n        \t\tconsole.log ('longpoll() send the stored event data : ' + JSON.stringify(data));\n                res.send(JSON.stringify(data.events));\n            }\n    \t});\n/*\n\t} else {\n\t\tconsole.log ('longpoll() got event to send to user');\n\t\t//event.my_points =udata.points;\n\t\t//setTimeout (function() {  // ADD A 1 SECOND DELAY - JUST FOR EFFECT!!!\n\t\tres.send(JSON.stringify(events));\n\t\tconsole.log ('longpoll sent :' + JSON.stringify(events));\n        temp_events_pending_longpoll[sid] = null;\n\t\t//}, 1000);\n\t}\n*/\n\n});\n\napp.get ('/stream/:filename', function (req,res) {\n\tvar fn = __dirname+'/public/media/' +req.params.filename;\n\tconsole.log ('stream: filename ' + fn);\n\tres.sendfile (fn);\n});\n\n\n\n\nfunction createEvents(uid, udata, just_completed, sid) {\n    console.log ('createEvents() ' + uid + ', just_completed (set if just want delta): ' + just_completed);\n\t\n    // TODO...\n    var cursor = collections.events_collection.find ({});\n    cursor.toArray( function (err, item) {\n        console.log ('createEvents() query events item (' + err + ') : ' + JSON.stringify (item)); \n        var ret_events = [];\n        for (var idx in item) {\n\n            var i = item[idx]._id;\n    \t\tvar e = item[idx];\n    \t\tconsole.log ('createEvents : checking item : ' + i + '  :: ' + JSON.stringify (e));\n    \t\t\n    \t\tvar event = null, \n    \t\t\tresults_data = null,\n    \t\t\tselected = true, \n    \t\t\tnewlyselected = false;\n    \t\t\t\t\n    \t\tfor (var needtocomplete in e.forwho.completed) {\n    \t\t\tconsole.log ('createEvents: checking prereq for event, required : ' + needtocomplete + ', is it in ' + JSON.stringify(udata.completed_events) );\n    \t\t\tif (just_completed == needtocomplete ) {\n    \t\t\t\tnewlyselected = true;\n    \t\t\t}\n    \t\t\tvar hascompleted = udata.completed_events[needtocomplete];\n    \t\t\tif ((!hascompleted) || hascompleted.passed == false) {\n    \t\t\t//if (! (needtocomplete in users_collection[user].completed_events)) {\n    \t\t\t\tselected = false; break;\n    \t\t\t}\n    \t\t}\n    \t\tif (((!selected) || (just_completed != null && newlyselected == false))) {\n                console.log ('not selected');\n    \t\t} else {\n                // 100 points for just getting a new event\n        \t    //udata.points = udata.points + 50;\n        \t\t//console.log ('createEvents: points: adding ' + '50' + ', total now : ' + udata.points);\n        \n        \t\tvar event = {\n            //\t\t\tindex: event_index++,\n            //\t\t\ttimestamp: new Date().getTime(),\n            //\t\t\tactive: true,\n            \t\t\titem_id: i,\n            \t\t\titem_type: e.type,\n            \t\t\titem_data: e,\n            \t\t\tresults_data: udata.completed_events[i]\n        \t\t    };\n        \t\t//if (!events_by_user[uid])\tevents_by_user[uid] = [];\t\n        \t\t//events_by_user[uid].push(event);\n        \t\tconsole.log('createEvents: ADDED EVENT  [' + event.item_id +'], event_data ' + JSON.stringify(event.item_data) + ', results_data ' + JSON.stringify(event.results_data)  + ', newlyselected : '+ newlyselected);\n                ret_events.push (event);\n    \t\t}\n        }\n        sendEventsToSession(ret_events, sid);\n    });\n}\n\nfunction createTrainings (uid, udata, sid) {\n    console.log ('createTrainings :' + uid);\n     queryAPI('query?q='+escape('select Id, Name, Description__c, Start_date__c, Total_Participations__c, TR_Training__r.Content_Reference__c  , Training_Categories__c  from TR_Training_Availability__c where Account__c = \\'' + udata.outlet.id + '\\''), null, 'GET',  function (results) {\n           console.log ('createTrainings: got  query results :' + JSON.stringify(results));\n            if (results.totalSize >= 1) {\n                var ret_events = [];\n                for (var m in results.records) {\n                    var trec = results.records[m];\n                    \n                    var event = {\n    //                \t\tindex: event_index++,\n    //            \t\t\ttimestamp: new Date().getTime(),\n    //            \t\t\tactive: true,\n                \t\t\titem_id: trec.Id,\n                \t\t\titem_type: 'TRAINING',\n                \t\t\titem_data: {\n                                name: trec.Name,\n                        \t\tdesc: trec.Description__c,\n                    \t\t\tinfo: trec.Total_Participations__c\n                                },\n            \t\t\t    results_data: udata.booked_training[trec.Id]\n            \t\t    };\n//                    if (!events_by_user[uid])    events_by_user[uid] = [];\t\n//            \t\tevents_by_user[uid].push(event);\n                    console.log('createTrainings: ADDED EVENT [' + JSON.stringify(event));\n                    ret_events.push(event);\n                    \n                }\n//              notify_long_connection_by_user(uid, udata);\n                sendEventsToSession(ret_events, sid);\n           }\n     });\n}\n\n\n\nfunction sendEventsToSession (events, sid) {\n\tconsole.log ('sendEventsToSession() [' + sid + '] : '+ events.length);\n    var req_info = collections.long_connections_by_session[sid];\n    if (!req_info || req_info.completed) { \n        console.log ('sendEventsToSession() : save events to database & message all dynos to see if they have a longpoll for that session');\n\t    collections.session_events_collection.update ({_id: sid}, {$pushAll :{'events' :  events}}, {upsert: true}, function(err, data) {\n\t\t\tconsole.log ('sendEventsToSession, created event data on session : [' + err + '] : ' + data);\n\t\t\tcollections.longpoll_exchange.publish ('#', {type: 'NEW_EVENT_DATA', sessionid: sid}, { contentType: 'application/json'});\n    \t});\n    } else {\n        clearTimeout(req_info.timeoutid);\n    \treq_info.completed = true;\n    \treq_info.request.resume();\n    \t//event.my_points = udata.points;\n    \treq_info.request.session = null; // method doesnt update the session\n\t\treq_info.response.send (JSON.stringify(events));\n    }\n}\n\n\n\n\n\n}"]],"start1":0,"start2":0,"length1":0,"length2":38267}]],"length":38267,"saved":false}
{"contributors":[],"silentsave":false,"ts":1347359195690,"patch":[[{"diffs":[[1,"var rest = require('restler'),\n    mongodb = require('mongodb'),\n    ObjectID = require('mongodb').ObjectID,\n    gridform = require('gridform'),\n    formidable = require('formidable'),\n    gridstream = require('gridfs-stream'); // https://github.com/aheckmann/gridform\n\nmodule.exports = function(app, collections){\n    \n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////                USER        ////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////   \n\napp.get ('/profile', function(req,res) {\n    var uid = req.session.userid,\n        udata = req.session.userdata || {};\n        \n    console.log ('/profile uid ['+uid+'] : ' + JSON.stringify (udata));\n    collections.groups_collection.find().toArray( function (err, groups) {\n        console.log ('/profile groups : ' + JSON.stringify (groups));\n        //res.render('profile.ejs', { layout: false, locals: {  feedid: whatid, udata: udata } });\n        res.render('profile.hogan', { layout: false, locals: {  me: udata, groups: groups } });\n\t});\n});\n\napp.get('/media/:filename', function (req,res) {\n    var gs = new mongodb.GridStore(collections.db, new ObjectID(req.params.filename), 'r');\n    gs.open(function(err, gs){\n        gs.stream([autoclose=false]).pipe(res);\n    });\n\n});\n\napp.post ('/profile', function(req,res) {\n    \n    /*\n    var options = { db: collections.db };\n    var form = gridform(options);\n    */\n\n    var uid = new ObjectID ();\n\n    var incomingForm = new formidable.IncomingForm();\n\n    // overwrite this method if you are interested in directly accessing the multipart stream\n    incomingForm.onPart = function(part) {\n        \n        console.log ('/profile onPart, partname : ['+part.name+'], part.filename :  ' + part.filename);\n        if (part.filename === undefined) {\n            // let formidable handle all non-file parts\n            return incomingForm.handlePart(part);\n        }\n \n        var form = this;\n        form._flushing++;\n        \n        \n        // open gridFS write Stream\n        var filename = 'profile-pic'+uid;\n        var options = {mode: 'w', content_type: part.mime};\n        if (form.chunk_size) options.chunk_size = this.chunk_size;\n        if (form.root) options.root = this.root;\n        if (form.metadata) options.metadata = this.metadata;\n        console.log ('/profile onPart  open gridFS ['+filename+']  : options : ' + options ); \n        var grid_ws = gridstream(collections.db).createWriteStream(options);\n        \n        form.emit('fileBegin', part.name, grid_ws);\n        \n        /*\n        var gridOnDrain = function() { \n            console.log ('/profile grid_ws.drain : resuming form');\n            form.resume();\n        }\n        grid_ws.on('drain', gridOnDrain);\n        */\n        \n        var partOnData = function(buffer) {\n            console.log ('/profile part.data:   pause form & write to grid');\n            //form.pause();\n            grid_ws.write(buffer);\n        };\n        part.on('data', partOnData);\n        \n        part.once('end', function  () {\n            console.log ('/profile part.end:  got end');\n            part.removeListener('data', partOnData);\n            //grid_ws.removeListener('drain', gridOnDrain);\n            grid_ws.once('drain', function (err) {\n                console.log ('/profile part.end: final grid_ws.drain:  ' + err);\n                if (err) return form.emit('error', err = err);\n\n                form._flushing--;\n                form.emit('file', 'fileid', grid_ws.id);\n                form._maybeEnd();\n              });\n            console.log ('/profile part.end:  end grid_ws');\n            grid_ws.end();\n          });\n    }\n\n    // we disabled the bodyParser for multipart, so using formidable to stream the data to mongo gridFS\n    incomingForm.parse(req, function (err, fields, files) {\n    \n        console.log ('/profile parse fields ' + JSON.stringify(fields));\n        console.log ('/profile parse file [' + err + '] ' + JSON.stringify(files));\n        \n        var user =  {\n            _id: uid,\n            username : fields[\"user[email]\"],\n    \t\tfullname: fields[\"user[name]\"],\n    \t\tpoints: 0,\n    \t\tbelongs_to_primary: fields[\"user[location]\"],\n            desc:  fields[\"user[description]\"],\n            picture_url: '/media/'+files[\"fileid\"],\n            completed_events: {},\n    \t    booked_training: {}\n        };\n    \n        \n        collections.users_collection.insert (user, function(err, docs) {\n            console.log ('/profile parse, saved user, send response redirect');\n            \n            collections.groups_collection.findOne({_id: user.belongs_to_primary}, function(err, item) {\n                user.outlet = item;\n                req.session.userid = user._id;\n        \t\treq.session.userdata = user;  \n                res.redirect('/#home');\n            });\n        })\n    \n    });\n  \n  \n/*   \n    var uid = req.session.username,\n        udata = req.session.userdata;\n        \n    if (!uid) {\n        res.send ('Please Login', 400);\n        return;\n    }\n \n    console.log ('/profile body :: ' + JSON.stringify(req.body));\n    console.log ('/profile body :: ' + JSON.stringify(req.files));\n    \n    var user =  {\n    \tusername : req.body.user.email,\n\t\tfullname: req.body.user.name,\n\t\tpoints: 0,\n\t\tbelongs_to_primary: req.body.user.location,\n        desc: req.body.user.description\n    };\n\n    collections.users_collection.insert (user, function(err, docs) {\n        res.redirect('/');\n    })\n*/\n});\n\n\n\n// LOGIN POST\napp.post('/ajaxlogin', function (req,res) {\n    var uname = req.body.username;\n    console.log ('ajaxlogin: Attempt to login as ' + uname + ', sessionid : ' + req.sessionID);\n    \n    if (uname) {\n        collections.users_collection.findOne({username: uname}, function(err, user) {\n    \t\t\tif (err || !user) {\n    \t\t\t\tres.send({\n    \t\t\t\t\tmessage: 'username not found: ' + uname\n    \t\t\t\t\t});\n    \t\t\t} else {\n\t\t\t\t\t\tconsole.log ('/home - got userdata : ' + JSON.stringify(user));  \n                        collections.groups_collection.findOne({_id: new ObjectID (user.belongs_to_primary)}, function(err, item) {\n                            user.outlet = item;\n    \t\t\t\t\t\t//Properties on req.session are automatically saved on a response\n    \t\t\t\t\t\treq.session.userid = user._id;\n    \t\t\t\t\t\treq.session.userdata = user;  \n    \t\t\t\t\t\tres.send({ \n    \t\t\t\t\t\t\tusername: user._id, \n    \t\t\t\t\t\t\tuserdata: user\n    \t\t\t\t\t\t\t});\n                        });\n\t\t\t\t\t}\n\t\t\t\treturn;\n    \t\n    \t});\n/*\n        queryAPI('query?q='+escape('select Id, Name, PortalPic__c, PortalID__C, Points__c, Account.Name, Account.PortalPic__c, Account.id, (select Id, Name, Attempts__c, Best_Score__c, Passed__c, First_Score__c from Game_Events__r), (select Id, Name, Type__c, Training_Availability__c  from Training_Participation__r) from Contact where PortalID__c = \\'' + uid + '\\''), null, 'GET',  function (results) {\n           console.log ('login: got query results ' + JSON.stringify(results));\n           if (results.totalSize == 1) {\n               var udata = {\n                   id:  results.records[0].Id,\n                   fullname: results.records[0].Name,\n                   points: results.records[0].Points__c, \n                   outlet : {\n                       id: results.records[0].Account.Id,\n                       name: results.records[0].Account.Name,\n                       picture_url: results.records[0].Account.PortalPic__c\n                   },\n                   picture_url: results.records[0].PortalPic__c, \n                   completed_events: {},\n                   booked_training: {}\n                   };\n                   \n                if (results.records[0].Game_Events__r) {\n                    var gameevents =  results.records[0].Game_Events__r.records;\n                    for (var gidx in gameevents) {\n                        udata.completed_events[gameevents[gidx].Name] = {\n                            id:  gameevents[gidx].Id,\n                            attempts: gameevents[gidx].Attempts__c,\n                            passed: gameevents[gidx].Passed__c,\n                            score: gameevents[gidx].First_Score__c,\n                            bestscore: gameevents[gidx].Best_Score__c\n                        };\n                    }\n                }\n                \n                 if (results.records[0].Training_Participation__r) {\n                    var tevents =  results.records[0].Training_Participation__r.records;\n                    for (var gidx in tevents) {\n                        udata.booked_training[tevents[gidx].Training_Availability__c] = {\n                            id:  tevents[gidx].Id,\n                            name:  tevents[gidx].Name,\n                            type: tevents[gidx].Type__c\n                        };\n                    }\n                }\n                \n                console.log ('/home - got userdata : ' + JSON.stringify(udata));    \n                var sess = req.session;\n                //Properties on req.session are automatically saved on a response\n                sess.username = uid;\n                sess.userdata = udata;  \n                sess.completed_events = udata.completed_events;  \n                \n//                sess.start_idx = event_index -1;\n//                createEvents(uid, udata,  null);\n//                createTrainings (uid, udata);\n                \n                res.send({ \n                        username: uid, \n                        userdata: udata\n//                        current_index: sess.start_idx\n                        });\n               \n                return;\n           } else {\n                res.send({message : 'username not found (ensure Contact exists with username in PortalID__c field): ' + uid});\n                return;\n           }\n        });\n*/\n    } else {\n\tres.send({message : 'Please enter username'});\n    }\n});\n\napp.get('/ajaxlogin', function (req,res) {\n    var uid = req.session.userid,\n        udata = req.session.userdata;\n//        start_idx = req.session.start_idx;\n        \n    console.log ('ajaxlogin: checking valid session for ' + uid + ', sessionid : ' + req.sessionID);\n        \n    if (!uid) {\n        // no active session\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} else {\n\t    // got active session\n        req.session = null; // not changing the session\n        \n        res.send({ \n                username: uid, \n                userdata: udata, \n//                current_index: start_idx\n                }); \n    }\n});\n\napp.get('/login-oauth/:provider', function (req, res) {\n    // We have nothing - redirect to the Authorization Server\n    req.session.oauth_state = req.url;\n    var oauthURL = \"https://\" + process.env.SFDC_HOSTNAME + \"/services/oauth2/authorize?response_type=code&\" +\n        \"client_id=\" + process.env.CLIENT_ID + \"&redirect_uri=\" + \"http://localhost:\" + (process.env.PORT || 3001) + \"/auth-callback\" + \"&display=touch\";\n    console.log('redirecting: '+oauthURL);\n\tres.redirect(oauthURL);  // Redirect to salesforce.com\n\tres.end();\n});\n\napp.get('/auth-callback', function (req, res) {\n    if (req.query.code){\n        // Callback from the Authorization Server\n        console.log('code: '+req.query.code);\n        \n        rest.post(\"https://\" + process.env.SFDC_HOSTNAME +'/services/oauth2/token', {\n            data: { \n                code: req.query.code,\n                grant_type: 'authorization_code',\n                client_id: process.env.CLIENT_ID,\n                redirect_uri: \"http://localhost:\" + (process.env.PORT || 3001) + \"/auth-callback\",\n                client_secret: process.env.CLIENT_SECRET\n            },\n            }).on('complete', function(data, response) {\n              if (response.statusCode == 200) {\n                req.session.oauth = data;\n                //state = req.session.oauth_state;\n                //delete req.session.oauth_state;\n                //console.log('oauth done - redirecting to '+state);\n            \tres.redirect('/v3');\n              }\n            }).on('error', function(e) {\n    \t\t\t  console.error(e);\n    \t\t});\n    }\n});\n                \n\napp.get('/logout', function (req,res) {\n    req.session.destroy();\n    res.redirect('/');\n    \n});\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////                CHAT        ////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////    \n\napp.post ('/post/:what', function (req,res) {\n    console.log ('/post/:what' + req.params.what + ' : ' + req.body.me);\n    var uid = req.session.userid,\n        udata = req.session.userdata,\n        whatid = req.params.what,\n        files = req.files,\n        filename = req.body.fname,\n        filedesc = req.body.fdesc,\n\t\tme = req.body.me;\n        \n\n        \n    if (!uid && !me) {\n\t\tconsole.log ('/post/:what : no uid');\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n    if (whatid == 'me') whatid = udata.outlet.id;\n\t\n\t//  THIS IS A WORKAROUND BEBAUSE PHONGGAP DOESNT SEND COOKIES WITH FileTransfer.upload!! NEED TO FIX\n\tvar fullname = me;\n    if (udata) fullname = udata.fullname;\n\t// END OF WORKAROUND\n    \n    if (files) {\n        \n        console.log('/post got a file' + filename);\n        console.dir(files);\n        \n        var host =  (require('url').parse(foauth.getOAuthResponse().instance_url))['host'];\n\n        rest.post('https://' + host + '/services/data/v24.0/' + 'chatter/feeds/record/'+whatid+'/feed-items', {\n          multipart: true,\n          headers: { \n              'Host': host,\n              'Authorization': 'OAuth '+foauth.getOAuthResponse().access_token,\n            },\n          data: {\n            'text':  fullname + ': '+ req.body.mess,\n            'desc': filedesc,\n            'title': filename,\n            'feedItemFileUpload': rest.file(files.attach.path, files.attach.name, null, 'binary',  files.attach.type)\n          }\n        }).on('complete', function(results) {\n            req.session = null; // method doesnt update the session\n\t\t\tconsole.log ('/post/:what : results : ' + results);\n\t\t\tconsole.log ('/post/:what : results : ' + JSON.stringify(results));\n            res.send (results);\n        });\n        \n    } else {\n\t\tconsole.log('/post no file');\n        var bdy = { \"body\" :   {\"messageSegments\" : [{\"type\": \"Text\", \"text\" : fullname + ': '+ req.body.mess  }] }};\n        queryAPI('chatter/feeds/record/'+whatid+'/feed-items', bdy, 'POST',  function(results) {\n            //console.log ('/post : results : ' + JSON.stringify(results));\n            req.session = null; // method doesnt update the session\n            res.send (results);\n       });\n    }\n});\n\napp.post ('/postcomment', function (req,res) {\n    \n    var uid = req.session.userid,\n         udata = req.session.userdata;\n         \n    if (!uid) {\n    \tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n\n\n    var bdy = { \"body\" :   {\"messageSegments\" : [{\"type\": \"Text\", \"text\" : udata.fullname + ': '+  req.body.mess  }] }};\n    queryAPI('chatter/feed-items/'+ req.body.feeditem +'/comments', bdy, 'POST', function(results) {\n        //console.log ('/postcomment : results : ' + JSON.stringify(results));\n        req.session = null; // method doesnt update the session\n        res.send (results);\n   });\n});\n\napp.get ('/feedfile', function(req,res) {\n    var uid = req.session.userid,\n        what = req.query.what,\n        mt = req.query.mt;\n        \n    if (!uid) {\n//        res.send ('Please Login', 400);\n//        return;\n\t}\n    \n    console.log ('/feedfile ' + what);\n    \n    var host =  (require('url').parse(foauth.getOAuthResponse().instance_url))['host'];\n\tres.header('Content-Type', mt);\n\tres.attachment();\n\t\n\tvar data = null;\n\thttps.get({\n\t\t\tmethod: 'get',\n\t\t\thost: host,\n\t\t\tpath: what,\n\t\t\theaders: {\n\t\t\t  'Authorization': 'OAuth '+foauth.getOAuthResponse().access_token,\n\t\t}}, function(fileres) {\n\t\t\tconsole.log(\"/feedfile : statusCode: \", fileres.statusCode);\n    \n\t\t\tfileres.on('data', function(_data) {\n\t\t\t\tconsole.log ('/feedfile : got some data');\n\t\t\t\tres.write (new Buffer(_data, 'binary'));\n\t\t\t\t\n\t\t\t});\n    \n\t\t\tfileres.on('end', function() {\n\t\t\t\tconsole.log ('/feedfile : end, send the response');\n\t\t\t\tres.end();\n\t\t\t});\n\t\t}).on('error', function(e) {\n\t\t  console.log(e);\n\t\t})\n});\n/*\napp.get ('/chat/:what', function(req,res) {\n    var uid = req.session.username,\n        udata = req.session.userdata,\n        whatid = req.params.what;\n        \n    if (!uid) {\n        res.send ('Please Login', 400);\n    \treturn;\n\t}   \n\n    res.render('chat.ejs', { layout: false, locals: {  feedid: whatid, udata: udata } });\n    //res.render('chat.ejs', { locals: {  feedid: udata.outlet.id, udata: udata } });\n});\n*/\napp.get ('/myfeed/:what', function (req,res) {\n    var uid = req.session.userid,\n        udata = req.session.userdata,\n        whatid = req.params.what;\n        \n    if (!uid) {\n        res.send ('Please Login', 400);\n\t\treturn;\n\t}\n    if (whatid == 'me') {\n    \tconsole.log ('/myfeed : query for primary_group : ' + udata.belongs_to_primary);\n    \tcollections.groups_collection.findOne({_id: new mongodb.ObjectID (udata.belongs_to_primary)}, function(err, group) {\n    \t\t\tconsole.log ('/myfeed : got primary_group_memebers : [' + err + '] : ' + JSON.stringify(group));\n    \t\t\tvar team_data = {};\n    \t\t\tteam_data.outlet  = { name: group.name, pic: group.picture_url};\n    \t\t\tteam_data.outlet_team = {};\n    \t\t\tcollections.users_collection.find({_id: { $in: group.members\t}}).toArray( function (err, users) {\n\n\t\t\t\t\t\tfor (var idx in users) {\n\t\t\t\t\t\t\tvar member =  users[idx];\n\t\t\t\t\t\t\tteam_data.outlet_team[member.fullname] =   { \n\t\t\t\t\t\t\t\tpoints: member.points,\n\t\t\t\t\t\t\t\tpic: member.picture_url\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tcollections.posts_collection.find({parentid: group._id}).toArray( function (err, posts) {\n\t\t\t\t\t\t\treq.session = null; // method doesnt update the session\n\t\t\t\t\t\t\tres.send({team: team_data, feed :posts, me: udata});\n\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t});\n    \t/*\n\t\t\tvar team_data = null,\n\t\t\tfeedres = null,\n\t\t\tsentres = false;\n\t\t\t\n\t\t\tvar sendresponse = function () {\n\t\t\t\tif (feedres && team_data && sentres==false) {\n\t\t\t\t\treq.session = null; // method doesnt update the session\n\t\t\t\t\tsentres = true;\n\t\t\t\t\tres.send({team: team_data, feed :feedres, me: udata});\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// get user names and pictures and outlets too!\n\t\t\tqueryAPI('query?q='+escape('select Name, PortalPic__c,  (select Name, Points__c, PortalPic__c from Contacts) from Account where Id = \\'' + udata.outlet.id + '\\''), null, 'GET',  function (results) {\n\t\t\t\tconsole.log ('myfeed: got team query results :' + JSON.stringify(results));\n\t\t\t\tteam_data = {};\n\t\t\t\tif (results.totalSize == 1) {\n\t\t\t\t\tteam_data.outlet  = { name: results.records[0].Name, pic: results.records[0].PortalPic__c};\n\t\t\t\t\tteam_data.outlet_team = {};\n\t\t\t\t\t\n\t\t\t\t\tif (results.records[0].Contacts) {\n\t\t\t\t\t\tvar team =  results.records[0].Contacts.records;\n\t\t\t\t\t\tfor (var m in team) {\n\t\t\t\t\t\t\tteam_data.outlet_team[team[m].Name] =   { \n\t\t\t\t\t\t\t\tpoints: team[m].Points__c,\n\t\t\t\t\t\t\t\tpic: team[m].PortalPic__c\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsendresponse();\n\t\t\t});\n\t\t\tqueryAPI('chatter/feeds/record/'+udata.outlet.id+'/feed-items', null, 'GET', function (results) {\n\t\t\t\tfeedres = results;\n\t\t\t\tsendresponse();\n\t\t\t});\n\t\t\t*/\n    } else {\n        // its a training id\n        // get user names and pictures and outlets too!\n         queryAPI('query?q='+escape('select Name, (select Contact__r.Name, Contact__r.Points__c, Contact__r.PortalPic__c from Training_Participation__r) from TR_Training_Availability__c where Id = \\'' + whatid + '\\''), null, 'GET',  function (results) {\n               console.log ('myfeed: got team query results :' + JSON.stringify(results));\n               var team_data = {};\n               if (results.totalSize == 1) {\n                    team_data.outlet  = { name: results.records[0].Name, pic: 'none'};\n                    team_data.outlet_team = {};\n                    \n                    if (results.records[0].Training_Participation__r) {\n                        var team =  results.records[0].Training_Participation__r.records;\n                        for (var m in team) {\n                             team_data.outlet_team[team[m].Contact__r.Name] =   { \n                                    points: team[m].Contact__r.Points__c,\n                                    pic: team[m].Contact__r.PortalPic__c \n                            };\n                        }\n                    }\n               }\n             queryAPI('chatter/feeds/record/'+whatid+'/feed-items', null, 'GET', function (results1) {\n                //console.log ('/myfeed : results : ' + JSON.stringify(results));\n                req.session = null; // method doesnt update the session\n                res.send({team: team_data, feed :results1, me: udata});\n            });\n        });        \n    }\n   \n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////                EVENTS        //////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////////////////// \n\nvar PASS_SCORE = 100;\napp.post('/donequiz', function (req,res) {\n    var uid = req.session.userid,\n        sid = req.sessionID,\n        udata = req.session.userdata;\n    if (!uid) {\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n\n\t\n\tvar qid = req.body.id,\n\t\t\tscore = req.body.score,\n\t\t\tquesTried = req.body.quesTried,\n\t\t\tnow_passed = (req.body.quesTried>0 && req.body.score>=PASS_SCORE),\n\t\t\taready_passed = false;\n\t\t\t\n\tconsole.log ('donequiz: complted quiz:' + uid + ', quiz : ' + qid + ', score ' + score + ', quesTried : ' + quesTried + ', now_passed : ' + now_passed);\n\t// need to of least tryed one question to register quiz attempt!\n\tif ( quesTried > 0) {\n\t\t\n        collections.events_collection.findOne({_id: qid}, function(err, record) {\n    \t\tvar alreadydone = udata.completed_events;\n    \t\tvar points_award = 0;\n\n    \t\tif (!alreadydone[qid]) { // first atemmpt\n    \t\t\talreadydone[qid] = { id: \"\", passed: now_passed, score: score, attempts: 1, bestscore: score};\n    \t\t\tpoints_award = score * record.points/100;\n    \t\t\t\n    \t\t\tudata.points = udata.points + points_award;\n    \t\t\tconsole.log ('points: adding ' + points_award + ', total now : ' + udata.points);\n    \t\t} else { // NOT first attempt\n                console.log ('donequiz: not first attempt for : ' + qid);\n    \t\t\taready_passed = alreadydone[qid].passed;\n    \t\t\talreadydone[qid].attempts = alreadydone[qid].attempts + 1;\n    \t\t\talreadydone[qid].bestscore = Math.max(alreadydone[qid].bestscore, score);\n    \t\t\tif (!aready_passed) alreadydone[qid].passed = now_passed;\n    \t\t}\n\n    \t\tconsole.log ('donequiz: create results event ' + JSON.stringify(alreadydone[qid]));\n    \t\t// create event to register new results of quiz\n            \n            \n            /* update mongo */\n            var updatesJson = {};\n            updatesJson[\"completed_events.\"+qid] = alreadydone[qid];\n            collections.users_collection.update ({username: uid}, { $set: updatesJson }, {safe:true}, function(err) {\n                        if (err) { \n                            console.warn(err.message);\n                        } else {\n                            console.log('successfully updated'); \n             \n                        \tvar event = {\n                    \t\t\titem_id: qid,\n                    \t\t\titem_type: \"QUIZ\",\n                    \t\t\tresults_data: alreadydone[qid]\n                    \t\t};\n                    \t\t//if (!events_by_user[uid]) events_by_user[uid] = [];\t\n                    \t\t//events_by_user[uid].push(event);\n                            \n                            sendEventsToSession([event], sid);\n                            \n                            req.session.userdata = udata;  // update the session store with the new values.\n                            console.log ('/donequiz - udata.completed_events : ' + JSON.stringify(req.session.userdata));\n                            res.send({points: udata.points});\n                            \n                \n                            if ((!aready_passed) && now_passed) {\n                        \t\t// just passwd new quiz, hunt for new unlocks!!\n                    \t\t\tcreateEvents (uid, udata, qid, sid);\n                    \t\t}\n                        }\n                    });\n                        \n            \n            /*\n            // send update to salesforce\n            var bdy = { Name: qid, Attempts__c: alreadydone[qid].attempts, Passed__c:  alreadydone[qid].passed, First_Score__c: alreadydone[qid].score, Best_Score__c: alreadydone[qid].bestscore};\n            var sfdc_url = 'sobjects/Game_Event__c/' + alreadydone[qid].id;\n            var httpmethod = 'PATCH'; // its an update\n            if (alreadydone[qid].id.length == 0) {\n                // its a insert, set the m/d file\n                bdy.Contact__c = udata.id;\n                bdy.Points__c = points_award;\n                httpmethod = 'POST';\n            }\n            console.log ('/donequiz - ' + sfdc_url + ' : ' + JSON.stringify(bdy));\n            \n            queryAPI(sfdc_url, bdy, httpmethod, function(response) {\n                if (response) {\n                    console.log ('/donequiz -  response : ' +  JSON.stringify(response));\n                    console.log ('/donequiz setting id ' + qid + ' : ' + response.id);\n                    alreadydone[qid].id = response.id;\n                }\n    \n                \n        \t\tvar event = {\n    //    \t\t\tindex: event_index++,\n    //    \t\t\ttimestamp: new Date().getTime(),\n    //    \t\t\tactive: true,\n        \t\t\titem_id: qid,\n        \t\t\titem_type: \"QUIZ\",\n        \t\t\tresults_data: alreadydone[qid]\n        \t\t};\n        \t\t//if (!events_by_user[uid]) events_by_user[uid] = [];\t\n        \t\t//events_by_user[uid].push(event);\n                \n                sendEventsToSession([event], sid);\n                \n                req.session.userdata = udata;  // update the session store with the new values.\n                console.log ('/donequiz - udata.completed_events : ' + JSON.stringify(req.session.userdata));\n                res.send({points: udata.points});\n                \n    \n                if ((!aready_passed) && now_passed) {\n            \t\t// just passwd new quiz, hunt for new unlocks!!\n        \t\t\tcreateEvents (uid, udata, qid, sid);\n        \t\t}\n        \t\t//notify_long_connection_by_user(uid, udata);\n            });\n            */\n        });\n\t} else {\n\t\n    \t// update points in response\n        req.session = null;\n    \tres.send({points: udata.points});\n\t}\n});\n\n\n\napp.post('/booktraining', function (req,res) {\n    var uid = req.session.username,\n        sid = req.sessionID,\n        udata = req.session.userdata;\n    if (!uid) {\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n\n\tvar tid = req.body.tid,\n\t\ttdate = req.body.tdate;\n\n\tconsole.log ('booktraining() complted quiz:' + tid + ', data : ' + tdate);\n\t// need to of least tryed one question to register quiz attempt!\n\n\t\t\n\t\tvar alreadybooked = udata.booked_training;\n        if (!alreadybooked[tid]) { // first atemmpt\n            console.log ('booktraining() first atemmpt');\n    \t\talreadybooked[tid] = { id: \"\",   type: 'Booked on ' + tdate};\n        } else {\n            // just update date\n            console.log ('booktraining() just update date');\n            alreadybooked[tid] = { id: alreadybooked[tid].id, type: 're-Booked on ' + tdate };\n        }\n        \n        // send update to salesforce\n        var bdy = { Type__c:  alreadybooked[tid].type};\n        var sfdc_url = 'sobjects/TR_Training_Participation__c/' + alreadybooked[tid].id;\n        var httpmethod = 'PATCH'; // its an update\n        if (alreadybooked[tid].id.length == 0) {\n            // its a insert, set the m/d file\n            bdy.Contact__c = udata.id;\n            bdy.Training_Availability__c = tid;\n            httpmethod = 'POST';\n        }\n        console.log ('booktraining() ' + sfdc_url + ' : ' + JSON.stringify(bdy));\n        \n        queryAPI(sfdc_url, bdy, httpmethod, function(response) {\n            if (response) {\n                console.log ('/booktraining -  response : ' +  JSON.stringify(response));\n                console.log ('/booktraining setting id ' + tid + ' : ' + response.id);\n                alreadybooked[tid].id = response.id;\n            }\n\n            \n    \t\tvar event = {\n//    \t\t\tindex: event_index++,\n//    \t\t\ttimestamp: new Date().getTime(),\n//    \t\t\tactive: true,\n    \t\t\titem_id: tid,\n    \t\t\titem_type: \"TRAINING\",\n    \t\t\tresults_data: alreadybooked[tid]\n    \t\t};\n    \t\t//if (!events_by_user[uid]) events_by_user[uid] = [];\t\n    \t\t//events_by_user[uid].push(event);\n            sendEventsToSession([event], sid);\n            \n            \n            req.session.userdata = udata;  // update the session store with the new values.\n            console.log ('/booktraining - udata.completed_events : ' + JSON.stringify(req.session.userdata));\n            res.send({points: udata.points});\n            \n\n    \t\t//notify_long_connection_by_user(uid, udata);\n        });\n\n});\n\n// If we have a LongPoll request, respond with the events. otherwise add it to the 'temp_events_pending_longpoll' array!\n//var temp_events_pending_longpoll = {};\n/*\nfunction sendEventsToSession (events, sid) {\n\tconsole.log ('sendEventsToSession()');\n\tvar req_info = long_connections_by_session[sid];\n\tif (!req_info || req_info.completed) {\n\t\tconsole.log ('sendEventsToSession() no outstanding longpolling requests for ' + sid + ', store events for pending longpoll');\n\t\tif (!temp_events_pending_longpoll[sid])    \n\t\t\ttemp_events_pending_longpoll[sid] = events;\n\t\telse\n\t\t\ttemp_events_pending_longpoll[sid].push.apply(temp_events_pending_longpoll[sid], events);\n\t} else {\n\t\tconsole.log ('sendEventsToSession() got active connection for user ' + sid + ', sending events');\n\n\t\tclearTimeout(req_info.timeoutid);\n\t\treq_info.completed = true;\n\t\treq_info.request.resume();\n\t\t//event.my_points = udata.points;\n\t\treq_info.request.session = null; // method doesnt update the session\n\t\treq_info.response.send (JSON.stringify(events));\n\t}\n}\n*/\n\n\n\nvar connectionTimeout = 25; // always send a empty '200' reponse to each open request after 60seconds.\napp.get('/longpoll/:lasteventprocessed', function (req, res) {\n    var uid = req.session.userid,\n        udata = req.session.userdata,\n        sid = req.sessionID,\n        lasteventprocessed = req.params.lasteventprocessed;\n        \n    if (!uid) {\n    \tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n    \n    if (lasteventprocessed == 0) {\n        collections.long_connections_by_session[sid] = null;\n        //temp_events_pending_longpoll[sid] = null;\n       createEvents(uid, udata,  null, req.sessionID);\n//       createTrainings (uid, udata, req.sessionID);\n    }\n    \n\tconsole.log ('longpoll() got request from ' + uid + ' last eventprocessed from url : ' + lasteventprocessed);\n\t// check the required parameters\n\n    \n\t//var event = nextEvent(uid, lasteventprocessed);\n    //var events = temp_events_pending_longpoll[sid];\n\t//if (!events) {\n\n    collections.session_events_collection.findAndModify (\n        {_id: sid},\n        [],\n    \t{$unset :{ 'events' : 1}},\n    \t{new: false, upsert: false },\n    \tfunction(err, data) {\n            if (err || !data || !data.events) {\n                console.log ('longpoll() :: no event data ('  + err + ')  : ' + JSON.stringify(data));\n            \tconsole.log ('longpoll() pause request, no event to send ' + lasteventprocessed);\n        \n        \t\tvar req_info = { request: req, response: res, lasteventprocessed: lasteventprocessed, completed: false};\n        \t\treq_info.timeoutid = setTimeout( function () { \n        \t\t\tconsole.log ('longpoll() saved req_info,  timeout pulse');\n        \t\t\treq_info.request.resume();\n        \t\t\treq_info.response.send({item_type: \"PULSE\"});\n        \t\t\treq_info.completed = true;\n        \t\t\t }, connectionTimeout * 1000); \n        \n        \t\t//if (!long_connections_by_session[sid])\n        \t\t//\tlong_connections_by_session[sid] = [];  \n        \t\tcollections.long_connections_by_session[sid] = req_info;\n        \t\treq.pause();\n        \t\tconsole.log ('longpoll() stored and paused request');\n        \n            } else {\n        \t\tconsole.log ('longpoll() send the stored event data : ' + JSON.stringify(data));\n                res.send(JSON.stringify(data.events));\n            }\n    \t});\n/*\n\t} else {\n\t\tconsole.log ('longpoll() got event to send to user');\n\t\t//event.my_points =udata.points;\n\t\t//setTimeout (function() {  // ADD A 1 SECOND DELAY - JUST FOR EFFECT!!!\n\t\tres.send(JSON.stringify(events));\n\t\tconsole.log ('longpoll sent :' + JSON.stringify(events));\n        temp_events_pending_longpoll[sid] = null;\n\t\t//}, 1000);\n\t}\n*/\n\n});\n\napp.get ('/stream/:filename', function (req,res) {\n\tvar fn = __dirname+'/public/media/' +req.params.filename;\n\tconsole.log ('stream: filename ' + fn);\n\tres.sendfile (fn);\n});\n\n\n\n\nfunction createEvents(uid, udata, just_completed, sid) {\n    console.log ('createEvents() ' + uid + ', just_completed (set if just want delta): ' + just_completed);\n\t\n    // TODO...\n    var cursor = collections.events_collection.find ({});\n    cursor.toArray( function (err, item) {\n        console.log ('createEvents() query events item (' + err + ') : ' + JSON.stringify (item)); \n        var ret_events = [];\n        for (var idx in item) {\n\n            var i = item[idx]._id;\n    \t\tvar e = item[idx];\n    \t\tconsole.log ('createEvents : checking item : ' + i + '  :: ' + JSON.stringify (e));\n    \t\t\n    \t\tvar event = null, \n    \t\t\tresults_data = null,\n    \t\t\tselected = true, \n    \t\t\tnewlyselected = false;\n    \t\t\t\t\n    \t\tfor (var needtocomplete in e.forwho.completed) {\n    \t\t\tconsole.log ('createEvents: checking prereq for event, required : ' + needtocomplete + ', is it in ' + JSON.stringify(udata.completed_events) );\n    \t\t\tif (just_completed == needtocomplete ) {\n    \t\t\t\tnewlyselected = true;\n    \t\t\t}\n    \t\t\tvar hascompleted = udata.completed_events[needtocomplete];\n    \t\t\tif ((!hascompleted) || hascompleted.passed == false) {\n    \t\t\t//if (! (needtocomplete in users_collection[user].completed_events)) {\n    \t\t\t\tselected = false; break;\n    \t\t\t}\n    \t\t}\n    \t\tif (((!selected) || (just_completed != null && newlyselected == false))) {\n                console.log ('not selected');\n    \t\t} else {\n                // 100 points for just getting a new event\n        \t    //udata.points = udata.points + 50;\n        \t\t//console.log ('createEvents: points: adding ' + '50' + ', total now : ' + udata.points);\n        \n        \t\tvar event = {\n            //\t\t\tindex: event_index++,\n            //\t\t\ttimestamp: new Date().getTime(),\n            //\t\t\tactive: true,\n            \t\t\titem_id: i,\n            \t\t\titem_type: e.type,\n            \t\t\titem_data: e,\n            \t\t\tresults_data: udata.completed_events[i]\n        \t\t    };\n        \t\t//if (!events_by_user[uid])\tevents_by_user[uid] = [];\t\n        \t\t//events_by_user[uid].push(event);\n        \t\tconsole.log('createEvents: ADDED EVENT  [' + event.item_id +'], event_data ' + JSON.stringify(event.item_data) + ', results_data ' + JSON.stringify(event.results_data)  + ', newlyselected : '+ newlyselected);\n                ret_events.push (event);\n    \t\t}\n        }\n        sendEventsToSession(ret_events, sid);\n    });\n}\n\nfunction createTrainings (uid, udata, sid) {\n    console.log ('createTrainings :' + uid);\n     queryAPI('query?q='+escape('select Id, Name, Description__c, Start_date__c, Total_Participations__c, TR_Training__r.Content_Reference__c  , Training_Categories__c  from TR_Training_Availability__c where Account__c = \\'' + udata.outlet.id + '\\''), null, 'GET',  function (results) {\n           console.log ('createTrainings: got  query results :' + JSON.stringify(results));\n            if (results.totalSize >= 1) {\n                var ret_events = [];\n                for (var m in results.records) {\n                    var trec = results.records[m];\n                    \n                    var event = {\n    //                \t\tindex: event_index++,\n    //            \t\t\ttimestamp: new Date().getTime(),\n    //            \t\t\tactive: true,\n                \t\t\titem_id: trec.Id,\n                \t\t\titem_type: 'TRAINING',\n                \t\t\titem_data: {\n                                name: trec.Name,\n                        \t\tdesc: trec.Description__c,\n                    \t\t\tinfo: trec.Total_Participations__c\n                                },\n            \t\t\t    results_data: udata.booked_training[trec.Id]\n            \t\t    };\n//                    if (!events_by_user[uid])    events_by_user[uid] = [];\t\n//            \t\tevents_by_user[uid].push(event);\n                    console.log('createTrainings: ADDED EVENT [' + JSON.stringify(event));\n                    ret_events.push(event);\n                    \n                }\n//              notify_long_connection_by_user(uid, udata);\n                sendEventsToSession(ret_events, sid);\n           }\n     });\n}\n\n\n\nfunction sendEventsToSession (events, sid) {\n\tconsole.log ('sendEventsToSession() [' + sid + '] : '+ events.length);\n    var req_info = collections.long_connections_by_session[sid];\n    if (!req_info || req_info.completed) { \n        console.log ('sendEventsToSession() : save events to database & message all dynos to see if they have a longpoll for that session');\n\t    collections.session_events_collection.update ({_id: sid}, {$pushAll :{'events' :  events}}, {upsert: true}, function(err, data) {\n\t\t\tconsole.log ('sendEventsToSession, created event data on session : [' + err + '] : ' + data);\n\t\t\tcollections.longpoll_exchange.publish ('#', {type: 'NEW_EVENT_DATA', sessionid: sid}, { contentType: 'application/json'});\n    \t});\n    } else {\n        clearTimeout(req_info.timeoutid);\n    \treq_info.completed = true;\n    \treq_info.request.resume();\n    \t//event.my_points = udata.points;\n    \treq_info.request.session = null; // method doesnt update the session\n\t\treq_info.response.send (JSON.stringify(events));\n    }\n}\n\n\n\n\n\n}"]],"start1":0,"start2":0,"length1":0,"length2":38269}]],"length":38269,"saved":false}
{"contributors":[],"silentsave":false,"ts":1347486588670,"patch":[[{"diffs":[[1,"var rest = require('restler'),\n    mongodb = require('mongodb'),\n    ObjectID = require('mongodb').ObjectID,\n    gridform = require('gridform'),\n    formidable = require('formidable'),\n    gridstream = require('gridfs-stream'); // https://github.com/aheckmann/gridform\n\nmodule.exports = function(app, collections){\n    \n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////                USER        ////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////   \n\napp.get ('/profile', function(req,res) {\n    var uid = req.session.userid,\n        udata = req.session.userdata || {};\n        \n    console.log ('/profile uid ['+uid+'] : ' + JSON.stringify (udata));\n    collections.groups_collection.find().toArray( function (err, groups) {\n        console.log ('/profile groups : ' + JSON.stringify (groups));\n        //res.render('profile.ejs', { layout: false, locals: {  feedid: whatid, udata: udata } });\n        res.render('profile.hogan', { layout: false, locals: {  me: udata, groups: groups } });\n\t});\n});\n\napp.get('/media/:filename', function (req,res) {\n    var gs = new mongodb.GridStore(collections.db, new ObjectID(req.params.filename), 'r');\n    gs.open(function(err, gs){\n        gs.stream([autoclose=false]).pipe(res);\n    });\n\n});\n\napp.post ('/profile', function(req,res) {\n    \n    /*\n    var options = { db: collections.db };\n    var form = gridform(options);\n    */\n\n    var uid = new ObjectID ();\n\n    var incomingForm = new formidable.IncomingForm();\n\n    // overwrite this method if you are interested in directly accessing the multipart stream\n    incomingForm.onPart = function(part) {\n        \n        console.log ('/profile onPart, partname : ['+part.name+'], part.filename :  ' + part.filename);\n        if (part.filename === undefined) {\n            // let formidable handle all non-file parts\n            return incomingForm.handlePart(part);\n        }\n \n        var form = this;\n        form._flushing++;\n        \n        \n        // open gridFS write Stream\n        var filename = 'profile-pic'+uid;\n        var options = {mode: 'w', content_type: part.mime};\n        if (form.chunk_size) options.chunk_size = this.chunk_size;\n        if (form.root) options.root = this.root;\n        if (form.metadata) options.metadata = this.metadata;\n        console.log ('/profile onPart  open gridFS ['+filename+']  : options : ' + options ); \n        var grid_ws = gridstream(collections.db).createWriteStream(options);\n        \n        form.emit('fileBegin', part.name, grid_ws);\n        \n        /*\n        var gridOnDrain = function() { \n            console.log ('/profile grid_ws.drain : resuming form');\n            form.resume();\n        }\n        grid_ws.on('drain', gridOnDrain);\n        */\n        \n        var partOnData = function(buffer) {\n            console.log ('/profile part.data:   pause form & write to grid');\n            //form.pause();\n            grid_ws.write(buffer);\n        };\n        part.on('data', partOnData);\n        \n        part.once('end', function  () {\n            console.log ('/profile part.end:  got end');\n            part.removeListener('data', partOnData);\n            //grid_ws.removeListener('drain', gridOnDrain);\n            grid_ws.once('drain', function (err) {\n                console.log ('/profile part.end: final grid_ws.drain:  ' + err);\n                if (err) return form.emit('error', err = err);\n\n                form._flushing--;\n                form.emit('file', 'fileid', grid_ws.id);\n                form._maybeEnd();\n              });\n            console.log ('/profile part.end:  end grid_ws');\n            grid_ws.end();\n          });\n    }\n\n    // we disabled the bodyParser for multipart, so using formidable to stream the data to mongo gridFS\n    incomingForm.parse(req, function (err, fields, files) {\n    \n        console.log ('/profile parse fields ' + JSON.stringify(fields));\n        console.log ('/profile parse file [' + err + '] ' + JSON.stringify(files));\n        \n        var user =  {\n            _id: uid,\n            username : fields[\"user[email]\"],\n    \t\tfullname: fields[\"user[name]\"],\n    \t\tpoints: 0,\n    \t\tbelongs_to_primary: fields[\"user[location]\"],\n            desc:  fields[\"user[description]\"],\n            picture_url: '/media/'+files[\"fileid\"],\n            completed_events: {},\n    \t    booked_training: {}\n        };\n    \n        \n        collections.users_collection.insert (user, function(err, docs) {\n            console.log ('/profile parse, saved user, send response redirect');\n            \n            collections.groups_collection.findOne({_id: user.belongs_to_primary}, function(err, item) {\n                user.outlet = item;\n                req.session.userid = user._id;\n        \t\treq.session.userdata = user;  \n                res.redirect('/#home');\n            });\n        })\n    \n    });\n  \n  \n/*   \n    var uid = req.session.username,\n        udata = req.session.userdata;\n        \n    if (!uid) {\n        res.send ('Please Login', 400);\n        return;\n    }\n \n    console.log ('/profile body :: ' + JSON.stringify(req.body));\n    console.log ('/profile body :: ' + JSON.stringify(req.files));\n    \n    var user =  {\n    \tusername : req.body.user.email,\n\t\tfullname: req.body.user.name,\n\t\tpoints: 0,\n\t\tbelongs_to_primary: req.body.user.location,\n        desc: req.body.user.description\n    };\n\n    collections.users_collection.insert (user, function(err, docs) {\n        res.redirect('/');\n    })\n*/\n});\n\n\n\n// LOGIN POST\napp.post('/ajaxlogin', function (req,res) {\n    var uname = req.body.username;\n    console.log ('ajaxlogin: Attempt to login as ' + uname + ', sessionid : ' + req.sessionID);\n    \n    if (uname) {\n        collections.users_collection.findOne({username: uname}, function(err, user) {\n    \t\t\tif (err || !user) {\n    \t\t\t\tres.send({\n    \t\t\t\t\tmessage: 'username not found: ' + uname\n    \t\t\t\t\t});\n    \t\t\t} else {\n\t\t\t\t\t\tconsole.log ('/home - got userdata : ' + JSON.stringify(user));  \n                        collections.groups_collection.findOne({_id: new ObjectID (user.belongs_to_primary)}, function(err, item) {\n                            user.outlet = item;\n    \t\t\t\t\t\t//Properties on req.session are automatically saved on a response\n    \t\t\t\t\t\treq.session.userid = user._id;\n    \t\t\t\t\t\treq.session.userdata = user;  \n    \t\t\t\t\t\tres.send({ \n    \t\t\t\t\t\t\tusername: user._id, \n    \t\t\t\t\t\t\tuserdata: user\n    \t\t\t\t\t\t\t});\n                        });\n\t\t\t\t\t}\n\t\t\t\treturn;\n    \t\n    \t});\n/*\n        queryAPI('query?q='+escape('select Id, Name, PortalPic__c, PortalID__C, Points__c, Account.Name, Account.PortalPic__c, Account.id, (select Id, Name, Attempts__c, Best_Score__c, Passed__c, First_Score__c from Game_Events__r), (select Id, Name, Type__c, Training_Availability__c  from Training_Participation__r) from Contact where PortalID__c = \\'' + uid + '\\''), null, 'GET',  function (results) {\n           console.log ('login: got query results ' + JSON.stringify(results));\n           if (results.totalSize == 1) {\n               var udata = {\n                   id:  results.records[0].Id,\n                   fullname: results.records[0].Name,\n                   points: results.records[0].Points__c, \n                   outlet : {\n                       id: results.records[0].Account.Id,\n                       name: results.records[0].Account.Name,\n                       picture_url: results.records[0].Account.PortalPic__c\n                   },\n                   picture_url: results.records[0].PortalPic__c, \n                   completed_events: {},\n                   booked_training: {}\n                   };\n                   \n                if (results.records[0].Game_Events__r) {\n                    var gameevents =  results.records[0].Game_Events__r.records;\n                    for (var gidx in gameevents) {\n                        udata.completed_events[gameevents[gidx].Name] = {\n                            id:  gameevents[gidx].Id,\n                            attempts: gameevents[gidx].Attempts__c,\n                            passed: gameevents[gidx].Passed__c,\n                            score: gameevents[gidx].First_Score__c,\n                            bestscore: gameevents[gidx].Best_Score__c\n                        };\n                    }\n                }\n                \n                 if (results.records[0].Training_Participation__r) {\n                    var tevents =  results.records[0].Training_Participation__r.records;\n                    for (var gidx in tevents) {\n                        udata.booked_training[tevents[gidx].Training_Availability__c] = {\n                            id:  tevents[gidx].Id,\n                            name:  tevents[gidx].Name,\n                            type: tevents[gidx].Type__c\n                        };\n                    }\n                }\n                \n                console.log ('/home - got userdata : ' + JSON.stringify(udata));    \n                var sess = req.session;\n                //Properties on req.session are automatically saved on a response\n                sess.username = uid;\n                sess.userdata = udata;  \n                sess.completed_events = udata.completed_events;  \n                \n//                sess.start_idx = event_index -1;\n//                createEvents(uid, udata,  null);\n//                createTrainings (uid, udata);\n                \n                res.send({ \n                        username: uid, \n                        userdata: udata\n//                        current_index: sess.start_idx\n                        });\n               \n                return;\n           } else {\n                res.send({message : 'username not found (ensure Contact exists with username in PortalID__c field): ' + uid});\n                return;\n           }\n        });\n*/\n    } else {\n\tres.send({message : 'Please enter username'});\n    }\n});\n\napp.get('/ajaxlogin', function (req,res) {\n    var uid = req.session.userid,\n        udata = req.session.userdata;\n//        start_idx = req.session.start_idx;\n        \n    console.log ('ajaxlogin: checking valid session for ' + uid + ', sessionid : ' + req.sessionID);\n        \n    if (!uid) {\n        // no active session\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} else {\n\t    // got active session\n        req.session = null; // not changing the session\n        \n        res.send({ \n                username: uid, \n                userdata: udata, \n//                current_index: start_idx\n                }); \n    }\n});\n\napp.get('/login-oauth/:provider', function (req, res) {\n    // We have nothing - redirect to the Authorization Server\n    req.session.oauth_state = req.url;\n    var oauthURL = \"https://\" + process.env.SFDC_HOSTNAME + \"/services/oauth2/authorize?response_type=code&\" +\n        \"client_id=\" + process.env.CLIENT_ID + \"&redirect_uri=\" + \"http://localhost:\" + (process.env.PORT || 3001) + \"/auth-callback\" + \"&display=touch\";\n    console.log('redirecting: '+oauthURL);\n\tres.redirect(oauthURL);  // Redirect to salesforce.com\n\tres.end();\n});\n\napp.get('/auth-callback', function (req, res) {\n    if (req.query.code){\n        // Callback from the Authorization Server\n        console.log('code: '+req.query.code);\n        \n        rest.post(\"https://\" + process.env.SFDC_HOSTNAME +'/services/oauth2/token', {\n            data: { \n                code: req.query.code,\n                grant_type: 'authorization_code',\n                client_id: process.env.CLIENT_ID,\n                redirect_uri: \"http://localhost:\" + (process.env.PORT || 3001) + \"/auth-callback\",\n                client_secret: process.env.CLIENT_SECRET\n            },\n            }).on('complete', function(data, response) {\n              if (response.statusCode == 200) {\n                req.session.oauth = data;\n                //state = req.session.oauth_state;\n                //delete req.session.oauth_state;\n                //console.log('oauth done - redirecting to '+state);\n            \tres.redirect('/v3');\n              }\n            }).on('error', function(e) {\n    \t\t\t  console.error(e);\n    \t\t});\n    }\n});\n                \n\napp.get('/logout', function (req,res) {\n    console.error('logout called');\n    req.session.destroy();\n    //res.redirect('/');\n    res.end();\n    \n});\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////                CHAT        ////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////    \n\napp.post ('/post/:what', function (req,res) {\n    console.log ('/post/:what' + req.params.what + ' : ' + req.body.me);\n    var uid = req.session.userid,\n        udata = req.session.userdata,\n        whatid = req.params.what,\n        files = req.files,\n        filename = req.body.fname,\n        filedesc = req.body.fdesc,\n\t\tme = req.body.me;\n        \n\n        \n    if (!uid && !me) {\n\t\tconsole.log ('/post/:what : no uid');\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n    if (whatid == 'me') whatid = udata.outlet.id;\n\t\n\t//  THIS IS A WORKAROUND BEBAUSE PHONGGAP DOESNT SEND COOKIES WITH FileTransfer.upload!! NEED TO FIX\n\tvar fullname = me;\n    if (udata) fullname = udata.fullname;\n\t// END OF WORKAROUND\n    \n    if (files) {\n        \n        console.log('/post got a file' + filename);\n        console.dir(files);\n        \n        var host =  (require('url').parse(foauth.getOAuthResponse().instance_url))['host'];\n\n        rest.post('https://' + host + '/services/data/v24.0/' + 'chatter/feeds/record/'+whatid+'/feed-items', {\n          multipart: true,\n          headers: { \n              'Host': host,\n              'Authorization': 'OAuth '+foauth.getOAuthResponse().access_token,\n            },\n          data: {\n            'text':  fullname + ': '+ req.body.mess,\n            'desc': filedesc,\n            'title': filename,\n            'feedItemFileUpload': rest.file(files.attach.path, files.attach.name, null, 'binary',  files.attach.type)\n          }\n        }).on('complete', function(results) {\n            req.session = null; // method doesnt update the session\n\t\t\tconsole.log ('/post/:what : results : ' + results);\n\t\t\tconsole.log ('/post/:what : results : ' + JSON.stringify(results));\n            res.send (results);\n        });\n        \n    } else {\n\t\tconsole.log('/post no file');\n        var bdy = { \"body\" :   {\"messageSegments\" : [{\"type\": \"Text\", \"text\" : fullname + ': '+ req.body.mess  }] }};\n        queryAPI('chatter/feeds/record/'+whatid+'/feed-items', bdy, 'POST',  function(results) {\n            //console.log ('/post : results : ' + JSON.stringify(results));\n            req.session = null; // method doesnt update the session\n            res.send (results);\n       });\n    }\n});\n\napp.post ('/postcomment', function (req,res) {\n    \n    var uid = req.session.userid,\n         udata = req.session.userdata;\n         \n    if (!uid) {\n    \tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n\n\n    var bdy = { \"body\" :   {\"messageSegments\" : [{\"type\": \"Text\", \"text\" : udata.fullname + ': '+  req.body.mess  }] }};\n    queryAPI('chatter/feed-items/'+ req.body.feeditem +'/comments', bdy, 'POST', function(results) {\n        //console.log ('/postcomment : results : ' + JSON.stringify(results));\n        req.session = null; // method doesnt update the session\n        res.send (results);\n   });\n});\n\napp.get ('/feedfile', function(req,res) {\n    var uid = req.session.userid,\n        what = req.query.what,\n        mt = req.query.mt;\n        \n    if (!uid) {\n//        res.send ('Please Login', 400);\n//        return;\n\t}\n    \n    console.log ('/feedfile ' + what);\n    \n    var host =  (require('url').parse(foauth.getOAuthResponse().instance_url))['host'];\n\tres.header('Content-Type', mt);\n\tres.attachment();\n\t\n\tvar data = null;\n\thttps.get({\n\t\t\tmethod: 'get',\n\t\t\thost: host,\n\t\t\tpath: what,\n\t\t\theaders: {\n\t\t\t  'Authorization': 'OAuth '+foauth.getOAuthResponse().access_token,\n\t\t}}, function(fileres) {\n\t\t\tconsole.log(\"/feedfile : statusCode: \", fileres.statusCode);\n    \n\t\t\tfileres.on('data', function(_data) {\n\t\t\t\tconsole.log ('/feedfile : got some data');\n\t\t\t\tres.write (new Buffer(_data, 'binary'));\n\t\t\t\t\n\t\t\t});\n    \n\t\t\tfileres.on('end', function() {\n\t\t\t\tconsole.log ('/feedfile : end, send the response');\n\t\t\t\tres.end();\n\t\t\t});\n\t\t}).on('error', function(e) {\n\t\t  console.log(e);\n\t\t})\n});\n/*\napp.get ('/chat/:what', function(req,res) {\n    var uid = req.session.username,\n        udata = req.session.userdata,\n        whatid = req.params.what;\n        \n    if (!uid) {\n        res.send ('Please Login', 400);\n    \treturn;\n\t}   \n\n    res.render('chat.ejs', { layout: false, locals: {  feedid: whatid, udata: udata } });\n    //res.render('chat.ejs', { locals: {  feedid: udata.outlet.id, udata: udata } });\n});\n*/\napp.get ('/myfeed/:what', function (req,res) {\n    var uid = req.session.userid,\n        udata = req.session.userdata,\n        whatid = req.params.what;\n        \n    if (!uid) {\n        res.send ('Please Login', 400);\n\t\treturn;\n\t}\n    if (whatid == 'me') {\n    \tconsole.log ('/myfeed : query for primary_group : ' + udata.belongs_to_primary);\n    \tcollections.groups_collection.findOne({_id: new mongodb.ObjectID (udata.belongs_to_primary)}, function(err, group) {\n    \t\t\tconsole.log ('/myfeed : got primary_group_memebers : [' + err + '] : ' + JSON.stringify(group));\n    \t\t\tvar team_data = {};\n    \t\t\tteam_data.outlet  = { name: group.name, pic: group.picture_url};\n    \t\t\tteam_data.outlet_team = {};\n    \t\t\tcollections.users_collection.find({_id: { $in: group.members\t}}).toArray( function (err, users) {\n\n\t\t\t\t\t\tfor (var idx in users) {\n\t\t\t\t\t\t\tvar member =  users[idx];\n\t\t\t\t\t\t\tteam_data.outlet_team[member.fullname] =   { \n\t\t\t\t\t\t\t\tpoints: member.points,\n\t\t\t\t\t\t\t\tpic: member.picture_url\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tcollections.posts_collection.find({parentid: group._id}).toArray( function (err, posts) {\n\t\t\t\t\t\t\treq.session = null; // method doesnt update the session\n\t\t\t\t\t\t\tres.send({team: team_data, feed :posts, me: udata});\n\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t});\n    \t/*\n\t\t\tvar team_data = null,\n\t\t\tfeedres = null,\n\t\t\tsentres = false;\n\t\t\t\n\t\t\tvar sendresponse = function () {\n\t\t\t\tif (feedres && team_data && sentres==false) {\n\t\t\t\t\treq.session = null; // method doesnt update the session\n\t\t\t\t\tsentres = true;\n\t\t\t\t\tres.send({team: team_data, feed :feedres, me: udata});\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// get user names and pictures and outlets too!\n\t\t\tqueryAPI('query?q='+escape('select Name, PortalPic__c,  (select Name, Points__c, PortalPic__c from Contacts) from Account where Id = \\'' + udata.outlet.id + '\\''), null, 'GET',  function (results) {\n\t\t\t\tconsole.log ('myfeed: got team query results :' + JSON.stringify(results));\n\t\t\t\tteam_data = {};\n\t\t\t\tif (results.totalSize == 1) {\n\t\t\t\t\tteam_data.outlet  = { name: results.records[0].Name, pic: results.records[0].PortalPic__c};\n\t\t\t\t\tteam_data.outlet_team = {};\n\t\t\t\t\t\n\t\t\t\t\tif (results.records[0].Contacts) {\n\t\t\t\t\t\tvar team =  results.records[0].Contacts.records;\n\t\t\t\t\t\tfor (var m in team) {\n\t\t\t\t\t\t\tteam_data.outlet_team[team[m].Name] =   { \n\t\t\t\t\t\t\t\tpoints: team[m].Points__c,\n\t\t\t\t\t\t\t\tpic: team[m].PortalPic__c\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsendresponse();\n\t\t\t});\n\t\t\tqueryAPI('chatter/feeds/record/'+udata.outlet.id+'/feed-items', null, 'GET', function (results) {\n\t\t\t\tfeedres = results;\n\t\t\t\tsendresponse();\n\t\t\t});\n\t\t\t*/\n    } else {\n        // its a training id\n        // get user names and pictures and outlets too!\n         queryAPI('query?q='+escape('select Name, (select Contact__r.Name, Contact__r.Points__c, Contact__r.PortalPic__c from Training_Participation__r) from TR_Training_Availability__c where Id = \\'' + whatid + '\\''), null, 'GET',  function (results) {\n               console.log ('myfeed: got team query results :' + JSON.stringify(results));\n               var team_data = {};\n               if (results.totalSize == 1) {\n                    team_data.outlet  = { name: results.records[0].Name, pic: 'none'};\n                    team_data.outlet_team = {};\n                    \n                    if (results.records[0].Training_Participation__r) {\n                        var team =  results.records[0].Training_Participation__r.records;\n                        for (var m in team) {\n                             team_data.outlet_team[team[m].Contact__r.Name] =   { \n                                    points: team[m].Contact__r.Points__c,\n                                    pic: team[m].Contact__r.PortalPic__c \n                            };\n                        }\n                    }\n               }\n             queryAPI('chatter/feeds/record/'+whatid+'/feed-items', null, 'GET', function (results1) {\n                //console.log ('/myfeed : results : ' + JSON.stringify(results));\n                req.session = null; // method doesnt update the session\n                res.send({team: team_data, feed :results1, me: udata});\n            });\n        });        \n    }\n   \n});\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////                EVENTS        //////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////////////////// \n\nvar PASS_SCORE = 100;\napp.post('/donequiz', function (req,res) {\n    var uid = req.session.userid,\n        sid = req.sessionID,\n        udata = req.session.userdata;\n    if (!uid) {\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n\n\t\n\tvar qid = req.body.id,\n\t\t\tscore = req.body.score,\n\t\t\tquesTried = req.body.quesTried,\n\t\t\tnow_passed = (req.body.quesTried>0 && req.body.score>=PASS_SCORE),\n\t\t\taready_passed = false;\n\t\t\t\n\tconsole.log ('donequiz: complted quiz:' + uid + ', quiz : ' + qid + ', score ' + score + ', quesTried : ' + quesTried + ', now_passed : ' + now_passed);\n\t// need to of least tryed one question to register quiz attempt!\n\tif ( quesTried > 0) {\n\t\t\n        collections.events_collection.findOne({_id: qid}, function(err, record) {\n    \t\tvar alreadydone = udata.completed_events;\n    \t\tvar points_award = 0;\n\n    \t\tif (!alreadydone[qid]) { // first atemmpt\n    \t\t\talreadydone[qid] = { id: \"\", passed: now_passed, score: score, attempts: 1, bestscore: score};\n    \t\t\tpoints_award = score * record.points/100;\n    \t\t\t\n    \t\t\tudata.points = udata.points + points_award;\n    \t\t\tconsole.log ('points: adding ' + points_award + ', total now : ' + udata.points);\n    \t\t} else { // NOT first attempt\n                console.log ('donequiz: not first attempt for : ' + qid);\n    \t\t\taready_passed = alreadydone[qid].passed;\n    \t\t\talreadydone[qid].attempts = alreadydone[qid].attempts + 1;\n    \t\t\talreadydone[qid].bestscore = Math.max(alreadydone[qid].bestscore, score);\n    \t\t\tif (!aready_passed) alreadydone[qid].passed = now_passed;\n    \t\t}\n\n    \t\tconsole.log ('donequiz: create results event ' + JSON.stringify(alreadydone[qid]));\n    \t\t// create event to register new results of quiz\n            \n            \n            /* update mongo */\n            var updatesJson = {};\n            updatesJson[\"completed_events.\"+qid] = alreadydone[qid];\n            collections.users_collection.update ({username: uid}, { $set: updatesJson }, {safe:true}, function(err) {\n                        if (err) { \n                            console.warn(err.message);\n                        } else {\n                            console.log('successfully updated'); \n             \n                        \tvar event = {\n                    \t\t\titem_id: qid,\n                    \t\t\titem_type: \"QUIZ\",\n                    \t\t\tresults_data: alreadydone[qid]\n                    \t\t};\n                    \t\t//if (!events_by_user[uid]) events_by_user[uid] = [];\t\n                    \t\t//events_by_user[uid].push(event);\n                            \n                            sendEventsToSession([event], sid);\n                            \n                            req.session.userdata = udata;  // update the session store with the new values.\n                            console.log ('/donequiz - udata.completed_events : ' + JSON.stringify(req.session.userdata));\n                            res.send({points: udata.points});\n                            \n                \n                            if ((!aready_passed) && now_passed) {\n                        \t\t// just passwd new quiz, hunt for new unlocks!!\n                    \t\t\tcreateEvents (uid, udata, qid, sid);\n                    \t\t}\n                        }\n                    });\n                        \n            \n            /*\n            // send update to salesforce\n            var bdy = { Name: qid, Attempts__c: alreadydone[qid].attempts, Passed__c:  alreadydone[qid].passed, First_Score__c: alreadydone[qid].score, Best_Score__c: alreadydone[qid].bestscore};\n            var sfdc_url = 'sobjects/Game_Event__c/' + alreadydone[qid].id;\n            var httpmethod = 'PATCH'; // its an update\n            if (alreadydone[qid].id.length == 0) {\n                // its a insert, set the m/d file\n                bdy.Contact__c = udata.id;\n                bdy.Points__c = points_award;\n                httpmethod = 'POST';\n            }\n            console.log ('/donequiz - ' + sfdc_url + ' : ' + JSON.stringify(bdy));\n            \n            queryAPI(sfdc_url, bdy, httpmethod, function(response) {\n                if (response) {\n                    console.log ('/donequiz -  response : ' +  JSON.stringify(response));\n                    console.log ('/donequiz setting id ' + qid + ' : ' + response.id);\n                    alreadydone[qid].id = response.id;\n                }\n    \n                \n        \t\tvar event = {\n    //    \t\t\tindex: event_index++,\n    //    \t\t\ttimestamp: new Date().getTime(),\n    //    \t\t\tactive: true,\n        \t\t\titem_id: qid,\n        \t\t\titem_type: \"QUIZ\",\n        \t\t\tresults_data: alreadydone[qid]\n        \t\t};\n        \t\t//if (!events_by_user[uid]) events_by_user[uid] = [];\t\n        \t\t//events_by_user[uid].push(event);\n                \n                sendEventsToSession([event], sid);\n                \n                req.session.userdata = udata;  // update the session store with the new values.\n                console.log ('/donequiz - udata.completed_events : ' + JSON.stringify(req.session.userdata));\n                res.send({points: udata.points});\n                \n    \n                if ((!aready_passed) && now_passed) {\n            \t\t// just passwd new quiz, hunt for new unlocks!!\n        \t\t\tcreateEvents (uid, udata, qid, sid);\n        \t\t}\n        \t\t//notify_long_connection_by_user(uid, udata);\n            });\n            */\n        });\n\t} else {\n\t\n    \t// update points in response\n        req.session = null;\n    \tres.send({points: udata.points});\n\t}\n});\n\n\n\napp.post('/booktraining', function (req,res) {\n    var uid = req.session.username,\n        sid = req.sessionID,\n        udata = req.session.userdata;\n    if (!uid) {\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n\n\tvar tid = req.body.tid,\n\t\ttdate = req.body.tdate;\n\n\tconsole.log ('booktraining() complted quiz:' + tid + ', data : ' + tdate);\n\t// need to of least tryed one question to register quiz attempt!\n\n\t\t\n\t\tvar alreadybooked = udata.booked_training;\n        if (!alreadybooked[tid]) { // first atemmpt\n            console.log ('booktraining() first atemmpt');\n    \t\talreadybooked[tid] = { id: \"\",   type: 'Booked on ' + tdate};\n        } else {\n            // just update date\n            console.log ('booktraining() just update date');\n            alreadybooked[tid] = { id: alreadybooked[tid].id, type: 're-Booked on ' + tdate };\n        }\n        \n        // send update to salesforce\n        var bdy = { Type__c:  alreadybooked[tid].type};\n        var sfdc_url = 'sobjects/TR_Training_Participation__c/' + alreadybooked[tid].id;\n        var httpmethod = 'PATCH'; // its an update\n        if (alreadybooked[tid].id.length == 0) {\n            // its a insert, set the m/d file\n            bdy.Contact__c = udata.id;\n            bdy.Training_Availability__c = tid;\n            httpmethod = 'POST';\n        }\n        console.log ('booktraining() ' + sfdc_url + ' : ' + JSON.stringify(bdy));\n        \n        queryAPI(sfdc_url, bdy, httpmethod, function(response) {\n            if (response) {\n                console.log ('/booktraining -  response : ' +  JSON.stringify(response));\n                console.log ('/booktraining setting id ' + tid + ' : ' + response.id);\n                alreadybooked[tid].id = response.id;\n            }\n\n            \n    \t\tvar event = {\n//    \t\t\tindex: event_index++,\n//    \t\t\ttimestamp: new Date().getTime(),\n//    \t\t\tactive: true,\n    \t\t\titem_id: tid,\n    \t\t\titem_type: \"TRAINING\",\n    \t\t\tresults_data: alreadybooked[tid]\n    \t\t};\n    \t\t//if (!events_by_user[uid]) events_by_user[uid] = [];\t\n    \t\t//events_by_user[uid].push(event);\n            sendEventsToSession([event], sid);\n            \n            \n            req.session.userdata = udata;  // update the session store with the new values.\n            console.log ('/booktraining - udata.completed_events : ' + JSON.stringify(req.session.userdata));\n            res.send({points: udata.points});\n            \n\n    \t\t//notify_long_connection_by_user(uid, udata);\n        });\n\n});\n\n// If we have a LongPoll request, respond with the events. otherwise add it to the 'temp_events_pending_longpoll' array!\n//var temp_events_pending_longpoll = {};\n/*\nfunction sendEventsToSession (events, sid) {\n\tconsole.log ('sendEventsToSession()');\n\tvar req_info = long_connections_by_session[sid];\n\tif (!req_info || req_info.completed) {\n\t\tconsole.log ('sendEventsToSession() no outstanding longpolling requests for ' + sid + ', store events for pending longpoll');\n\t\tif (!temp_events_pending_longpoll[sid])    \n\t\t\ttemp_events_pending_longpoll[sid] = events;\n\t\telse\n\t\t\ttemp_events_pending_longpoll[sid].push.apply(temp_events_pending_longpoll[sid], events);\n\t} else {\n\t\tconsole.log ('sendEventsToSession() got active connection for user ' + sid + ', sending events');\n\n\t\tclearTimeout(req_info.timeoutid);\n\t\treq_info.completed = true;\n\t\treq_info.request.resume();\n\t\t//event.my_points = udata.points;\n\t\treq_info.request.session = null; // method doesnt update the session\n\t\treq_info.response.send (JSON.stringify(events));\n\t}\n}\n*/\n\n\n\nvar connectionTimeout = 25; // always send a empty '200' reponse to each open request after 60seconds.\napp.get('/longpoll/:lasteventprocessed', function (req, res) {\n    var uid = req.session.userid,\n        udata = req.session.userdata,\n        sid = req.sessionID,\n        lasteventprocessed = req.params.lasteventprocessed;\n        \n    if (!uid) {\n    \tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n    \n    if (lasteventprocessed == 0) {\n        collections.long_connections_by_session[sid] = null;\n        //temp_events_pending_longpoll[sid] = null;\n       createEvents(uid, udata,  null, req.sessionID);\n//       createTrainings (uid, udata, req.sessionID);\n    }\n    \n\tconsole.log ('longpoll() got request from ' + uid + ' last eventprocessed from url : ' + lasteventprocessed);\n\t// check the required parameters\n\n    \n\t//var event = nextEvent(uid, lasteventprocessed);\n    //var events = temp_events_pending_longpoll[sid];\n\t//if (!events) {\n\n    collections.session_events_collection.findAndModify (\n        {_id: sid},\n        [],\n    \t{$unset :{ 'events' : 1}},\n    \t{new: false, upsert: false },\n    \tfunction(err, data) {\n            if (err || !data || !data.events) {\n                console.log ('longpoll() :: no event data ('  + err + ')  : ' + JSON.stringify(data));\n            \tconsole.log ('longpoll() pause request, no event to send ' + lasteventprocessed);\n        \n        \t\tvar req_info = { request: req, response: res, lasteventprocessed: lasteventprocessed, completed: false};\n        \t\treq_info.timeoutid = setTimeout( function () { \n        \t\t\tconsole.log ('longpoll() saved req_info,  timeout pulse');\n        \t\t\treq_info.request.resume();\n        \t\t\treq_info.response.send({item_type: \"PULSE\"});\n        \t\t\treq_info.completed = true;\n        \t\t\t }, connectionTimeout * 1000); \n        \n        \t\t//if (!long_connections_by_session[sid])\n        \t\t//\tlong_connections_by_session[sid] = [];  \n        \t\tcollections.long_connections_by_session[sid] = req_info;\n        \t\treq.pause();\n        \t\tconsole.log ('longpoll() stored and paused request');\n        \n            } else {\n        \t\tconsole.log ('longpoll() send the stored event data : ' + JSON.stringify(data));\n                res.send(JSON.stringify(data.events));\n            }\n    \t});\n/*\n\t} else {\n\t\tconsole.log ('longpoll() got event to send to user');\n\t\t//event.my_points =udata.points;\n\t\t//setTimeout (function() {  // ADD A 1 SECOND DELAY - JUST FOR EFFECT!!!\n\t\tres.send(JSON.stringify(events));\n\t\tconsole.log ('longpoll sent :' + JSON.stringify(events));\n        temp_events_pending_longpoll[sid] = null;\n\t\t//}, 1000);\n\t}\n*/\n\n});\n\napp.get ('/stream/:filename', function (req,res) {\n\tvar fn = __dirname+'/public/media/' +req.params.filename;\n\tconsole.log ('stream: filename ' + fn);\n\tres.sendfile (fn);\n});\n\n\n\n\nfunction createEvents(uid, udata, just_completed, sid) {\n    console.log ('createEvents() ' + uid + ', just_completed (set if just want delta): ' + just_completed);\n\t\n    // TODO...\n    var cursor = collections.events_collection.find ({});\n    cursor.toArray( function (err, item) {\n        console.log ('createEvents() query events item (' + err + ') : ' + JSON.stringify (item)); \n        var ret_events = [];\n        for (var idx in item) {\n\n            var i = item[idx]._id;\n    \t\tvar e = item[idx];\n    \t\tconsole.log ('createEvents : checking item : ' + i + '  :: ' + JSON.stringify (e));\n    \t\t\n    \t\tvar event = null, \n    \t\t\tresults_data = null,\n    \t\t\tselected = true, \n    \t\t\tnewlyselected = false;\n    \t\t\t\t\n    \t\tfor (var needtocomplete in e.forwho.completed) {\n    \t\t\tconsole.log ('createEvents: checking prereq for event, required : ' + needtocomplete + ', is it in ' + JSON.stringify(udata.completed_events) );\n    \t\t\tif (just_completed == needtocomplete ) {\n    \t\t\t\tnewlyselected = true;\n    \t\t\t}\n    \t\t\tvar hascompleted = udata.completed_events[needtocomplete];\n    \t\t\tif ((!hascompleted) || hascompleted.passed == false) {\n    \t\t\t//if (! (needtocomplete in users_collection[user].completed_events)) {\n    \t\t\t\tselected = false; break;\n    \t\t\t}\n    \t\t}\n    \t\tif (((!selected) || (just_completed != null && newlyselected == false))) {\n                console.log ('not selected');\n    \t\t} else {\n                // 100 points for just getting a new event\n        \t    //udata.points = udata.points + 50;\n        \t\t//console.log ('createEvents: points: adding ' + '50' + ', total now : ' + udata.points);\n        \n        \t\tvar event = {\n            //\t\t\tindex: event_index++,\n            //\t\t\ttimestamp: new Date().getTime(),\n            //\t\t\tactive: true,\n            \t\t\titem_id: i,\n            \t\t\titem_type: e.type,\n            \t\t\titem_data: e,\n            \t\t\tresults_data: udata.completed_events[i]\n        \t\t    };\n        \t\t//if (!events_by_user[uid])\tevents_by_user[uid] = [];\t\n        \t\t//events_by_user[uid].push(event);\n        \t\tconsole.log('createEvents: ADDED EVENT  [' + event.item_id +'], event_data ' + JSON.stringify(event.item_data) + ', results_data ' + JSON.stringify(event.results_data)  + ', newlyselected : '+ newlyselected);\n                ret_events.push (event);\n    \t\t}\n        }\n        sendEventsToSession(ret_events, sid);\n    });\n}\n\nfunction createTrainings (uid, udata, sid) {\n    console.log ('createTrainings :' + uid);\n     queryAPI('query?q='+escape('select Id, Name, Description__c, Start_date__c, Total_Participations__c, TR_Training__r.Content_Reference__c  , Training_Categories__c  from TR_Training_Availability__c where Account__c = \\'' + udata.outlet.id + '\\''), null, 'GET',  function (results) {\n           console.log ('createTrainings: got  query results :' + JSON.stringify(results));\n            if (results.totalSize >= 1) {\n                var ret_events = [];\n                for (var m in results.records) {\n                    var trec = results.records[m];\n                    \n                    var event = {\n    //                \t\tindex: event_index++,\n    //            \t\t\ttimestamp: new Date().getTime(),\n    //            \t\t\tactive: true,\n                \t\t\titem_id: trec.Id,\n                \t\t\titem_type: 'TRAINING',\n                \t\t\titem_data: {\n                                name: trec.Name,\n                        \t\tdesc: trec.Description__c,\n                    \t\t\tinfo: trec.Total_Participations__c\n                                },\n            \t\t\t    results_data: udata.booked_training[trec.Id]\n            \t\t    };\n//                    if (!events_by_user[uid])    events_by_user[uid] = [];\t\n//            \t\tevents_by_user[uid].push(event);\n                    console.log('createTrainings: ADDED EVENT [' + JSON.stringify(event));\n                    ret_events.push(event);\n                    \n                }\n//              notify_long_connection_by_user(uid, udata);\n                sendEventsToSession(ret_events, sid);\n           }\n     });\n}\n\n\n\nfunction sendEventsToSession (events, sid) {\n\tconsole.log ('sendEventsToSession() [' + sid + '] : '+ events.length);\n    var req_info = collections.long_connections_by_session[sid];\n    if (!req_info || req_info.completed) { \n        console.log ('sendEventsToSession() : save events to database & message all dynos to see if they have a longpoll for that session');\n\t    collections.session_events_collection.update ({_id: sid}, {$pushAll :{'events' :  events}}, {upsert: true}, function(err, data) {\n\t\t\tconsole.log ('sendEventsToSession, created event data on session : [' + err + '] : ' + data);\n\t\t\tcollections.longpoll_exchange.publish ('#', {type: 'NEW_EVENT_DATA', sessionid: sid}, { contentType: 'application/json'});\n    \t});\n    } else {\n        clearTimeout(req_info.timeoutid);\n    \treq_info.completed = true;\n    \treq_info.request.resume();\n    \t//event.my_points = udata.points;\n    \treq_info.request.session = null; // method doesnt update the session\n\t\treq_info.response.send (JSON.stringify(events));\n    }\n}\n\n\n\n\n\n}"]],"start1":0,"start2":0,"length1":0,"length2":38322}]],"length":38322,"saved":false}
