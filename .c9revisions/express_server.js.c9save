{"revisions":{"1336819295098":{"ts":1336819295098,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var express = require('express'),\n\t\turl = require('url'),\n\t\tmongodb = require('mongodb'),\n\t\tdb_url = url.parse(process.env.MONGO_DB),\n    mongoserver = new mongodb.Server(db_url.hostname, parseInt(db_url.port), {auto_reconnect: false}),\n    db_connector = new mongodb.Db(db_url.pathname.split('/')[1], mongoserver),\n    mongostore = require('connect-mongo')(express),\n    foauth = require('./force_oauth_pass.js'),\n    https = require('https'), \n    rest  = require('restler'),\n    amqp = require('amqp');\n\n\nvar longpoll_exchange;\nvar amqp_connection = amqp.createConnection({ host: 'localhost', port : 5672}).on('ready', function () {\n    var e = amqp_connection.exchange('longpolls', { type: 'fanout' }, function (exchange) {\n        console.log('Exchange longpolls created ' + exchange.name + ' is open');\n        \n        \n        longpoll_exchange = exchange;\n        // publish using \n        // longpoll_exchange.publish ('#', {m: 'keiths message ' + i}, { contentType: 'application/json'});\n        \n        // Create a queue for this dyno, needs to be a brand new unique queue for each dyno starting,\n        // Declaring a queue with an empty name will make the server generate a random name\n        // passive = false & durable = false (both the defaults\n        amqp_connection.queue('', function(q){\n            // Catch all messages\n            console.log('created queue : ' + q.name);\n            q.bind('longpolls', '#');\n            \n            // Receive messages\n            //\tSetting  { ack: true } the AMQP server only delivers a single message at a time. \n            //  When you want the next message, call q.shift(). When ack is false then you will receive messages as fast as they come in. \n            \n            /*  q.subscribe({ ack: true }, function (json, headers, deliveryInfo, message) { */  // subscribe with ack\n            /*  message.reject(true); // requeue = true */\n            \n            q.subscribe(function (message) {\n                // Print messages to stdout\n                console.log('subscribe message ::  ' + message.type + ' : ' + message.sessionid);\n                \n                var sid = message.sessionid;\n        \t\tvar req_info = long_connections_by_session[sid];\n        \t\tif (req_info === undefined || req_info.completed) {\n        \t\t\tconsole.log ('subscribe message ::  no outstanding longpolling requests for ' + sid + ', do nothing');\n        \t\t\t/*\n        \t\t\tif (!temp_events_pending_longpoll[sid])    \n        \t\t\t\ttemp_events_pending_longpoll[sid] = events;\n        \t\t\telse\n        \t\t\t\ttemp_events_pending_longpoll[sid].push.apply(temp_events_pending_longpoll[sid], events);\n        \t\t\t*/\n        \t\t} else {\n        \t\t\tconsole.log ('subscribe message :: got active connection for user ' + sid + ', sending events');\n                    session_events_collection.findAndModify (\n                        {_id: sid},\n                    \t[],\n                    \t{$unset :{ 'events' : 1}},\n                    \t{new: false, upsert: false },\n                    \tfunction(err, data) {\n                    \t    if (err || !data) {\n                                console.log ('subscribe message :: no event data!!'  + err + '  :: ' + JSON.stringify(data));\n                    \t    } else {\n                        \t\tconsole.log ('subscribe message ::  ' + err + '  :: ' + JSON.stringify(data));\n                        \t\tclearTimeout(req_info.timeoutid);\n                        \t\treq_info.completed = true;\n                        \t\treq_info.request.resume();\n                        \t\t//event.my_points = udata.points;\n                        \t\treq_info.request.session = null; // method doesnt update the session\n                        \t\treq_info.response.send (JSON.stringify(data.events));\n                    \t    }\n                    \t});\n                    //q.shift(); // Acknowledges the last message\n                }\n            });     // subscribe to queue\n        });     // create queue\n    });\n});\n\n\n\nvar app = express.createServer();\nvar port = process.env.PORT || 3001;\n\nvar connectionTimeout = 25; // always send a empty '200' reponse to each open request after 60seconds.\n\nvar clientId = process.env.CLIENT_ID;\nvar clientSecret = process.env.CLIENT_SECRET;\nvar sfuser = process.env.SFDC_USERNAME;\nvar sfpasswd = process.env.SFDC_PASSWORD;\n// var redirectUri = 'http://localhost:'+port+'/auth-callback'; /* NOT NEEDED FOR USERNAME/PASSWORD flow */\n\n\ndb_connector.open(function(err, db){\n\n\n\t\tif (db_url.auth != undefined) {\n        var auth = db_url.auth.split(':');\n        if (auth.length >= 2) {\n          db.authenticate(auth[0], auth[1], function () {\n        }\n      }\n      \n\t\tif (options.username && options.password) {\n\t\t\t\n\t\t\t\tself._get_collection(callback);\n\t\t\t});\n\t\t} else {\n\t\t\tself._get_collection(callback);\n\t\t}\n});\n\n/*\nvar session_events_collection;\nvar events_collection;\nvar users_collection;\nvar groups_collection;\nvar posts_collection;\nvar cb_connected = function (collection) {\n\t//(function () { var m = []; for (var p in collection) { if(typeof collection[p] == \"function\") { m.push(p); } } console.log (m); })()\n\tcollection.db.collection ('session_events', function(err,c) { \n        //c.insert ({name:'keith'}); \n        session_events_collection = c;  \n    \tfoauth.login(clientId, clientSecret , sfuser, sfpasswd, function(){\n        app.set('views', __dirname + '/views');\n        app.listen(port);\n        console.log ('Server started on port ' + port);\n    \t});\n\t});\n    collection.db.collection ('events', function(err,c) {  \n        events_collection = c;  \n    });\n     collection.db.collection ('users', function(err,c) {  \n        users_collection = c;  \n    });\n    collection.db.collection ('groups', function(err,c) {  \n        groups_collection = c;  \n    });\n    collection.db.collection ('posts', function(err,c) {  \n        posts_collection = c;  \n    });\n}\n*/\n\nvar mstore = new mongostore({ url: process.env.MONGO_DB}, cb_connected);\napp.use(express.static(__dirname + '/public'));    // middleware for static resources\napp.use(express.logger());\napp.use(express.cookieParser());\napp.use(express.session({\n\t\tsecret: \"genhashfromthis\",\n\t\tstore: mstore\n\t}));  // middleware for session management\napp.use(express.bodyParser());  // middleware for parsing a POST body into 'req.body'\n    \n    \n\n\napp.post ('/post/:what', function (req,res) {\n    console.log ('/post/:what' + req.params.what + ' : ' + req.body.me);\n\tvar uid = req.session.username,\n        udata = req.session.userdata,\n        whatid = req.params.what,\n        files = req.files,\n        filename = req.body.fname,\n        filedesc = req.body.fdesc,\n\t\tme = req.body.me;\n        \n\n        \n    if (!uid && !me) {\n\t\tconsole.log ('/post/:what : no uid');\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n    if (whatid == 'me') whatid = udata.outlet.id;\n\t\n\t//  THIS IS A WORKAROUND BEBAUSE PHONGGAP DOESNT SEND COOKIES WITH FileTransfer.upload!! NEED TO FIX\n\tvar fullname = me;\n    if (udata) fullname = udata.fullname;\n\t// END OF WORKAROUND\n    \n    if (files) {\n        \n        console.log('/post got a file' + filename);\n        console.dir(files);\n        \n        var host =  (require('url').parse(foauth.getOAuthResponse().instance_url))['host'];\n\n        rest.post('https://' + host + '/services/data/v24.0/' + 'chatter/feeds/record/'+whatid+'/feed-items', {\n          multipart: true,\n          headers: { \n              'Host': host,\n              'Authorization': 'OAuth '+foauth.getOAuthResponse().access_token,\n            },\n          data: {\n            'text':  fullname + ': '+ req.body.mess,\n            'desc': filedesc,\n            'title': filename,\n            'feedItemFileUpload': rest.file(files.attach.path, files.attach.name, null, 'binary',  files.attach.type)\n          }\n        }).on('complete', function(results) {\n            req.session = null; // method doesnt update the session\n\t\t\tconsole.log ('/post/:what : results : ' + results);\n\t\t\tconsole.log ('/post/:what : results : ' + JSON.stringify(results));\n            res.send (results);\n        });\n        \n    } else {\n\t\tconsole.log('/post no file');\n        var bdy = { \"body\" :   {\"messageSegments\" : [{\"type\": \"Text\", \"text\" : fullname + ': '+ req.body.mess  }] }};\n        queryAPI('chatter/feeds/record/'+whatid+'/feed-items', bdy, 'POST',  function(results) {\n            //console.log ('/post : results : ' + JSON.stringify(results));\n            req.session = null; // method doesnt update the session\n            res.send (results);\n       });\n    }\n});\n\napp.post ('/postcomment', function (req,res) {\n    \n    var uid = req.session.username,\n         udata = req.session.userdata;\n         \n    if (!uid) {\n    \tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n\n\n    var bdy = { \"body\" :   {\"messageSegments\" : [{\"type\": \"Text\", \"text\" : udata.fullname + ': '+  req.body.mess  }] }};\n    queryAPI('chatter/feed-items/'+ req.body.feeditem +'/comments', bdy, 'POST', function(results) {\n        //console.log ('/postcomment : results : ' + JSON.stringify(results));\n        req.session = null; // method doesnt update the session\n        res.send (results);\n   });\n});\n\napp.get ('/feedfile', function(req,res) {\n    var uid = req.session.username,\n        what = req.query.what,\n        mt = req.query.mt;\n        \n    if (!uid) {\n//        res.send ('Please Login', 400);\n//        return;\n\t}\n    \n    console.log ('/feedfile ' + what);\n    \n    var host =  (require('url').parse(foauth.getOAuthResponse().instance_url))['host'];\n\tres.header('Content-Type', mt);\n\tres.attachment();\n\t\n\tvar data = null;\n\thttps.get({\n\t\t\tmethod: 'get',\n\t\t\thost: host,\n\t\t\tpath: what,\n\t\t\theaders: {\n\t\t\t  'Authorization': 'OAuth '+foauth.getOAuthResponse().access_token,\n\t\t}}, function(fileres) {\n\t\t\tconsole.log(\"/feedfile : statusCode: \", fileres.statusCode);\n    \n\t\t\tfileres.on('data', function(_data) {\n\t\t\t\tconsole.log ('/feedfile : got some data');\n\t\t\t\tres.write (new Buffer(_data, 'binary'));\n\t\t\t\t\n\t\t\t});\n    \n\t\t\tfileres.on('end', function() {\n\t\t\t\tconsole.log ('/feedfile : end, send the response');\n\t\t\t\tres.end();\n\t\t\t});\n\t\t}).on('error', function(e) {\n\t\t  console.log(e);\n\t\t})\n});\n/*\napp.get ('/chat/:what', function(req,res) {\n    var uid = req.session.username,\n        udata = req.session.userdata,\n        whatid = req.params.what;\n        \n    if (!uid) {\n        res.send ('Please Login', 400);\n    \treturn;\n\t}   \n\n    res.render('chat.ejs', { layout: false, locals: {  feedid: whatid, udata: udata } });\n    //res.render('chat.ejs', { locals: {  feedid: udata.outlet.id, udata: udata } });\n});\n*/\napp.get ('/myfeed/:what', function (req,res) {\n    var uid = req.session.username,\n        udata = req.session.userdata,\n        whatid = req.params.what;\n        \n    if (!uid) {\n        res.send ('Please Login', 400);\n\t\treturn;\n\t}\n    if (whatid == 'me') {\n    \tconsole.log ('/myfeed : query for primary_group : ' + udata.belongs_to_primary);\n    \tgroups_collection.findOne({_id: *NEEDS TO BE A Object* udata.belongs_to_primary}, function(err, group) {\n    \t\t\tconsole.log ('/myfeed : got primary_group_memebers : [' + err + '] : ' + JSON.stringify(group));\n    \t\t\tvar team_data = {};\n    \t\t\tteam_data.outlet  = { name: group.name, pic: group.picture_url};\n    \t\t\tteam_data.outlet_team = {};\n    \t\t\tusers_collection.find({_id: { $in: group.members\t}}).toArray( function (err, users) {\n\n\t\t\t\t\t\tfor (var idx in users) {\n\t\t\t\t\t\t\tvar member =  users[idx];\n\t\t\t\t\t\t\tteam_data.outlet_team[member.fullname] =   { \n\t\t\t\t\t\t\t\tpoints: member.points,\n\t\t\t\t\t\t\t\tpic: member.picture_url\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tposts_collection.find({parentid: group._id}).toArray( function (err, posts) {\n\t\t\t\t\t\t\treq.session = null; // method doesnt update the session\n\t\t\t\t\t\t\tres.send({team: team_data, feed :posts, me: udata});\n\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t});\n    \t/*\n\t\t\tvar team_data = null,\n\t\t\tfeedres = null,\n\t\t\tsentres = false;\n\t\t\t\n\t\t\tvar sendresponse = function () {\n\t\t\t\tif (feedres && team_data && sentres==false) {\n\t\t\t\t\treq.session = null; // method doesnt update the session\n\t\t\t\t\tsentres = true;\n\t\t\t\t\tres.send({team: team_data, feed :feedres, me: udata});\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// get user names and pictures and outlets too!\n\t\t\tqueryAPI('query?q='+escape('select Name, PortalPic__c,  (select Name, Points__c, PortalPic__c from Contacts) from Account where Id = \\'' + udata.outlet.id + '\\''), null, 'GET',  function (results) {\n\t\t\t\tconsole.log ('myfeed: got team query results :' + JSON.stringify(results));\n\t\t\t\tteam_data = {};\n\t\t\t\tif (results.totalSize == 1) {\n\t\t\t\t\tteam_data.outlet  = { name: results.records[0].Name, pic: results.records[0].PortalPic__c};\n\t\t\t\t\tteam_data.outlet_team = {};\n\t\t\t\t\t\n\t\t\t\t\tif (results.records[0].Contacts) {\n\t\t\t\t\t\tvar team =  results.records[0].Contacts.records;\n\t\t\t\t\t\tfor (var m in team) {\n\t\t\t\t\t\t\tteam_data.outlet_team[team[m].Name] =   { \n\t\t\t\t\t\t\t\tpoints: team[m].Points__c,\n\t\t\t\t\t\t\t\tpic: team[m].PortalPic__c\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsendresponse();\n\t\t\t});\n\t\t\tqueryAPI('chatter/feeds/record/'+udata.outlet.id+'/feed-items', null, 'GET', function (results) {\n\t\t\t\tfeedres = results;\n\t\t\t\tsendresponse();\n\t\t\t});\n\t\t\t*/\n    } else {\n        // its a training id\n        // get user names and pictures and outlets too!\n         queryAPI('query?q='+escape('select Name, (select Contact__r.Name, Contact__r.Points__c, Contact__r.PortalPic__c from Training_Participation__r) from TR_Training_Availability__c where Id = \\'' + whatid + '\\''), null, 'GET',  function (results) {\n               console.log ('myfeed: got team query results :' + JSON.stringify(results));\n               var team_data = {};\n               if (results.totalSize == 1) {\n                    team_data.outlet  = { name: results.records[0].Name, pic: 'none'};\n                    team_data.outlet_team = {};\n                    \n                    if (results.records[0].Training_Participation__r) {\n                        var team =  results.records[0].Training_Participation__r.records;\n                        for (var m in team) {\n                             team_data.outlet_team[team[m].Contact__r.Name] =   { \n                                    points: team[m].Contact__r.Points__c,\n                                    pic: team[m].Contact__r.PortalPic__c \n                            };\n                        }\n                    }\n               }\n             queryAPI('chatter/feeds/record/'+whatid+'/feed-items', null, 'GET', function (results1) {\n                //console.log ('/myfeed : results : ' + JSON.stringify(results));\n                req.session = null; // method doesnt update the session\n                res.send({team: team_data, feed :results1, me: udata});\n            });\n        });        \n    }\n   \n});\n\n\nfunction queryAPI (resturl, mbody, httpmethod, callback) {\n    \n    //console.log ('got token : ' + JSON.stringify(foauth.getOAuthResponse()));\n\n    var data = '';\n    \n    var host =  (require('url').parse(foauth.getOAuthResponse().instance_url))['host'];\n\n    \n    var options = {\n        method: httpmethod,\n        host: host,\n        path: '/services/data/v24.0/' + resturl,\n        headers: {\n          'Host': host,\n          'Authorization': 'OAuth '+foauth.getOAuthResponse().access_token,\n          'Accept':'application/jsonrequest',\n          'Cache-Control':'no-cache,no-store,must-revalidate',\n          'Content-type':'application/json; charset=UTF-8'\n        }\n    \n    }\n    \n    //Issue the Force.com REST API call to add a Lead record\n    var req = https.request(options, function(res) {\n      console.log(\"statusCode: \", res.statusCode);\n    \n      res.on('data', function(_data) {\n        data += _data;\n      });\n    \n      res.on('end', function(d) {\n        if (res.statusCode == 401){\n          //Our Access Token has expired, and so we need to login again\n          console.log('Logging in again...');\n          foauth.login(clientId, clientSecret , sfuser, sfpasswd,  queryAPI (resturl, mbody, httpmethod, callback));\n        }else if (res.statusCode != 200 && res.statusCode != 201 && res.statusCode != 204){\n            // 200 = OK, 201 = CREATED\n          //Force.com API returned an error. Display it to the user\n          console.log('Error from Force.com:' + res.statusCode + ' : ' +data);\n          data = JSON.parse(data);\n          console.log('Error message:'+data[0].message);\n\n        }else if (res.statusCode == 204) {\n            // this is from an update call!!!\n          callback (null);\n        }else{\n          callback (JSON.parse(data));\n        }\n      });\n    \n    }).on('error', function(e) {\n      console.log(e);\n    })\n    \n    req.on('error', function(e) {\n      console.log('problem with request: ' + e.message);\n    });\n//    console.log ('sending body ' + JSON.stringify(mbody));\n    req.session = null; // method doesnt update the session\n    req.end(JSON.stringify(mbody));\n};\n\n/*\napp.get('/', function(req, res){\n    res.render('logon.ejs', { locals: {  loggedon: false, message: '' } });\n});\n//app.get('/:urlpage', function(req, res){\n//    console.log ('/:urlpage + ' + req.params.urlpage);\n//    res.render(req.params.urlpage + '.ejs', { locals: { } });\n//});\n*/\n\n// LOGIN POST\napp.post('/ajaxlogin', function (req,res) {\n    var uid = req.body.username;\n    console.log ('ajaxlogin: Attempt to login as ' + uid + ', sessionid : ' + req.sessionID);\n    \n    if (uid) {\n    \tusers_collection.findOne({username:uid}, function(err, item) {\n    \t\t\tif (err || !item) {\n    \t\t\t\tres.send({\n    \t\t\t\t\tmessage: 'username not found (ensure Contact exists with username in PortalID__c field): ' + uid\n    \t\t\t\t\t});\n    \t\t\t} else {\n\t\t\t\t\t\tconsole.log ('/home - got userdata : ' + JSON.stringify(item));    \n\t\t\t\t\t\tvar sess = req.session;\n\t\t\t\t\t\t//Properties on req.session are automatically saved on a response\n\t\t\t\t\t\tsess.username = item.username;\n\t\t\t\t\t\tsess.userdata = item;  \n\t\t\t\t\t\tsess.completed_events = item.completed_events;  \n\t\t\t\t\t\tres.send({ \n\t\t\t\t\t\t\tusername: item.username, \n\t\t\t\t\t\t\tuserdata: item\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\treturn;\n    \t\n    \t});\n/*\n        queryAPI('query?q='+escape('select Id, Name, PortalPic__c, PortalID__C, Points__c, Account.Name, Account.PortalPic__c, Account.id, (select Id, Name, Attempts__c, Best_Score__c, Passed__c, First_Score__c from Game_Events__r), (select Id, Name, Type__c, Training_Availability__c  from Training_Participation__r) from Contact where PortalID__c = \\'' + uid + '\\''), null, 'GET',  function (results) {\n           console.log ('login: got query results ' + JSON.stringify(results));\n           if (results.totalSize == 1) {\n               var udata = {\n                   id:  results.records[0].Id,\n                   fullname: results.records[0].Name,\n                   points: results.records[0].Points__c, \n                   outlet : {\n                       id: results.records[0].Account.Id,\n                       name: results.records[0].Account.Name,\n                       picture_url: results.records[0].Account.PortalPic__c\n                   },\n                   picture_url: results.records[0].PortalPic__c, \n                   completed_events: {},\n                   booked_training: {}\n                   };\n                   \n                if (results.records[0].Game_Events__r) {\n                    var gameevents =  results.records[0].Game_Events__r.records;\n                    for (var gidx in gameevents) {\n                        udata.completed_events[gameevents[gidx].Name] = {\n                            id:  gameevents[gidx].Id,\n                            attempts: gameevents[gidx].Attempts__c,\n                            passed: gameevents[gidx].Passed__c,\n                            score: gameevents[gidx].First_Score__c,\n                            bestscore: gameevents[gidx].Best_Score__c\n                        };\n                    }\n                }\n                \n                 if (results.records[0].Training_Participation__r) {\n                    var tevents =  results.records[0].Training_Participation__r.records;\n                    for (var gidx in tevents) {\n                        udata.booked_training[tevents[gidx].Training_Availability__c] = {\n                            id:  tevents[gidx].Id,\n                            name:  tevents[gidx].Name,\n                            type: tevents[gidx].Type__c\n                        };\n                    }\n                }\n                \n                console.log ('/home - got userdata : ' + JSON.stringify(udata));    \n                var sess = req.session;\n                //Properties on req.session are automatically saved on a response\n                sess.username = uid;\n                sess.userdata = udata;  \n                sess.completed_events = udata.completed_events;  \n                \n//                sess.start_idx = event_index -1;\n//                createEvents(uid, udata,  null);\n//                createTrainings (uid, udata);\n                \n                res.send({ \n                        username: uid, \n                        userdata: udata\n//                        current_index: sess.start_idx\n                        });\n               \n                return;\n           } else {\n                res.send({message : 'username not found (ensure Contact exists with username in PortalID__c field): ' + uid});\n                return;\n           }\n        });\n*/\n    } else {\n\tres.send({message : 'Please enter username'});\n    }\n});\n\napp.get('/ajaxlogin', function (req,res) {\n    var uid = req.session.username,\n        udata = req.session.userdata;\n//        start_idx = req.session.start_idx;\n        \n    console.log ('ajaxlogin: checking valid session for ' + uid + ', sessionid : ' + req.sessionID);\n        \n    if (!uid) {\n        // no active session\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} else {\n\t    // got active session\n        req.session = null; // not changing the session\n        \n        res.send({ \n                username: uid, \n                userdata: udata, \n//                current_index: start_idx\n                }); \n    }\n});\n\napp.get('/logout', function (req,res) {\n    req.session.username = null;\n    req.session.udata = null;\n    req.session.start_idx = null;\n    req.session.destroy();\n    res.redirect('/');\n    \n});\n\n//var event_index = 1;\n//var events_by_user = {};\nfunction createEvents(uid, udata, just_completed, sid) {\n\tconsole.log ('createEvents() ' + uid + ', just_completed (set if just want delta): ' + just_completed);\n\t\n    // TODO...\n    var cursor = events_collection.find ({});\n    cursor.toArray( function (err, item) {\n        console.log ('createEvents() query events item (' + err + ') : ' + JSON.stringify (item)); \n        var ret_events = [];\n        for (var idx in item) {\n\n            var i = item[idx]._id;\n    \t\tvar e = item[idx];\n    \t\tconsole.log ('createEvents : checking item : ' + i + '  :: ' + JSON.stringify (e));\n    \t\t\n    \t\tvar event = null, \n    \t\t\tresults_data = null,\n    \t\t\tselected = true, \n    \t\t\tnewlyselected = false;\n    \t\t\t\t\n    \t\tfor (var needtocomplete in e.forwho.completed) {\n    \t\t\tconsole.log ('createEvents: checking prereq for event, required : ' + needtocomplete + ', is it in ' + JSON.stringify(udata.completed_events) );\n    \t\t\tif (just_completed == needtocomplete ) {\n    \t\t\t\tnewlyselected = true;\n    \t\t\t}\n    \t\t\tvar hascompleted = udata.completed_events[needtocomplete];\n    \t\t\tif ((!hascompleted) || hascompleted.passed == false) {\n    \t\t\t//if (! (needtocomplete in users_collection[user].completed_events)) {\n    \t\t\t\tselected = false; break;\n    \t\t\t}\n    \t\t}\n    \t\tif (((!selected) || (just_completed != null && newlyselected == false))) {\n                console.log ('not selected');\n    \t\t} else {\n                // 100 points for just getting a new event\n        \t    //udata.points = udata.points + 50;\n        \t\t//console.log ('createEvents: points: adding ' + '50' + ', total now : ' + udata.points);\n        \n        \t\tvar event = {\n            //\t\t\tindex: event_index++,\n            //\t\t\ttimestamp: new Date().getTime(),\n            //\t\t\tactive: true,\n            \t\t\titem_id: i,\n            \t\t\titem_type: e.type,\n            \t\t\titem_data: e,\n            \t\t\tresults_data: udata.completed_events[i]\n        \t\t    };\n        \t\t//if (!events_by_user[uid])\tevents_by_user[uid] = [];\t\n        \t\t//events_by_user[uid].push(event);\n        \t\tconsole.log('createEvents: ADDED EVENT  [' + event.item_id +'], event_data ' + JSON.stringify(event.item_data) + ', results_data ' + JSON.stringify(event.results_data)  + ', newlyselected : '+ newlyselected);\n                ret_events.push (event);\n    \t\t}\n        }\n        sendEventsToSession(ret_events, sid);\n    });\n}\n\nfunction createTrainings (uid, udata, sid) {\n    console.log ('createTrainings :' + uid);\n     queryAPI('query?q='+escape('select Id, Name, Description__c, Start_date__c, Total_Participations__c, TR_Training__r.Content_Reference__c  , Training_Categories__c  from TR_Training_Availability__c where Account__c = \\'' + udata.outlet.id + '\\''), null, 'GET',  function (results) {\n           console.log ('createTrainings: got  query results :' + JSON.stringify(results));\n            if (results.totalSize >= 1) {\n                var ret_events = [];\n                for (var m in results.records) {\n                    var trec = results.records[m];\n                    \n                    var event = {\n    //                \t\tindex: event_index++,\n    //            \t\t\ttimestamp: new Date().getTime(),\n    //            \t\t\tactive: true,\n                \t\t\titem_id: trec.Id,\n                \t\t\titem_type: 'TRAINING',\n                \t\t\titem_data: {\n                                name: trec.Name,\n                        \t\tdesc: trec.Description__c,\n                    \t\t\tinfo: trec.Total_Participations__c\n                                },\n            \t\t\t    results_data: udata.booked_training[trec.Id]\n            \t\t    };\n//                    if (!events_by_user[uid])    events_by_user[uid] = [];\t\n//            \t\tevents_by_user[uid].push(event);\n                    console.log('createTrainings: ADDED EVENT [' + JSON.stringify(event));\n                    ret_events.push(event);\n                    \n                }\n//              notify_long_connection_by_user(uid, udata);\n                sendEventsToSession(ret_events, sid);\n           }\n     });\n}\n\n\n\nvar PASS_SCORE = 100;\napp.post('/donequiz', function (req,res) {\n    var uid = req.session.username,\n        sid = req.sessionID,\n        udata = req.session.userdata;\n\tif (!uid) {\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n\n\t\n\tvar qid = req.body.id,\n\t\t\tscore = req.body.score,\n\t\t\tquesTried = req.body.quesTried,\n\t\t\tnow_passed = (req.body.quesTried>0 && req.body.score>=PASS_SCORE),\n\t\t\taready_passed = false;\n\t\t\t\n\tconsole.log ('donequiz: complted quiz:' + uid + ', quiz : ' + qid + ', score ' + score + ', quesTried : ' + quesTried + ', now_passed : ' + now_passed);\n\t// need to of least tryed one question to register quiz attempt!\n\tif ( quesTried > 0) {\n\t\t\n\t\tvar alreadydone = udata.completed_events;\n\t\tvar points_award = 0;\n\t\tif (!alreadydone[qid]) { // first atemmpt\n\t\t\talreadydone[qid] = { id: \"\", passed: now_passed, score: score, attempts: 1, bestscore: score};\n\t\t\tpoints_award = score * event_collection[qid].points/100;\n\t\t\t\n\t\t\tudata.points = udata.points + points_award;\n\t\t\tconsole.log ('points: adding ' + points_award + ', total now : ' + udata.points);\n\t\t} else { // NOT first attempt\n            console.log ('donequiz: not first attempt for : ' + qid);\n\t\t\taready_passed = alreadydone[qid].passed;\n\t\t\talreadydone[qid].attempts = alreadydone[qid].attempts + 1;\n\t\t\talreadydone[qid].bestscore = Math.max(alreadydone[qid].bestscore, score);\n\t\t\tif (!aready_passed) alreadydone[qid].passed = now_passed;\n\t\t} \n\n\t\tconsole.log ('donequiz: create results event ' + JSON.stringify(alreadydone[qid]));\n\t\t// create event to register new results of quiz\n        \n        // send update to salesforce\n        var bdy = { Name: qid, Attempts__c: alreadydone[qid].attempts, Passed__c:  alreadydone[qid].passed, First_Score__c: alreadydone[qid].score, Best_Score__c: alreadydone[qid].bestscore};\n        var sfdc_url = 'sobjects/Game_Event__c/' + alreadydone[qid].id;\n        var httpmethod = 'PATCH'; // its an update\n        if (alreadydone[qid].id.length == 0) {\n            // its a insert, set the m/d file\n            bdy.Contact__c = udata.id;\n            bdy.Points__c = points_award;\n            httpmethod = 'POST';\n        }\n        console.log ('/donequiz - ' + sfdc_url + ' : ' + JSON.stringify(bdy));\n        \n        queryAPI(sfdc_url, bdy, httpmethod, function(response) {\n            if (response) {\n                console.log ('/donequiz -  response : ' +  JSON.stringify(response));\n                console.log ('/donequiz setting id ' + qid + ' : ' + response.id);\n                alreadydone[qid].id = response.id;\n            }\n\n            \n    \t\tvar event = {\n//    \t\t\tindex: event_index++,\n//    \t\t\ttimestamp: new Date().getTime(),\n//    \t\t\tactive: true,\n    \t\t\titem_id: qid,\n    \t\t\titem_type: \"QUIZ\",\n    \t\t\tresults_data: alreadydone[qid]\n    \t\t};\n    \t\t//if (!events_by_user[uid]) events_by_user[uid] = [];\t\n    \t\t//events_by_user[uid].push(event);\n            \n            sendEventsToSession([event], sid);\n            \n            req.session.userdata = udata;  // update the session store with the new values.\n            console.log ('/donequiz - udata.completed_events : ' + JSON.stringify(req.session.userdata));\n            res.send({points: udata.points});\n            \n\n            if ((!aready_passed) && now_passed) {\n        \t\t// just passwd new quiz, hunt for new unlocks!!\n    \t\t\tcreateEvents (uid, udata, qid, sid);\n    \t\t}\n    \t\t//notify_long_connection_by_user(uid, udata);\n        });\n\t} else {\n\t\n    \t// update points in response\n        req.session = null;\n    \tres.send({points: udata.points});\n\t}\n});\n\n\n\napp.post('/booktraining', function (req,res) {\n    var uid = req.session.username,\n        sid = req.sessionID,\n        udata = req.session.userdata;\n    if (!uid) {\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n\n\tvar tid = req.body.tid,\n\t\ttdate = req.body.tdate;\n\n\tconsole.log ('booktraining() complted quiz:' + tid + ', data : ' + tdate);\n\t// need to of least tryed one question to register quiz attempt!\n\n\t\t\n\t\tvar alreadybooked = udata.booked_training;\n        if (!alreadybooked[tid]) { // first atemmpt\n            console.log ('booktraining() first atemmpt');\n    \t\talreadybooked[tid] = { id: \"\",   type: 'Booked on ' + tdate};\n        } else {\n            // just update date\n            console.log ('booktraining() just update date');\n            alreadybooked[tid] = { id: alreadybooked[tid].id, type: 're-Booked on ' + tdate };\n        }\n        \n        // send update to salesforce\n        var bdy = { Type__c:  alreadybooked[tid].type};\n        var sfdc_url = 'sobjects/TR_Training_Participation__c/' + alreadybooked[tid].id;\n        var httpmethod = 'PATCH'; // its an update\n        if (alreadybooked[tid].id.length == 0) {\n            // its a insert, set the m/d file\n            bdy.Contact__c = udata.id;\n            bdy.Training_Availability__c = tid;\n            httpmethod = 'POST';\n        }\n        console.log ('booktraining() ' + sfdc_url + ' : ' + JSON.stringify(bdy));\n        \n        queryAPI(sfdc_url, bdy, httpmethod, function(response) {\n            if (response) {\n                console.log ('/booktraining -  response : ' +  JSON.stringify(response));\n                console.log ('/booktraining setting id ' + tid + ' : ' + response.id);\n                alreadybooked[tid].id = response.id;\n            }\n\n            \n    \t\tvar event = {\n//    \t\t\tindex: event_index++,\n//    \t\t\ttimestamp: new Date().getTime(),\n//    \t\t\tactive: true,\n    \t\t\titem_id: tid,\n    \t\t\titem_type: \"TRAINING\",\n    \t\t\tresults_data: alreadybooked[tid]\n    \t\t};\n    \t\t//if (!events_by_user[uid]) events_by_user[uid] = [];\t\n    \t\t//events_by_user[uid].push(event);\n            sendEventsToSession([event], sid);\n            \n            \n            req.session.userdata = udata;  // update the session store with the new values.\n            console.log ('/booktraining - udata.completed_events : ' + JSON.stringify(req.session.userdata));\n            res.send({points: udata.points});\n            \n\n    \t\t//notify_long_connection_by_user(uid, udata);\n        });\n\n});\n\n// If we have a LongPoll request, respond with the events. otherwise add it to the 'temp_events_pending_longpoll' array!\n//var temp_events_pending_longpoll = {};\n/*\nfunction sendEventsToSession (events, sid) {\n\tconsole.log ('sendEventsToSession()');\n\tvar req_info = long_connections_by_session[sid];\n\tif (!req_info || req_info.completed) {\n\t\tconsole.log ('sendEventsToSession() no outstanding longpolling requests for ' + sid + ', store events for pending longpoll');\n\t\tif (!temp_events_pending_longpoll[sid])    \n\t\t\ttemp_events_pending_longpoll[sid] = events;\n\t\telse\n\t\t\ttemp_events_pending_longpoll[sid].push.apply(temp_events_pending_longpoll[sid], events);\n\t} else {\n\t\tconsole.log ('sendEventsToSession() got active connection for user ' + sid + ', sending events');\n\n\t\tclearTimeout(req_info.timeoutid);\n\t\treq_info.completed = true;\n\t\treq_info.request.resume();\n\t\t//event.my_points = udata.points;\n\t\treq_info.request.session = null; // method doesnt update the session\n\t\treq_info.response.send (JSON.stringify(events));\n\t}\n}\n*/\n\nvar long_connections_by_session = {};\n\nfunction sendEventsToSession (events, sid) {\n\tconsole.log ('sendEventsToSession() [' + sid + '] : '+ events.length);\n    var req_info = long_connections_by_session[sid];\n    if (req_info === undefined || req_info.completed) { \n        console.log ('sendEventsToSession() : save events to database & message all dynos to see if they have a longpoll for that session');\n\t    session_events_collection.update ({_id: sid}, {$pushAll :{'events' :  events}}, {upsert: true}, function(err, data) {\n\t\t\tconsole.log ('sendEventsToSession, created event data on session : [' + err + '] : ' + data);\n\t\t\tlongpoll_exchange.publish ('#', {type: 'NEW_EVENT_DATA', sessionid: sid}, { contentType: 'application/json'});\n    \t});\n    } else {\n        clearTimeout(req_info.timeoutid);\n    \treq_info.completed = true;\n    \treq_info.request.resume();\n    \t//event.my_points = udata.points;\n    \treq_info.request.session = null; // method doesnt update the session\n\t\treq_info.response.send (JSON.stringify(events));\n    }\n}\n\n/**\n* GET handler for retrieving events for the user.\n*/\n\n\napp.get('/longpoll/:lasteventprocessed', function (req, res) {\n    var uid = req.session.username,\n        udata = req.session.userdata,\n        sid = req.sessionID,\n        lasteventprocessed = req.params.lasteventprocessed;\n        \n    if (!uid) {\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n    \n    if (lasteventprocessed == 0) {\n        long_connections_by_session[sid] = null;\n        //temp_events_pending_longpoll[sid] = null;\n       createEvents(uid, udata,  null, req.sessionID);\n       createTrainings (uid, udata, req.sessionID);\n    }\n    \n\tconsole.log ('longpoll() got request from ' + uid + ' last eventprocessed from url : ' + lasteventprocessed);\n\t// check the required parameters\n\n    \n\t//var event = nextEvent(uid, lasteventprocessed);\n    //var events = temp_events_pending_longpoll[sid];\n\t//if (!events) {\n\n    session_events_collection.findAndModify (\n        {_id: sid},\n        [],\n    \t{$unset :{ 'events' : 1}},\n    \t{new: false, upsert: false },\n    \tfunction(err, data) {\n            if (err || !data || !data.events) {\n                console.log ('longpoll() :: no event data ('  + err + ')  : ' + JSON.stringify(data));\n            \tconsole.log ('longpoll() pause request, no event to send ' + lasteventprocessed);\n        \n        \t\tvar req_info = { request: req, response: res, lasteventprocessed: lasteventprocessed, completed: false};\n        \t\treq_info.timeoutid = setTimeout( function () { \n        \t\t\tconsole.log ('longpoll() saved req_info,  timeout pulse');\n        \t\t\treq_info.request.resume();\n        \t\t\treq_info.response.send({item_type: \"PULSE\"});\n        \t\t\treq_info.completed = true;\n        \t\t\t }, connectionTimeout * 1000); \n        \n        \t\t//if (!long_connections_by_session[sid])\n        \t\t//\tlong_connections_by_session[sid] = [];  \n        \t\tlong_connections_by_session[sid] = req_info;\n        \t\treq.pause();\n        \t\tconsole.log ('longpoll() stored and paused request');\n        \n            } else {\n        \t\tconsole.log ('longpoll() send the stored event data : ' + JSON.stringify(data));\n                res.send(JSON.stringify(data.events));\n            }\n    \t});\n/*\n\t} else {\n\t\tconsole.log ('longpoll() got event to send to user');\n\t\t//event.my_points =udata.points;\n\t\t//setTimeout (function() {  // ADD A 1 SECOND DELAY - JUST FOR EFFECT!!!\n\t\tres.send(JSON.stringify(events));\n\t\tconsole.log ('longpoll sent :' + JSON.stringify(events));\n        temp_events_pending_longpoll[sid] = null;\n\t\t//}, 1000);\n\t}\n*/\n\n});\n\napp.get ('/stream/:filename', function (req,res) {\n\tvar fn = __dirname+'/public/media/' +req.params.filename;\n\tconsole.log ('stream: filename ' + fn);\n\tres.sendfile (fn);\n});\n\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":37144}]],"length":37144},"1336848498556":{"contributors":[],"silentsave":false,"ts":1336848498556,"patch":[[{"diffs":[[0,"ress'),\n"],[-1,"\t\t"],[1,"    "],[0,"url = re"]],"start1":26,"start2":26,"length1":18,"length2":20},{"diffs":[[0,"'url'),\n"],[-1,"\t\t"],[1,"    "],[0,"mongodb "]],"start1":52,"start2":52,"length1":18,"length2":20},{"diffs":[[0,"godb'),\n"],[-1,"\t\t"],[1,"    "],[0,"db_url ="]],"start1":86,"start2":86,"length1":18,"length2":20},{"diffs":[[0,"port), {"],[1,"\n        "],[0,"auto_rec"]],"start1":210,"start2":210,"length1":16,"length2":25},{"diffs":[[0,"t: false"],[1,"\n    "],[0,"}),\n    "]],"start1":240,"start2":240,"length1":16,"length2":21},{"diffs":[[0,"https'),"],[-1," "],[0,"\n    res"]],"start1":456,"start2":456,"length1":17,"length2":16},{"diffs":[[0,"   rest "],[-1," "],[0,"= requir"]],"start1":466,"start2":466,"length1":17,"length2":16},{"diffs":[[0,"ow */\n\n\n"],[1,"var session_events_collection;\nvar events_collection;\nvar users_collection;\nvar groups_collection;\nvar posts_collection;\n"],[0,"db_conne"]],"start1":4454,"start2":4454,"length1":16,"length2":137},{"diffs":[[0," db)"],[1," "],[0,"{\n"],[-1,"\n\n\t\t"],[1,"    \n    var got_authorised_connection = function() {\n        db.collection ('events', function(err,c) {  \n            events_collection = c;  \n        });\n         db.collection ('users', function(err,c) {  \n            users_collection = c;  \n        });\n        db.collection ('groups', function(err,c) {  \n            groups_collection = c;  \n        });\n        db.collection ('posts', function(err,c) {  \n            posts_collection = c;  \n        });\n    }\n\n    "],[0,"if ("]],"start1":4614,"start2":4614,"length1":14,"length2":481},{"diffs":[[0,"        "],[1,"  "],[0,"db.authe"]],"start1":5200,"start2":5200,"length1":16,"length2":18},{"diffs":[[0,"uth[1], "],[-1,"function () {"],[1,"got_authorised_connection);"],[0,"\n       "]],"start1":5236,"start2":5236,"length1":29,"length2":43},{"diffs":[[0,"   }"],[-1,"\n  "],[1," else {\n"],[0,"    "],[-1,"}\n"],[0,"      "],[-1,"\n\t\tif (options.username && options.password) {\n\t\t\t\n\t\t\t\tself._get_collection(callback);\n\t\t\t});\n\t\t} else {\n\t\t\tself._get_collection(callback);\n\t\t}\n});\n\n/*\nvar session_events_collection;\nvar events_collection;\nvar users_collection;\nvar groups_collection;\nvar posts_collection;"],[1," throw new Error('Failed to get credentials from db_url');\n        }\n    } else {  \n        got_authorised_connection();\n    }\n});\n\n/*"],[0,"\nvar"]],"start1":5277,"start2":5277,"length1":295,"length2":160}]],"length":37631,"saved":false},"1336849431528":{"contributors":[],"silentsave":false,"ts":1336849431528,"patch":[[{"diffs":[[0,"equire('"],[1,"./"],[0,"connect-"]],"start1":354,"start2":354,"length1":16,"length2":18},{"diffs":[[0,"unction() {\n"],[1,"        \n        \n        \n"],[0,"        db.c"]],"start1":4665,"start2":4665,"length1":24,"length2":51},{"diffs":[[0,"        });\n"],[1,"        \n        var mstore = new mongostore({ url: process.env.MONGO_DB}, cb_connected);\n"],[0,"    }\n\n    i"]],"start1":5097,"start2":5097,"length1":24,"length2":114}]],"length":37750,"saved":false},"1336849559730":{"contributors":[],"silentsave":false,"ts":1336849559730,"patch":[[{"diffs":[[0,"ore("],[-1,"{ url: process.env.MONGO_DB}, cb_connected);"],[1,"db);\n        \n        app.use(express.static(__dirname + '/public'));    // middleware for static resources\n        app.use(express.logger());\n        app.use(express.cookieParser());\n        app.use(express.session({\n            \tsecret: \"genhashfromthis\",\n        \t\tstore: mstore\n        \t}));  // middleware for session management\n        app.use(express.bodyParser());  // middleware for parsing a POST body into 'req.body'\n        app.set('views', __dirname + '/views');\n        app.listen(port);\n        console.log ('Server started on port ' + port);\n        "],[0,"\n   "]],"start1":5150,"start2":5150,"length1":52,"length2":574},{"diffs":[[0,"  });\n}\n"],[-1,"*/"],[0,"\n\nvar ms"]],"start1":7009,"start2":7009,"length1":18,"length2":16},{"diffs":[[0,"q.body'\n"],[-1,"    "],[1,"*/"],[0,"\n    \n\n\n"]],"start1":7431,"start2":7431,"length1":20,"length2":18}]],"length":38268,"saved":false},"1336849690651":{"contributors":[],"silentsave":false,"ts":1336849690651,"patch":[[{"diffs":[[0,"'mongodb'),\n"],[1,"    mongo_ObjectID = mongodb.ObjectID,\n"],[0,"    db_url ="]],"start1":82,"start2":82,"length1":24,"length2":63},{"diffs":[[0,"id: "],[-1,"*NEEDS TO BE A "],[1,"new mongo_"],[0,"Object"],[-1,"* "],[1,"ID ("],[0,"udat"]],"start1":12114,"start2":12114,"length1":31,"length2":28},{"diffs":[[0,"_primary"],[1,")"],[0,"}, funct"]],"start1":12154,"start2":12154,"length1":16,"length2":17}]],"length":38305,"saved":false},"1336850142414":{"contributors":[],"silentsave":false,"ts":1336850142414,"patch":[[{"diffs":[[0,"        app.use("],[-1,"express"],[1,"require('connect')"],[0,".bodyParser()); "]],"start1":5527,"start2":5527,"length1":39,"length2":50}]],"length":38316,"saved":false},"1336850515743":{"contributors":[],"silentsave":false,"ts":1336850515743,"patch":[[{"diffs":[[0,"e(db);\n        \n"],[1,"        // Order of these middlewares is VERY important!\n        app.use(express.logger());\n        app.use(express.bodyParser());  // middleware for parsing a POST body into 'req.body'\n"],[0,"        app.use("]],"start1":5191,"start2":5191,"length1":32,"length2":218},{"diffs":[[0,"ces\n"],[-1,"        app.use(express.logger());\n"],[0,"    "]],"start1":5483,"start2":5483,"length1":43,"length2":8},{"diffs":[[0,"    "],[-1,"app.use(require('connect').bodyParser());  // middleware for parsing a POST body into 'req.body'"],[0,""],[1,""],[0,"\n   "]],"start1":5682,"start2":5682,"length1":104,"length2":8},{"diffs":[[0,"pp.listen(port);"],[-1,""],[0,""],[1,"\n        "],[0,"\n        console"]],"start1":5744,"start2":5744,"length1":32,"length2":41}]],"length":38380,"saved":false},"1336850880034":{"contributors":[],"silentsave":false,"ts":1336850880034,"patch":[[{"diffs":[[0,"    "],[-1,"app.use(express.logger());\n        app.use(express.bodyParser());"],[1,"\n        // log the incoming request\n        app.use(express.logger());\n        \n        // serve the static resources\n        app.use(express.static(__dirname + '/public'));    // middleware for static resources\n      "],[0,"  //"]],"start1":5268,"start2":5268,"length1":73,"length2":227},{"diffs":[[0,"ess."],[-1,"static(__dirname + '/public'));"],[1,"bodyParser());  \n   "],[0,"    "],[1," "],[0,"// "],[-1,"middleware for static resourc"],[1,"process the cookies on the requ"],[0,"es"],[1,"t"],[0,"\n   "]],"start1":5567,"start2":5567,"length1":77,"length2":70},{"diffs":[[0,"eParser());\n"],[1,"        // set the request 'session' property\n"],[0,"        app."]],"start1":5663,"start2":5663,"length1":24,"length2":70},{"diffs":[[0,"gement\n        \n"],[1,"        // set the views\n"],[0,"        app.set("]],"start1":5864,"start2":5864,"length1":32,"length2":57},{"diffs":[[0,"me + '/views');\n"],[1,"        \n        // lastly, match the request with the defined routes\n        app.use(app.router);\n        \n        // start the server\n"],[0,"        app.list"]],"start1":5937,"start2":5937,"length1":32,"length2":168}]],"length":38734,"saved":false},"1336851115571":{"contributors":[],"silentsave":false,"ts":1336851115571,"patch":[[{"diffs":[[0,"ortant!\n        "],[-1,"\n"],[1,"app.configure(function(){\n    "],[0,"        // log t"]],"start1":5256,"start2":5256,"length1":33,"length2":62},{"diffs":[[0,"request\n        "],[1," "],[1,"   "],[0,"app.use(express."]],"start1":5330,"start2":5330,"length1":32,"length2":36},{"diffs":[[0,"));\n        "],[-1,"\n"],[1,"    \n "],[0,"        "],[1,"   "],[0,"// serve the"]],"start1":5373,"start2":5373,"length1":33,"length2":41},{"diffs":[[0,"tatic resources\n"],[1,"    "],[0,"        app.use("]],"start1":5416,"start2":5416,"length1":32,"length2":36},{"diffs":[[0,"ces\n        "],[1,"    "],[0,"// middlewar"]],"start1":5526,"start2":5526,"length1":24,"length2":28},{"diffs":[[0,"q.body'\n        "],[1,"   "],[1," "],[0,"app.use(express."]],"start1":5588,"start2":5588,"length1":32,"length2":36},{"diffs":[[0,"arser());  \n"],[1,"    "],[0,"        // p"]],"start1":5629,"start2":5629,"length1":24,"length2":28},{"diffs":[[0,"request\n        "],[1,"  "],[1,"  "],[0,"app.use(express."]],"start1":5683,"start2":5683,"length1":32,"length2":36},{"diffs":[[0,"eParser());\n"],[1,"    "],[0,"        // s"]],"start1":5724,"start2":5724,"length1":24,"length2":28},{"diffs":[[0,"roperty\n        "],[1,"  "],[1,"  "],[0,"app.use(express."]],"start1":5778,"start2":5778,"length1":32,"length2":36},{"diffs":[[0,"ssion({\n"],[1,"    "],[0,"        "]],"start1":5816,"start2":5816,"length1":16,"length2":20},{"diffs":[[0,"        "],[1," "],[1,"   "],[0,"\t\tstore:"]],"start1":5868,"start2":5868,"length1":16,"length2":20},{"diffs":[[0," mstore\n"],[1,"    "],[0,"        "]],"start1":5888,"start2":5888,"length1":16,"length2":20},{"diffs":[[0,"agement\n        "],[-1,"\n"],[1,"    \n    "],[0,"        // set t"]],"start1":5944,"start2":5944,"length1":33,"length2":41},{"diffs":[[0,"e views\n        "],[1,"    "],[0,"app.set('views',"]],"start1":5986,"start2":5986,"length1":32,"length2":36},{"diffs":[[0,"iews');\n        "],[1,"    "],[0,"\n        // last"]],"start1":6038,"start2":6038,"length1":32,"length2":36},{"diffs":[[0,"   \n        "],[1,"    "],[0,"// lastly, m"]],"start1":6055,"start2":6055,"length1":24,"length2":28},{"diffs":[[0," routes\n        "],[1,"   "],[1," "],[0,"app.use(app.rout"]],"start1":6116,"start2":6116,"length1":32,"length2":36},{"diffs":[[0,"outer);\n"],[1,"\n"],[0,"        "],[1,"});"],[0,"\n       "]],"start1":6149,"start2":6149,"length1":24,"length2":28},{"diffs":[[0,"sten(port);\n"],[-1,"        \n"],[0,"        cons"]],"start1":6212,"start2":6212,"length1":33,"length2":24}]],"length":38834,"saved":false},"1336851142472":{"contributors":[],"silentsave":false,"ts":1336851142472,"patch":[[{"diffs":[[0,"est\n            "],[1,"//"],[0,"app.use(express."]],"start1":5334,"start2":5334,"length1":32,"length2":34}]],"length":38836,"saved":false},"1336851194867":{"contributors":[],"silentsave":false,"ts":1336851194867,"patch":[[{"diffs":[[0,"(){\n"],[-1,"            // log the incoming request\n            //app.use(express.logger());\n"],[0,"    "]],"start1":5294,"start2":5294,"length1":89,"length2":8},{"diffs":[[0,"tatic resources\n"],[1,"            \n            // log the incoming request (not for static resources\n            app.use(express.logger());\n            \n"],[0,"            // m"]],"start1":5435,"start2":5435,"length1":32,"length2":163}]],"length":38886,"saved":false},"1336851343269":{"contributors":[],"silentsave":false,"ts":1336851343269,"patch":[[{"diffs":[[0,"   \n"],[-1,"            // middleware for parsing a POST body into 'req.body'\n            app.use(express.bodyParser());  \n"],[0,"    "]],"start1":5578,"start2":5578,"length1":119,"length2":8},{"diffs":[[0,"nt\n            \n"],[1,"            // middleware for parsing a POST body into 'req.body'\n            app.use(express.bodyParser());  \n            \n"],[0,"            // s"]],"start1":5890,"start2":5890,"length1":32,"length2":156},{"diffs":[[0," '/views');\n"],[-1,"            "],[0,"\n           "]],"start1":6099,"start2":6099,"length1":36,"length2":24}]],"length":38887,"saved":false},"1336851538605":{"contributors":[],"silentsave":false,"ts":1336851538605,"patch":[[{"diffs":[[0,"        app.use("],[-1,"express"],[1,"require('connect')"],[0,".bodyParser()); "]],"start1":5976,"start2":5976,"length1":39,"length2":50}]],"length":38898,"saved":false},"1336851782324":{"contributors":[],"silentsave":false,"ts":1336851782324,"patch":[[{"diffs":[[0,"operty\n     "],[1,"//"],[0,"       app.u"]],"start1":5720,"start2":5720,"length1":24,"length2":26},{"diffs":[[0,"sion({\n     "],[1,"//"],[0,"           \t"]],"start1":5760,"start2":5760,"length1":24,"length2":26},{"diffs":[[0,"this\",\n     "],[1,"//"],[0,"       \t\tsto"]],"start1":5806,"start2":5806,"length1":24,"length2":26},{"diffs":[[0,"mstore\n     "],[1,"//"],[0,"       \t}));"]],"start1":5836,"start2":5836,"length1":24,"length2":26}]],"length":38906,"saved":false},"1336851823062":{"contributors":[],"silentsave":false,"ts":1336851823062,"patch":[[{"diffs":[[0,"eParser());\n"],[1,"            \n"],[0,"            "]],"start1":5665,"start2":5665,"length1":24,"length2":37},{"diffs":[[0,"operty\n     "],[-1,"//"],[0,"       app.u"]],"start1":5733,"start2":5733,"length1":26,"length2":24},{"diffs":[[0,"ession({\n   "],[-1,"  //"],[0,"           \t"]],"start1":5769,"start2":5769,"length1":28,"length2":24},{"diffs":[[0,"\",\n     "],[-1,"//"],[0,"      "],[-1," "],[0,"\t\tstore:"]],"start1":5817,"start2":5817,"length1":25,"length2":22},{"diffs":[[0,"mstore\n "],[-1,"    //"],[0,"       \t"]],"start1":5840,"start2":5840,"length1":22,"length2":16}]],"length":38904,"saved":false},"1336851908531":{"contributors":[],"silentsave":false,"ts":1336851908531,"patch":[[{"diffs":[[0,"static resources"],[1,")"],[0,"\n            app"]],"start1":5513,"start2":5513,"length1":32,"length2":33},{"diffs":[[0,"use("],[-1,"require('connect')"],[1,"express"],[0,".bod"]],"start1":5995,"start2":5995,"length1":26,"length2":15}]],"length":38894,"saved":false},"1336851993413":{"contributors":[],"silentsave":false,"ts":1336851993413,"patch":[[{"diffs":[[0,"ion (req,res) {\n"],[1,"    (function () { var m = []; for (var p in req) { if(typeof req[p] == \"function\") { m.push(p); } } console.log (m); })()\n    \n"],[0,"    var uid = re"]],"start1":18913,"start2":18913,"length1":32,"length2":160}]],"length":39022,"saved":false},"1336853066219":{"contributors":[],"silentsave":false,"ts":1336853066219,"patch":[[{"diffs":[[0,"nt\n            \n"],[1,"            debugger\n"],[0,"            // m"]],"start1":5897,"start2":5897,"length1":32,"length2":53}]],"length":39043,"saved":false},"1336853075416":{"contributors":[],"silentsave":false,"ts":1336853075416,"patch":[[{"diffs":[[0,"debugger"],[1,";"],[0,"\n       "]],"start1":5925,"start2":5925,"length1":16,"length2":17}]],"length":39044,"saved":false},"1336854322086":{"contributors":[],"silentsave":false,"ts":1336854322086,"patch":[[{"diffs":[[0,"   \n"],[-1,"            debugger;\n"],[0,"    "]],"start1":5909,"start2":5909,"length1":30,"length2":8}]],"length":39022,"saved":false},"1336855277999":{"contributors":[],"silentsave":false,"ts":1336855277999,"patch":[[{"diffs":[[0,"   \n"],[-1,"            // serve the static resources\n            app.use(express.static(__dirname + '/public'));    // middleware for static resources"],[0,"\n   "]],"start1":5307,"start2":5307,"length1":147,"length2":8},{"diffs":[[0,"router);"],[1,"\n            \n            // serve the static resources\n            app.use(express.static(__dirname + '/public'));    // middleware for static resources\n            "],[0,"\n\n      "]],"start1":6069,"start2":6069,"length1":16,"length2":182}]],"length":39049,"saved":false},"1336855309382":{"contributors":[],"silentsave":false,"ts":1336855309382,"patch":[[{"diffs":[[0,"){\n            \n"],[1,"            // serve the static resources\n            app.use(express.static(__dirname + '/public'));    // middleware for static resources"],[0,"\n            \n  "]],"start1":5295,"start2":5295,"length1":32,"length2":171},{"diffs":[[0,"er);"],[-1,"\n            \n            // serve the static resources\n            app.use(express.static(__dirname + '/public'));    // middleware for static resources\n            "],[0,"\n\n  "]],"start1":6212,"start2":6212,"length1":174,"length2":8}]],"length":39022,"saved":false},"1336856447367":{"contributors":[],"silentsave":false,"ts":1336856447367,"patch":[[{"diffs":[[0,"(){\n"],[-1,"            \n            // serve the static resources\n            app.use(express.static(__dirname + '/public'));    // middleware for static resources\n            \n            // log the incoming request (not for static resources)\n            app.use(express.logger());\n            \n            // process the cookies on the request\n            app.use(express.cookieParser());\n            "],[0,"\n"],[1,""],[0,"    "]],"start1":5294,"start2":5294,"length1":401,"length2":9},{"diffs":[[0,"    "],[-1,"// middleware for parsing a POST body into 'req.body'\n            app.use(express.bodyParser());  "],[0,"\n   "]],"start1":5529,"start2":5529,"length1":106,"length2":8},{"diffs":[[0,";\n    }\n"],[-1,""],[0,"});\n\n"],[1,"// serve the static resources\napp.use(express.static(__dirname + '/public'));    // middleware for static resources\n\n// log the incoming request (not for static resources)\napp.use(express.logger());\n\n// process the cookies on the request\napp.use(express.cookieParser());\n\n// middleware for parsing a POST body into 'req.body'\napp.use(express.bodyParser());  \n\n"],[0,"/*\nvar c"]],"start1":6197,"start2":6197,"length1":21,"length2":381}]],"length":38892,"saved":false},"1336857817485":{"contributors":[],"silentsave":false,"ts":1336857817485,"patch":[[{"diffs":[[0,");\n\n"],[-1,"\n\nvar app = express.createServer();\nvar port = process.env.PORT || 3001;\n\n"],[0,"var "]],"start1":4045,"start2":4045,"length1":82,"length2":8},{"diffs":[[0,"re(db);\n"],[1,"        var app = express.createServer();\n        var port = process.env.PORT || 3001;\n"],[0,"        "]],"start1":5116,"start2":5116,"length1":16,"length2":103},{"diffs":[[0,"tion(){\n"],[-1,""],[0,""],[1,"            \n            // serve the static resources\n            app.use(express.static(__dirname + '/public'));    // middleware for static resources\n            \n            // log the incoming request (not for static resources)\n            app.use(express.logger());\n            \n            // process the cookies on the request\n            app.use(express.cookieParser());\n            "],[0,"\n       "]],"start1":5303,"start2":5303,"length1":16,"length2":408},{"diffs":[[0,"   \n            "],[-1,""],[0,""],[1,"// middleware for parsing a POST body into 'req.body'\n            app.use(express.bodyParser());  "],[0,"\n            \n  "]],"start1":5922,"start2":5922,"length1":32,"length2":130},{"diffs":[[0,"    "],[-1,"app.use(app.router"],[1,"require('./express_routes')(app"],[0,");\n\n"]],"start1":6205,"start2":6205,"length1":26,"length2":39},{"diffs":[[0,");\n\n"],[-1,"// serve the static resources\napp.use(express.static(__dirname + '/public'));    // middleware for static resources\n\n// log the incoming request (not for static resources)\napp.use(express.logger());\n\n// process the cookies on the request\napp.use(express.cookieParser());\n\n// middleware for parsing a POST body into 'req.body'\napp.use(express.bodyParser());  \n\n"],[0,"/*\nv"]],"start1":6722,"start2":6722,"length1":368,"length2":8},{"diffs":[[0," \n\n\n"],[-1,"app.post ('/post/:what', function (req,res) {\n    console.log ('/post/:what' + req.params.what + ' : ' + req.body.me);\n\tvar uid = req.session.username,\n        udata = req.session.userdata,\n        whatid = req.params.what,\n        files = req.files,\n        filename = req.body.fname,\n        filedesc = req.body.fdesc,\n\t\tme = req.body.me;\n        \n\n        \n    if (!uid && !me) {\n\t\tconsole.log ('/post/:what : no uid');\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n    if (whatid == 'me') whatid = udata.outlet.id;\n\t\n\t//  THIS IS A WORKAROUND BEBAUSE PHONGGAP DOESNT SEND COOKIES WITH FileTransfer.upload!! NEED TO FIX\n\tvar fullname = me;\n    if (udata) fullname = udata.fullname;\n\t// END OF WORKAROUND\n    \n    if (files) {\n        \n        console.log('/post got a file' + filename);\n        console.dir(files);\n        \n        var host =  (require('url').parse(foauth.getOAuthResponse().instance_url))['host'];\n\n        rest.post('https://' + host + '/services/data/v24.0/' + 'chatter/feeds/record/'+whatid+'/feed-items', {\n          multipart: true,\n          headers: { \n              'Host': host,\n              'Authorization': 'OAuth '+foauth.getOAuthResponse().access_token,\n            },\n          data: {\n            'text':  fullname + ': '+ req.body.mess,\n            'desc': filedesc,\n            'title': filename,\n            'feedItemFileUpload': rest.file(files.attach.path, files.attach.name, null, 'binary',  files.attach.type)\n          }\n        }).on('complete', function(results) {\n            req.session = null; // method doesnt update the session\n\t\t\tconsole.log ('/post/:what : results : ' + results);\n\t\t\tconsole.log ('/post/:what : results : ' + JSON.stringify(results));\n            res.send (results);\n        });\n        \n    } else {\n\t\tconsole.log('/post no file');\n        var bdy = { \"body\" :   {\"messageSegments\" : [{\"type\": \"Text\", \"text\" : fullname + ': '+ req.body.mess  }] }};\n        queryAPI('chatter/feeds/record/'+whatid+'/feed-items', bdy, 'POST',  function(results) {\n            //console.log ('/post : results : ' + JSON.stringify(results));\n            req.session = null; // method doesnt update the session\n            res.send (results);\n       });\n    }\n});\n\napp.post ('/postcomment', function (req,res) {\n    \n    var uid = req.session.username,\n         udata = req.session.userdata;\n         \n    if (!uid) {\n    \tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n\n\n    var bdy = { \"body\" :   {\"messageSegments\" : [{\"type\": \"Text\", \"text\" : udata.fullname + ': '+  req.body.mess  }] }};\n    queryAPI('chatter/feed-items/'+ req.body.feeditem +'/comments', bdy, 'POST', function(results) {\n        //console.log ('/postcomment : results : ' + JSON.stringify(results));\n        req.session = null; // method doesnt update the session\n        res.send (results);\n   });\n});\n\napp.get ('/feedfile', function(req,res) {\n    var uid = req.session.username,\n        what = req.query.what,\n        mt = req.query.mt;\n        \n    if (!uid) {\n//        res.send ('Please Login', 400);\n//        return;\n\t}\n    \n    console.log ('/feedfile ' + what);\n    \n    var host =  (require('url').parse(foauth.getOAuthResponse().instance_url))['host'];\n\tres.header('Content-Type', mt);\n\tres.attachment();\n\t\n\tvar data = null;\n\thttps.get({\n\t\t\tmethod: 'get',\n\t\t\thost: host,\n\t\t\tpath: what,\n\t\t\theaders: {\n\t\t\t  'Authorization': 'OAuth '+foauth.getOAuthResponse().access_token,\n\t\t}}, function(fileres) {\n\t\t\tconsole.log(\"/feedfile : statusCode: \", fileres.statusCode);\n    \n\t\t\tfileres.on('data', function(_data) {\n\t\t\t\tconsole.log ('/feedfile : got some data');\n\t\t\t\tres.write (new Buffer(_data, 'binary'));\n\t\t\t\t\n\t\t\t});\n    \n\t\t\tfileres.on('end', function() {\n\t\t\t\tconsole.log ('/feedfile : end, send the response');\n\t\t\t\tres.end();\n\t\t\t});\n\t\t}).on('error', function(e) {\n\t\t  console.log(e);\n\t\t})\n});\n/*\napp.get ('/chat/:what', function(req,res) {\n    var uid = req.session.username,\n        udata = req.session.userdata,\n        whatid = req.params.what;\n        \n    if (!uid) {\n        res.send ('Please Login', 400);\n    \treturn;\n\t}   \n\n    res.render('chat.ejs', { layout: false, locals: {  feedid: whatid, udata: udata } });\n    //res.render('chat.ejs', { locals: {  feedid: udata.outlet.id, udata: udata } });\n});\n*/\napp.get ('/myfeed/:what', function (req,res) {\n    var uid = req.session.username,\n        udata = req.session.userdata,\n        whatid = req.params.what;\n        \n    if (!uid) {\n        res.send ('Please Login', 400);\n\t\treturn;\n\t}\n    if (whatid == 'me') {\n    \tconsole.log ('/myfeed : query for primary_group : ' + udata.belongs_to_primary);\n    \tgroups_collection.findOne({_id: new mongo_ObjectID (udata.belongs_to_primary)}, function(err, group) {\n    \t\t\tconsole.log ('/myfeed : got primary_group_memebers : [' + err + '] : ' + JSON.stringify(group));\n    \t\t\tvar team_data = {};\n    \t\t\tteam_data.outlet  = { name: group.name, pic: group.picture_url};\n    \t\t\tteam_data.outlet_team = {};\n    \t\t\tusers_collection.find({_id: { $in: group.members\t}}).toArray( function (err, users) {\n\n\t\t\t\t\t\tfor (var idx in users) {\n\t\t\t\t\t\t\tvar member =  users[idx];\n\t\t\t\t\t\t\tteam_data.outlet_team[member.fullname] =   { \n\t\t\t\t\t\t\t\tpoints: member.points,\n\t\t\t\t\t\t\t\tpic: member.picture_url\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tposts_collection.find({parentid: group._id}).toArray( function (err, posts) {\n\t\t\t\t\t\t\treq.session = null; // method doesnt update the session\n\t\t\t\t\t\t\tres.send({team: team_data, feed :posts, me: udata});\n\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t});\n    \t/*\n\t\t\tvar team_data = null,\n\t\t\tfeedres = null,\n\t\t\tsentres = false;\n\t\t\t\n\t\t\tvar sendresponse = function () {\n\t\t\t\tif (feedres && team_data && sentres==false) {\n\t\t\t\t\treq.session = null; // method doesnt update the session\n\t\t\t\t\tsentres = true;\n\t\t\t\t\tres.send({team: team_data, feed :feedres, me: udata});\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// get user names and pictures and outlets too!\n\t\t\tqueryAPI('query?q='+escape('select Name, PortalPic__c,  (select Name, Points__c, PortalPic__c from Contacts) from Account where Id = \\'' + udata.outlet.id + '\\''), null, 'GET',  function (results) {\n\t\t\t\tconsole.log ('myfeed: got team query results :' + JSON.stringify(results));\n\t\t\t\tteam_data = {};\n\t\t\t\tif (results.totalSize == 1) {\n\t\t\t\t\tteam_data.outlet  = { name: results.records[0].Name, pic: results.records[0].PortalPic__c};\n\t\t\t\t\tteam_data.outlet_team = {};\n\t\t\t\t\t\n\t\t\t\t\tif (results.records[0].Contacts) {\n\t\t\t\t\t\tvar team =  results.records[0].Contacts.records;\n\t\t\t\t\t\tfor (var m in team) {\n\t\t\t\t\t\t\tteam_data.outlet_team[team[m].Name] =   { \n\t\t\t\t\t\t\t\tpoints: team[m].Points__c,\n\t\t\t\t\t\t\t\tpic: team[m].PortalPic__c\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsendresponse();\n\t\t\t});\n\t\t\tqueryAPI('chatter/feeds/record/'+udata.outlet.id+'/feed-items', null, 'GET', function (results) {\n\t\t\t\tfeedres = results;\n\t\t\t\tsendresponse();\n\t\t\t});\n\t\t\t*/\n    } else {\n        // its a training id\n        // get user names and pictures and outlets too!\n         queryAPI('query?q='+escape('select Name, (select Contact__r.Name, Contact__r.Points__c, Contact__r.PortalPic__c from Training_Participation__r) from TR_Training_Availability__c where Id = \\'' + whatid + '\\''), null, 'GET',  function (results) {\n               console.log ('myfeed: got team query results :' + JSON.stringify(results));\n               var team_data = {};\n               if (results.totalSize == 1) {\n                    team_data.outlet  = { name: results.records[0].Name, pic: 'none'};\n                    team_data.outlet_team = {};\n                    \n                    if (results.records[0].Training_Participation__r) {\n                        var team =  results.records[0].Training_Participation__r.records;\n                        for (var m in team) {\n                             team_data.outlet_team[team[m].Contact__r.Name] =   { \n                                    points: team[m].Contact__r.Points__c,\n                                    pic: team[m].Contact__r.PortalPic__c \n                            };\n                        }\n                    }\n               }\n             queryAPI('chatter/feeds/record/'+whatid+'/feed-items', null, 'GET', function (results1) {\n                //console.log ('/myfeed : results : ' + JSON.stringify(results));\n                req.session = null; // method doesnt update the session\n                res.send({team: team_data, feed :results1, me: udata});\n            });\n        });        \n    }\n   \n});\n\n\nfunction queryAPI (resturl, mbody, httpmethod, callback) {\n    \n    //console.log ('got token : ' + JSON.stringify(foauth.getOAuthResponse()));\n\n    var data = '';\n    \n    var host =  (require('url').parse(foauth.getOAuthResponse().instance_url))['host'];\n\n    \n    var options = {\n        method: httpmethod,\n        host: host,\n        path: '/services/data/v24.0/' + resturl,\n        headers: {\n          'Host': host,\n          'Authorization': 'OAuth '+foauth.getOAuthResponse().access_token,\n          'Accept':'application/jsonrequest',\n          'Cache-Control':'no-cache,no-store,must-revalidate',\n          'Content-type':'application/json; charset=UTF-8'\n        }\n    \n    }\n    \n    //Issue the Force.com REST API call to add a Lead record\n    var req = https.request(options, function(res) {\n      console.log(\"statusCode: \", res.statusCode);\n    \n      res.on('data', function(_data) {\n        data += _data;\n      });\n    \n      res.on('end', function(d) {\n        if (res.statusCode == 401){\n          //Our Access Token has expired, and so we need to login again\n          console.log('Logging in again...');\n          foauth.login(clientId, clientSecret , sfuser, sfpasswd,  queryAPI (resturl, mbody, httpmethod, callback));\n        }else if (res.statusCode != 200 && res.statusCode != 201 && res.statusCode != 204){\n            // 200 = OK, 201 = CREATED\n          //Force.com API returned an error. Display it to the user\n          console.log('Error from Force.com:' + res.statusCode + ' : ' +data);\n          data = JSON.parse(data);\n          console.log('Error message:'+data[0].message);\n\n        }else if (res.statusCode == 204) {\n            // this is from an update call!!!\n          callback (null);\n        }else{\n          callback (JSON.parse(data));\n        }\n      });\n    \n    }).on('error', function(e) {\n      console.log(e);\n    })\n    \n    req.on('error', function(e) {\n      console.log('problem with request: ' + e.message);\n    });\n//    console.log ('sending body ' + JSON.stringify(mbody));\n    req.session = null; // method doesnt update the session\n    req.end(JSON.stringify(mbody));\n};\n\n/*\napp.get('/', function(req, res){\n    res.render('logon.ejs', { locals: {  loggedon: false, message: '' } });\n});\n//app.get('/:urlpage', function(req, res){\n//    console.log ('/:urlpage + ' + req.params.urlpage);\n//    res.render(req.params.urlpage + '.ejs', { locals: { } });\n//});\n*/\n\n// LOGIN POST\napp.post('/ajaxlogin', function (req,res) {\n    (function () { var m = []; for (var p in req) { if(typeof req[p] == \"function\") { m.push(p); } } console.log (m); })()\n    \n    var uid = req.body.username;\n    console.log ('ajaxlogin: Attempt to login as ' + uid + ', sessionid : ' + req.sessionID);\n    \n    if (uid) {\n    \tusers_collection.findOne({username:uid}, function(err, item) {\n    \t\t\tif (err || !item) {\n    \t\t\t\tres.send({\n    \t\t\t\t\tmessage: 'username not found (ensure Contact exists with username in PortalID__c field): ' + uid\n    \t\t\t\t\t});\n    \t\t\t} else {\n\t\t\t\t\t\tconsole.log ('/home - got userdata : ' + JSON.stringify(item));    \n\t\t\t\t\t\tvar sess = req.session;\n\t\t\t\t\t\t//Properties on req.session are automatically saved on a response\n\t\t\t\t\t\tsess.username = item.username;\n\t\t\t\t\t\tsess.userdata = item;  \n\t\t\t\t\t\tsess.completed_events = item.completed_events;  \n\t\t\t\t\t\tres.send({ \n\t\t\t\t\t\t\tusername: item.username, \n\t\t\t\t\t\t\tuserdata: item\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\treturn;\n    \t\n    \t});\n/*\n        queryAPI('query?q='+escape('select Id, Name, PortalPic__c, PortalID__C, Points__c, Account.Name, Account.PortalPic__c, Account.id, (select Id, Name, Attempts__c, Best_Score__c, Passed__c, First_Score__c from Game_Events__r), (select Id, Name, Type__c, Training_Availability__c  from Training_Participation__r) from Contact where PortalID__c = \\'' + uid + '\\''), null, 'GET',  function (results) {\n           console.log ('login: got query results ' + JSON.stringify(results));\n           if (results.totalSize == 1) {\n               var udata = {\n                   id:  results.records[0].Id,\n                   fullname: results.records[0].Name,\n                   points: results.records[0].Points__c, \n                   outlet : {\n                       id: results.records[0].Account.Id,\n                       name: results.records[0].Account.Name,\n                       picture_url: results.records[0].Account.PortalPic__c\n                   },\n                   picture_url: results.records[0].PortalPic__c, \n                   completed_events: {},\n                   booked_training: {}\n                   };\n                   \n                if (results.records[0].Game_Events__r) {\n                    var gameevents =  results.records[0].Game_Events__r.records;\n                    for (var gidx in gameevents) {\n                        udata.completed_events[gameevents[gidx].Name] = {\n                            id:  gameevents[gidx].Id,\n                            attempts: gameevents[gidx].Attempts__c,\n                            passed: gameevents[gidx].Passed__c,\n                            score: gameevents[gidx].First_Score__c,\n                            bestscore: gameevents[gidx].Best_Score__c\n                        };\n                    }\n                }\n                \n                 if (results.records[0].Training_Participation__r) {\n                    var tevents =  results.records[0].Training_Participation__r.records;\n                    for (var gidx in tevents) {\n                        udata.booked_training[tevents[gidx].Training_Availability__c] = {\n                            id:  tevents[gidx].Id,\n                            name:  tevents[gidx].Name,\n                            type: tevents[gidx].Type__c\n                        };\n                    }\n                }\n                \n                console.log ('/home - got userdata : ' + JSON.stringify(udata));    \n                var sess = req.session;\n                //Properties on req.session are automatically saved on a response\n                sess.username = uid;\n                sess.userdata = udata;  \n                sess.completed_events = udata.completed_events;  \n                \n//                sess.start_idx = event_index -1;\n//                createEvents(uid, udata,  null);\n//                createTrainings (uid, udata);\n                \n                res.send({ \n                        username: uid, \n                        userdata: udata\n//                        current_index: sess.start_idx\n                        });\n               \n                return;\n           } else {\n                res.send({message : 'username not found (ensure Contact exists with username in PortalID__c field): ' + uid});\n                return;\n           }\n        });\n*/\n    } else {\n\tres.send({message : 'Please enter username'});\n    }\n});\n\napp.get('/ajaxlogin', function (req,res) {\n    var uid = req.session.username,\n        udata = req.session.userdata;\n//        start_idx = req.session.start_idx;\n        \n    console.log ('ajaxlogin: checking valid session for ' + uid + ', sessionid : ' + req.sessionID);\n        \n    if (!uid) {\n        // no active session\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} else {\n\t    // got active session\n        req.session = null; // not changing the session\n        \n        res.send({ \n                username: uid, \n                userdata: udata, \n//                current_index: start_idx\n                }); \n    }\n});\n\napp.get('/logout', function (req,res) {\n    req.session.username = null;\n    req.session.udata = null;\n    req.session.start_idx = null;\n    req.session.destroy();\n    res.redirect('/');\n    \n});\n\n//var event_index = 1;\n//var events_by_user = {};\nfunction createEvents(uid, udata, just_completed, sid) {\n\tconsole.log ('createEvents() ' + uid + ', just_completed (set if just want delta): ' + just_completed);\n\t\n    // TODO...\n    var cursor = events_collection.find ({});\n    cursor.toArray( function (err, item) {\n        console.log ('createEvents() query events item (' + err + ') : ' + JSON.stringify (item)); \n        var ret_events = [];\n        for (var idx in item) {\n\n            var i = item[idx]._id;\n    \t\tvar e = item[idx];\n    \t\tconsole.log ('createEvents : checking item : ' + i + '  :: ' + JSON.stringify (e));\n    \t\t\n    \t\tvar event = null, \n    \t\t\tresults_data = null,\n    \t\t\tselected = true, \n    \t\t\tnewlyselected = false;\n    \t\t\t\t\n    \t\tfor (var needtocomplete in e.forwho.completed) {\n    \t\t\tconsole.log ('createEvents: checking prereq for event, required : ' + needtocomplete + ', is it in ' + JSON.stringify(udata.completed_events) );\n    \t\t\tif (just_completed == needtocomplete ) {\n    \t\t\t\tnewlyselected = true;\n    \t\t\t}\n    \t\t\tvar hascompleted = udata.completed_events[needtocomplete];\n    \t\t\tif ((!hascompleted) || hascompleted.passed == false) {\n    \t\t\t//if (! (needtocomplete in users_collection[user].completed_events)) {\n    \t\t\t\tselected = false; break;\n    \t\t\t}\n    \t\t}\n    \t\tif (((!selected) || (just_completed != null && newlyselected == false))) {\n                console.log ('not selected');\n    \t\t} else {\n                // 100 points for just getting a new event\n        \t    //udata.points = udata.points + 50;\n        \t\t//console.log ('createEvents: points: adding ' + '50' + ', total now : ' + udata.points);\n        \n        \t\tvar event = {\n            //\t\t\tindex: event_index++,\n            //\t\t\ttimestamp: new Date().getTime(),\n            //\t\t\tactive: true,\n            \t\t\titem_id: i,\n            \t\t\titem_type: e.type,\n            \t\t\titem_data: e,\n            \t\t\tresults_data: udata.completed_events[i]\n        \t\t    };\n        \t\t//if (!events_by_user[uid])\tevents_by_user[uid] = [];\t\n        \t\t//events_by_user[uid].push(event);\n        \t\tconsole.log('createEvents: ADDED EVENT  [' + event.item_id +'], event_data ' + JSON.stringify(event.item_data) + ', results_data ' + JSON.stringify(event.results_data)  + ', newlyselected : '+ newlyselected);\n                ret_events.push (event);\n    \t\t}\n        }\n        sendEventsToSession(ret_events, sid);\n    });\n}\n\nfunction createTrainings (uid, udata, sid) {\n    console.log ('createTrainings :' + uid);\n     queryAPI('query?q='+escape('select Id, Name, Description__c, Start_date__c, Total_Participations__c, TR_Training__r.Content_Reference__c  , Training_Categories__c  from TR_Training_Availability__c where Account__c = \\'' + udata.outlet.id + '\\''), null, 'GET',  function (results) {\n           console.log ('createTrainings: got  query results :' + JSON.stringify(results));\n            if (results.totalSize >= 1) {\n                var ret_events = [];\n                for (var m in results.records) {\n                    var trec = results.records[m];\n                    \n                    var event = {\n    //                \t\tindex: event_index++,\n    //            \t\t\ttimestamp: new Date().getTime(),\n    //            \t\t\tactive: true,\n                \t\t\titem_id: trec.Id,\n                \t\t\titem_type: 'TRAINING',\n                \t\t\titem_data: {\n                                name: trec.Name,\n                        \t\tdesc: trec.Description__c,\n                    \t\t\tinfo: trec.Total_Participations__c\n                                },\n            \t\t\t    results_data: udata.booked_training[trec.Id]\n            \t\t    };\n//                    if (!events_by_user[uid])    events_by_user[uid] = [];\t\n//            \t\tevents_by_user[uid].push(event);\n                    console.log('createTrainings: ADDED EVENT [' + JSON.stringify(event));\n                    ret_events.push(event);\n                    \n                }\n//              notify_long_connection_by_user(uid, udata);\n                sendEventsToSession(ret_events, sid);\n           }\n     });\n}\n\n\n\nvar PASS_SCORE = 100;\napp.post('/donequiz', function (req,res) {\n    var uid = req.session.username,\n        sid = req.sessionID,\n        udata = req.session.userdata;\n\tif (!uid) {\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n\n\t\n\tvar qid = req.body.id,\n\t\t\tscore = req.body.score,\n\t\t\tquesTried = req.body.quesTried,\n\t\t\tnow_passed = (req.body.quesTried>0 && req.body.score>=PASS_SCORE),\n\t\t\taready_passed = false;\n\t\t\t\n\tconsole.log ('donequiz: complted quiz:' + uid + ', quiz : ' + qid + ', score ' + score + ', quesTried : ' + quesTried + ', now_passed : ' + now_passed);\n\t// need to of least tryed one question to register quiz attempt!\n\tif ( quesTried > 0) {\n\t\t\n\t\tvar alreadydone = udata.completed_events;\n\t\tvar points_award = 0;\n\t\tif (!alreadydone[qid]) { // first atemmpt\n\t\t\talreadydone[qid] = { id: \"\", passed: now_passed, score: score, attempts: 1, bestscore: score};\n\t\t\tpoints_award = score * event_collection[qid].points/100;\n\t\t\t\n\t\t\tudata.points = udata.points + points_award;\n\t\t\tconsole.log ('points: adding ' + points_award + ', total now : ' + udata.points);\n\t\t} else { // NOT first attempt\n            console.log ('donequiz: not first attempt for : ' + qid);\n\t\t\taready_passed = alreadydone[qid].passed;\n\t\t\talreadydone[qid].attempts = alreadydone[qid].attempts + 1;\n\t\t\talreadydone[qid].bestscore = Math.max(alreadydone[qid].bestscore, score);\n\t\t\tif (!aready_passed) alreadydone[qid].passed = now_passed;\n\t\t} \n\n\t\tconsole.log ('donequiz: create results event ' + JSON.stringify(alreadydone[qid]));\n\t\t// create event to register new results of quiz\n        \n        // send update to salesforce\n        var bdy = { Name: qid, Attempts__c: alreadydone[qid].attempts, Passed__c:  alreadydone[qid].passed, First_Score__c: alreadydone[qid].score, Best_Score__c: alreadydone[qid].bestscore};\n        var sfdc_url = 'sobjects/Game_Event__c/' + alreadydone[qid].id;\n        var httpmethod = 'PATCH'; // its an update\n        if (alreadydone[qid].id.length == 0) {\n            // its a insert, set the m/d file\n            bdy.Contact__c = udata.id;\n            bdy.Points__c = points_award;\n            httpmethod = 'POST';\n        }\n        console.log ('/donequiz - ' + sfdc_url + ' : ' + JSON.stringify(bdy));\n        \n        queryAPI(sfdc_url, bdy, httpmethod, function(response) {\n            if (response) {\n                console.log ('/donequiz -  response : ' +  JSON.stringify(response));\n                console.log ('/donequiz setting id ' + qid + ' : ' + response.id);\n                alreadydone[qid].id = response.id;\n            }\n\n            \n    \t\tvar event = {\n//    \t\t\tindex: event_index++,\n//    \t\t\ttimestamp: new Date().getTime(),\n//    \t\t\tactive: true,\n    \t\t\titem_id: qid,\n    \t\t\titem_type: \"QUIZ\",\n    \t\t\tresults_data: alreadydone[qid]\n    \t\t};\n    \t\t//if (!events_by_user[uid]) events_by_user[uid] = [];\t\n    \t\t//events_by_user[uid].push(event);\n            \n            sendEventsToSession([event], sid);\n            \n            req.session.userdata = udata;  // update the session store with the new values.\n            console.log ('/donequiz - udata.completed_events : ' + JSON.stringify(req.session.userdata));\n            res.send({points: udata.points});\n            \n\n            if ((!aready_passed) && now_passed) {\n        \t\t// just passwd new quiz, hunt for new unlocks!!\n    \t\t\tcreateEvents (uid, udata, qid, sid);\n    \t\t}\n    \t\t//notify_long_connection_by_user(uid, udata);\n        });\n\t} else {\n\t\n    \t// update points in response\n        req.session = null;\n    \tres.send({points: udata.points});\n\t}\n});\n\n\n\napp.post('/booktraining', function (req,res) {\n    var uid = req.session.username,\n        sid = req.sessionID,\n        udata = req.session.userdata;\n    if (!uid) {\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n\n\tvar tid = req.body.tid,\n\t\ttdate = req.body.tdate;\n\n\tconsole.log ('booktraining() complted quiz:' + tid + ', data : ' + tdate);\n\t// need to of least tryed one question to register quiz attempt!\n\n\t\t\n\t\tvar alreadybooked = udata.booked_training;\n        if (!alreadybooked[tid]) { // first atemmpt\n            console.log ('booktraining() first atemmpt');\n    \t\talreadybooked[tid] = { id: \"\",   type: 'Booked on ' + tdate};\n        } else {\n            // just update date\n            console.log ('booktraining() just update date');\n            alreadybooked[tid] = { id: alreadybooked[tid].id, type: 're-Booked on ' + tdate };\n        }\n        \n        // send update to salesforce\n        var bdy = { Type__c:  alreadybooked[tid].type};\n        var sfdc_url = 'sobjects/TR_Training_Participation__c/' + alreadybooked[tid].id;\n        var httpmethod = 'PATCH'; // its an update\n        if (alreadybooked[tid].id.length == 0) {\n            // its a insert, set the m/d file\n            bdy.Contact__c = udata.id;\n            bdy.Training_Availability__c = tid;\n            httpmethod = 'POST';\n        }\n        console.log ('booktraining() ' + sfdc_url + ' : ' + JSON.stringify(bdy));\n        \n        queryAPI(sfdc_url, bdy, httpmethod, function(response) {\n            if (response) {\n                console.log ('/booktraining -  response : ' +  JSON.stringify(response));\n                console.log ('/booktraining setting id ' + tid + ' : ' + response.id);\n                alreadybooked[tid].id = response.id;\n            }\n\n            \n    \t\tvar event = {\n//    \t\t\tindex: event_index++,\n//    \t\t\ttimestamp: new Date().getTime(),\n//    \t\t\tactive: true,\n    \t\t\titem_id: tid,\n    \t\t\titem_type: \"TRAINING\",\n    \t\t\tresults_data: alreadybooked[tid]\n    \t\t};\n    \t\t//if (!events_by_user[uid]) events_by_user[uid] = [];\t\n    \t\t//events_by_user[uid].push(event);\n            sendEventsToSession([event], sid);\n            \n            \n            req.session.userdata = udata;  // update the session store with the new values.\n            console.log ('/booktraining - udata.completed_events : ' + JSON.stringify(req.session.userdata));\n            res.send({points: udata.points});\n            \n\n    \t\t//notify_long_connection_by_user(uid, udata);\n        });\n\n});\n\n// If we have a LongPoll request, respond with the events. otherwise add it to the 'temp_events_pending_longpoll' array!\n//var temp_events_pending_longpoll = {};\n/*\nfunction sendEventsToSession (events, sid) {\n\tconsole.log ('sendEventsToSession()');\n\tvar req_info = long_connections_by_session[sid];\n\tif (!req_info || req_info.completed) {\n\t\tconsole.log ('sendEventsToSession() no outstanding longpolling requests for ' + sid + ', store events for pending longpoll');\n\t\tif (!temp_events_pending_longpoll[sid])    \n\t\t\ttemp_events_pending_longpoll[sid] = events;\n\t\telse\n\t\t\ttemp_events_pending_longpoll[sid].push.apply(temp_events_pending_longpoll[sid], events);\n\t} else {\n\t\tconsole.log ('sendEventsToSession() got active connection for user ' + sid + ', sending events');\n\n\t\tclearTimeout(req_info.timeoutid);\n\t\treq_info.completed = true;\n\t\treq_info.request.resume();\n\t\t//event.my_points = udata.points;\n\t\treq_info.request.session = null; // method doesnt update the session\n\t\treq_info.response.send (JSON.stringify(events));\n\t}\n}\n*/\n\nvar long_connections_by_session = {};\n\nfunction sendEventsToSession (events, sid) {\n\tconsole.log ('sendEventsToSession() [' + sid + '] : '+ events.length);\n    var req_info = long_connections_by_session[sid];\n    if (req_info === undefined || req_info.completed) { \n        console.log ('sendEventsToSession() : save events to database & message all dynos to see if they have a longpoll for that session');\n\t    session_events_collection.update ({_id: sid}, {$pushAll :{'events' :  events}}, {upsert: true}, function(err, data) {\n\t\t\tconsole.log ('sendEventsToSession, created event data on session : [' + err + '] : ' + data);\n\t\t\tlongpoll_exchange.publish ('#', {type: 'NEW_EVENT_DATA', sessionid: sid}, { contentType: 'application/json'});\n    \t});\n    } else {\n        clearTimeout(req_info.timeoutid);\n    \treq_info.completed = true;\n    \treq_info.request.resume();\n    \t//event.my_points = udata.points;\n    \treq_info.request.session = null; // method doesnt update the session\n\t\treq_info.response.send (JSON.stringify(events));\n    }\n}\n\n/**\n* GET handler for retrieving events for the user.\n*/\n\n\napp.get('/longpoll/:lasteventprocessed', function (req, res) {\n    var uid = req.session.username,\n        udata = req.session.userdata,\n        sid = req.sessionID,\n        lasteventprocessed = req.params.lasteventprocessed;\n        \n    if (!uid) {\n\t\tres.send ('Please Login', 400);\n\t\treturn;\n\t} \n    \n    if (lasteventprocessed == 0) {\n        long_connections_by_session[sid] = null;\n        //temp_events_pending_longpoll[sid] = null;\n       createEvents(uid, udata,  null, req.sessionID);\n       createTrainings (uid, udata, req.sessionID);\n    }\n    \n\tconsole.log ('longpoll() got request from ' + uid + ' last eventprocessed from url : ' + lasteventprocessed);\n\t// check the required parameters\n\n    \n\t//var event = nextEvent(uid, lasteventprocessed);\n    //var events = temp_events_pending_longpoll[sid];\n\t//if (!events) {\n\n    session_events_collection.findAndModify (\n        {_id: sid},\n        [],\n    \t{$unset :{ 'events' : 1}},\n    \t{new: false, upsert: false },\n    \tfunction(err, data) {\n            if (err || !data || !data.events) {\n                console.log ('longpoll() :: no event data ('  + err + ')  : ' + JSON.stringify(data));\n            \tconsole.log ('longpoll() pause request, no event to send ' + lasteventprocessed);\n        \n        \t\tvar req_info = { request: req, response: res, lasteventprocessed: lasteventprocessed, completed: false};\n        \t\treq_info.timeoutid = setTimeout( function () { \n        \t\t\tconsole.log ('longpoll() saved req_info,  timeout pulse');\n        \t\t\treq_info.request.resume();\n        \t\t\treq_info.response.send({item_type: \"PULSE\"});\n        \t\t\treq_info.completed = true;\n        \t\t\t }, connectionTimeout * 1000); \n        \n        \t\t//if (!long_connections_by_session[sid])\n        \t\t//\tlong_connections_by_session[sid] = [];  \n        \t\tlong_connections_by_session[sid] = req_info;\n        \t\treq.pause();\n        \t\tconsole.log ('longpoll() stored and paused request');\n        \n            } else {\n        \t\tconsole.log ('longpoll() send the stored event data : ' + JSON.stringify(data));\n                res.send(JSON.stringify(data.events));\n            }\n    \t});\n/*\n\t} else {\n\t\tconsole.log ('longpoll() got event to send to user');\n\t\t//event.my_points =udata.points;\n\t\t//setTimeout (function() {  // ADD A 1 SECOND DELAY - JUST FOR EFFECT!!!\n\t\tres.send(JSON.stringify(events));\n\t\tconsole.log ('longpoll sent :' + JSON.stringify(events));\n        temp_events_pending_longpoll[sid] = null;\n\t\t//}, 1000);\n\t}\n*/\n\n});\n\napp.get ('/stream/:filename', function (req,res) {\n\tvar fn = __dirname+'/public/media/' +req.params.filename;\n\tconsole.log ('stream: filename ' + fn);\n\tres.sendfile (fn);\n});"],[1,"\n\n\nfunction queryAPI (resturl, mbody, httpmethod, callback) {\n    \n    //console.log ('got token : ' + JSON.stringify(foauth.getOAuthResponse()));\n\n    var data = '';\n    \n    var host =  (require('url').parse(foauth.getOAuthResponse().instance_url))['host'];\n\n    \n    var options = {\n        method: httpmethod,\n        host: host,\n        path: '/services/data/v24.0/' + resturl,\n        headers: {\n          'Host': host,\n          'Authorization': 'OAuth '+foauth.getOAuthResponse().access_token,\n          'Accept':'application/jsonrequest',\n          'Cache-Control':'no-cache,no-store,must-revalidate',\n          'Content-type':'application/json; charset=UTF-8'\n        }\n    \n    }\n    \n    //Issue the Force.com REST API call to add a Lead record\n    var req = https.request(options, function(res) {\n      console.log(\"statusCode: \", res.statusCode);\n    \n      res.on('data', function(_data) {\n        data += _data;\n      });\n    \n      res.on('end', function(d) {\n        if (res.statusCode == 401){\n          //Our Access Token has expired, and so we need to login again\n          console.log('Logging in again...');\n          foauth.login(clientId, clientSecret , sfuser, sfpasswd,  queryAPI (resturl, mbody, httpmethod, callback));\n        }else if (res.statusCode != 200 && res.statusCode != 201 && res.statusCode != 204){\n            // 200 = OK, 201 = CREATED\n          //Force.com API returned an error. Display it to the user\n          console.log('Error from Force.com:' + res.statusCode + ' : ' +data);\n          data = JSON.parse(data);\n          console.log('Error message:'+data[0].message);\n\n        }else if (res.statusCode == 204) {\n            // this is from an update call!!!\n          callback (null);\n        }else{\n          callback (JSON.parse(data));\n        }\n      });\n    \n    }).on('error', function(e) {\n      console.log(e);\n    })\n    \n    req.on('error', function(e) {\n      console.log('problem with request: ' + e.message);\n    });\n//    console.log ('sending body ' + JSON.stringify(mbody));\n    req.session = null; // method doesnt update the session\n    req.end(JSON.stringify(mbody));\n};\n\n/*\napp.get('/', function(req, res){\n    res.render('logon.ejs', { locals: {  loggedon: false, message: '' } });\n});\n//app.get('/:urlpage', function(req, res){\n//    console.log ('/:urlpage + ' + req.params.urlpage);\n//    res.render(req.params.urlpage + '.ejs', { locals: { } });\n//});\n*/\n\n\n\n//var event_index = 1;\n//var events_by_user = {};\nfunction createEvents(uid, udata, just_completed, sid) {\n\tconsole.log ('createEvents() ' + uid + ', just_completed (set if just want delta): ' + just_completed);\n\t\n    // TODO...\n    var cursor = events_collection.find ({});\n    cursor.toArray( function (err, item) {\n        console.log ('createEvents() query events item (' + err + ') : ' + JSON.stringify (item)); \n        var ret_events = [];\n        for (var idx in item) {\n\n            var i = item[idx]._id;\n    \t\tvar e = item[idx];\n    \t\tconsole.log ('createEvents : checking item : ' + i + '  :: ' + JSON.stringify (e));\n    \t\t\n    \t\tvar event = null, \n    \t\t\tresults_data = null,\n    \t\t\tselected = true, \n    \t\t\tnewlyselected = false;\n    \t\t\t\t\n    \t\tfor (var needtocomplete in e.forwho.completed) {\n    \t\t\tconsole.log ('createEvents: checking prereq for event, required : ' + needtocomplete + ', is it in ' + JSON.stringify(udata.completed_events) );\n    \t\t\tif (just_completed == needtocomplete ) {\n    \t\t\t\tnewlyselected = true;\n    \t\t\t}\n    \t\t\tvar hascompleted = udata.completed_events[needtocomplete];\n    \t\t\tif ((!hascompleted) || hascompleted.passed == false) {\n    \t\t\t//if (! (needtocomplete in users_collection[user].completed_events)) {\n    \t\t\t\tselected = false; break;\n    \t\t\t}\n    \t\t}\n    \t\tif (((!selected) || (just_completed != null && newlyselected == false))) {\n                console.log ('not selected');\n    \t\t} else {\n                // 100 points for just getting a new event\n        \t    //udata.points = udata.points + 50;\n        \t\t//console.log ('createEvents: points: adding ' + '50' + ', total now : ' + udata.points);\n        \n        \t\tvar event = {\n            //\t\t\tindex: event_index++,\n            //\t\t\ttimestamp: new Date().getTime(),\n            //\t\t\tactive: true,\n            \t\t\titem_id: i,\n            \t\t\titem_type: e.type,\n            \t\t\titem_data: e,\n            \t\t\tresults_data: udata.completed_events[i]\n        \t\t    };\n        \t\t//if (!events_by_user[uid])\tevents_by_user[uid] = [];\t\n        \t\t//events_by_user[uid].push(event);\n        \t\tconsole.log('createEvents: ADDED EVENT  [' + event.item_id +'], event_data ' + JSON.stringify(event.item_data) + ', results_data ' + JSON.stringify(event.results_data)  + ', newlyselected : '+ newlyselected);\n                ret_events.push (event);\n    \t\t}\n        }\n        sendEventsToSession(ret_events, sid);\n    });\n}\n\nfunction createTrainings (uid, udata, sid) {\n    console.log ('createTrainings :' + uid);\n     queryAPI('query?q='+escape('select Id, Name, Description__c, Start_date__c, Total_Participations__c, TR_Training__r.Content_Reference__c  , Training_Categories__c  from TR_Training_Availability__c where Account__c = \\'' + udata.outlet.id + '\\''), null, 'GET',  function (results) {\n           console.log ('createTrainings: got  query results :' + JSON.stringify(results));\n            if (results.totalSize >= 1) {\n                var ret_events = [];\n                for (var m in results.records) {\n                    var trec = results.records[m];\n                    \n                    var event = {\n    //                \t\tindex: event_index++,\n    //            \t\t\ttimestamp: new Date().getTime(),\n    //            \t\t\tactive: true,\n                \t\t\titem_id: trec.Id,\n                \t\t\titem_type: 'TRAINING',\n                \t\t\titem_data: {\n                                name: trec.Name,\n                        \t\tdesc: trec.Description__c,\n                    \t\t\tinfo: trec.Total_Participations__c\n                                },\n            \t\t\t    results_data: udata.booked_training[trec.Id]\n            \t\t    };\n//                    if (!events_by_user[uid])    events_by_user[uid] = [];\t\n//            \t\tevents_by_user[uid].push(event);\n                    console.log('createTrainings: ADDED EVENT [' + JSON.stringify(event));\n                    ret_events.push(event);\n                    \n                }\n//              notify_long_connection_by_user(uid, udata);\n                sendEventsToSession(ret_events, sid);\n           }\n     });\n}\n\n\n\nvar long_connections_by_session = {};\n\nfunction sendEventsToSession (events, sid) {\n\tconsole.log ('sendEventsToSession() [' + sid + '] : '+ events.length);\n    var req_info = long_connections_by_session[sid];\n    if (req_info === undefined || req_info.completed) { \n        console.log ('sendEventsToSession() : save events to database & message all dynos to see if they have a longpoll for that session');\n\t    session_events_collection.update ({_id: sid}, {$pushAll :{'events' :  events}}, {upsert: true}, function(err, data) {\n\t\t\tconsole.log ('sendEventsToSession, created event data on session : [' + err + '] : ' + data);\n\t\t\tlongpoll_exchange.publish ('#', {type: 'NEW_EVENT_DATA', sessionid: sid}, { contentType: 'application/json'});\n    \t});\n    } else {\n        clearTimeout(req_info.timeoutid);\n    \treq_info.completed = true;\n    \treq_info.request.resume();\n    \t//event.my_points = udata.points;\n    \treq_info.request.session = null; // method doesnt update the session\n\t\treq_info.response.send (JSON.stringify(events));\n    }\n}\n\n/**\n* GET handler for retrieving events for the user.\n*/"],[0,"\n\n\n\n"]],"start1":8099,"start2":8099,"length1":30949,"length2":7624}]],"length":15723,"saved":false},"1336858407482":{"contributors":[],"silentsave":false,"ts":1336858407482,"patch":[[{"diffs":[[1,"/*\nIn Node, things are only visible to other things in the same file. \nthe fundamental Node building block is called a module which maps directly to a file\n'require' is used to load a module, which is why its return value is typically assigned to a variable\nas long as our module doesn't expose anything, 'require' isn't very useful. To expose things we use module.exports and export everything we want\n*/\n\n"],[0,"var express "]],"start1":0,"start2":0,"length1":12,"length2":419}]],"length":16130,"saved":false},"1336858642494":{"contributors":[],"silentsave":false,"ts":1336858642494,"patch":[[{"diffs":[[0,"       \n        "],[1,"var collections = {};"],[0,"\n"],[-1,""],[0,"        db.colle"]],"start1":5059,"start2":5059,"length1":33,"length2":54},{"diffs":[[0,"{  \n            "],[1,"collections."],[0,"events_collectio"]],"start1":5146,"start2":5146,"length1":32,"length2":44},{"diffs":[[0,"{  \n            "],[1,"collections."],[0,"users_collection"]],"start1":5260,"start2":5260,"length1":32,"length2":44},{"diffs":[[0,"{  \n            "],[1,"collections."],[0,"groups_collectio"]],"start1":5373,"start2":5373,"length1":32,"length2":44},{"diffs":[[0,"tion(err,c) {  \n"],[-1,""],[0,"            post"]],"start1":5474,"start2":5474,"length1":32,"length2":32},{"diffs":[[0,"{  \n            "],[1,"collections."],[0,"posts_collection"]],"start1":5486,"start2":5486,"length1":32,"length2":44},{"diffs":[[0,"es')(app"],[1,", collections"],[0,");\n\n    "]],"start1":6708,"start2":6708,"length1":16,"length2":29}]],"length":16212,"saved":false},"1336859074400":{"contributors":[],"silentsave":false,"ts":1336859074400,"patch":[[{"diffs":[[0,"var "],[-1,"session_events_collection;\nvar events_collection;\nvar users_collection;\nvar groups_collection;\nvar posts_"],[0,"coll"]],"start1":4836,"start2":4836,"length1":113,"length2":8},{"diffs":[[0,"llection"],[1,"s = {}"],[0,";\ndb_con"]],"start1":4842,"start2":4842,"length1":16,"length2":22},{"diffs":[[0,"       \n        "],[1," "],[0,"\n        var col"]],"start1":4951,"start2":4951,"length1":32,"length2":33},{"diffs":[[0,"        "],[-1,"var collections = {}"],[1,"db.collection ('session_events', function(err,c) {  \n            collections.session_events_collection = c;  \n        })"],[0,";\n      "]],"start1":4969,"start2":4969,"length1":36,"length2":136},{"diffs":[[0,"ursor = "],[1,"collections."],[0,"events_c"]],"start1":11265,"start2":11265,"length1":16,"length2":28},{"diffs":[[0,"ion');\n\t    "],[1,"collections."],[0,"session_even"]],"start1":15524,"start2":15524,"length1":24,"length2":36}]],"length":16238,"saved":false},"1336859560309":{"contributors":[],"silentsave":false,"ts":1336859560309,"patch":[[{"diffs":[[0,"qp');\n\n\n"],[1,"\n"],[0,"var "],[1,"collections = {\n    long_connections_by_session: {},\n    "],[0,"longpoll"]],"start1":966,"start2":966,"length1":20,"length2":78},{"diffs":[[0,"exchange"],[1,": null\n}"],[0,";\nvar am"]],"start1":1045,"start2":1045,"length1":16,"length2":24},{"diffs":[[0,"   \n        "],[1,"collections."],[0,"longpoll_exc"]],"start1":1355,"start2":1355,"length1":24,"length2":36},{"diffs":[[0,"\tvar req_info = "],[1,"collections."],[0,"long_connections"]],"start1":2726,"start2":2726,"length1":32,"length2":44},{"diffs":[[0,"                "],[1,"collections."],[0,"session_events_c"]],"start1":3351,"start2":3351,"length1":32,"length2":44},{"diffs":[[0,");\n\n"],[-1,"var connectionTimeout = 25; // always send a empty '200' reponse to each open request after 60seconds.\n"],[0,"\nvar"]],"start1":4554,"start2":4554,"length1":111,"length2":8},{"diffs":[[0,"/\n\n\n"],[-1,"var collections = {};"],[0,"\n"],[1,""],[0,"db_c"]],"start1":4831,"start2":4831,"length1":30,"length2":9},{"diffs":[[0,"/\n\n\n"],[-1,"\n//var event_index = 1;\n//var events_by_user = {};\nfunction createEvents(uid, udata, just_completed, sid) {\n\tconsole.log ('createEvents() ' + uid + ', just_completed (set if just want delta): ' + just_completed);\n\t\n    // TODO...\n    var cursor = collections.events_collection.find ({});\n    cursor.toArray( function (err, item) {\n        console.log ('createEvents() query events item (' + err + ') : ' + JSON.stringify (item)); \n        var ret_events = [];\n        for (var idx in item) {\n\n            var i = item[idx]._id;\n    \t\tvar e = item[idx];\n    \t\tconsole.log ('createEvents : checking item : ' + i + '  :: ' + JSON.stringify (e));\n    \t\t\n    \t\tvar event = null, \n    \t\t\tresults_data = null,\n    \t\t\tselected = true, \n    \t\t\tnewlyselected = false;\n    \t\t\t\t\n    \t\tfor (var needtocomplete in e.forwho.completed) {\n    \t\t\tconsole.log ('createEvents: checking prereq for event, required : ' + needtocomplete + ', is it in ' + JSON.stringify(udata.completed_events) );\n    \t\t\tif (just_completed == needtocomplete ) {\n    \t\t\t\tnewlyselected = true;\n    \t\t\t}\n    \t\t\tvar hascompleted = udata.completed_events[needtocomplete];\n    \t\t\tif ((!hascompleted) || hascompleted.passed == false) {\n    \t\t\t//if (! (needtocomplete in users_collection[user].completed_events)) {\n    \t\t\t\tselected = false; break;\n    \t\t\t}\n    \t\t}\n    \t\tif (((!selected) || (just_completed != null && newlyselected == false))) {\n                console.log ('not selected');\n    \t\t} else {\n                // 100 points for just getting a new event\n        \t    //udata.points = udata.points + 50;\n        \t\t//console.log ('createEvents: points: adding ' + '50' + ', total now : ' + udata.points);\n        \n        \t\tvar event = {\n            //\t\t\tindex: event_index++,\n            //\t\t\ttimestamp: new Date().getTime(),\n            //\t\t\tactive: true,\n            \t\t\titem_id: i,\n            \t\t\titem_type: e.type,\n            \t\t\titem_data: e,\n            \t\t\tresults_data: udata.completed_events[i]\n        \t\t    };\n        \t\t//if (!events_by_user[uid])\tevents_by_user[uid] = [];\t\n        \t\t//events_by_user[uid].push(event);\n        \t\tconsole.log('createEvents: ADDED EVENT  [' + event.item_id +'], event_data ' + JSON.stringify(event.item_data) + ', results_data ' + JSON.stringify(event.results_data)  + ', newlyselected : '+ newlyselected);\n                ret_events.push (event);\n    \t\t}\n        }\n        sendEventsToSession(ret_events, sid);\n    });\n}\n\nfunction createTrainings (uid, udata, sid) {\n    console.log ('createTrainings :' + uid);\n     queryAPI('query?q='+escape('select Id, Name, Description__c, Start_date__c, Total_Participations__c, TR_Training__r.Content_Reference__c  , Training_Categories__c  from TR_Training_Availability__c where Account__c = \\'' + udata.outlet.id + '\\''), null, 'GET',  function (results) {\n           console.log ('createTrainings: got  query results :' + JSON.stringify(results));\n            if (results.totalSize >= 1) {\n                var ret_events = [];\n                for (var m in results.records) {\n                    var trec = results.records[m];\n                    \n                    var event = {\n    //                \t\tindex: event_index++,\n    //            \t\t\ttimestamp: new Date().getTime(),\n    //            \t\t\tactive: true,\n                \t\t\titem_id: trec.Id,\n                \t\t\titem_type: 'TRAINING',\n                \t\t\titem_data: {\n                                name: trec.Name,\n                        \t\tdesc: trec.Description__c,\n                    \t\t\tinfo: trec.Total_Participations__c\n                                },\n            \t\t\t    results_data: udata.booked_training[trec.Id]\n            \t\t    };\n//                    if (!events_by_user[uid])    events_by_user[uid] = [];\t\n//            \t\tevents_by_user[uid].push(event);\n                    console.log('createTrainings: ADDED EVENT [' + JSON.stringify(event));\n                    ret_events.push(event);\n                    \n                }\n//              notify_long_connection_by_user(uid, udata);\n                sendEventsToSession(ret_events, sid);\n           }\n     });\n}\n\n\n\nvar long_connections_by_session = {};\n\nfunction sendEventsToSession (events, sid) {\n\tconsole.log ('sendEventsToSession() [' + sid + '] : '+ events.length);\n    var req_info = long_connections_by_session[sid];\n    if (req_info === undefined || req_info.completed) { \n        console.log ('sendEventsToSession() : save events to database & message all dynos to see if they have a longpoll for that session');\n\t    collections.session_events_collection.update ({_id: sid}, {$pushAll :{'events' :  events}}, {upsert: true}, function(err, data) {\n\t\t\tconsole.log ('sendEventsToSession, created event data on session : [' + err + '] : ' + data);\n\t\t\tlongpoll_exchange.publish ('#', {type: 'NEW_EVENT_DATA', sessionid: sid}, { contentType: 'application/json'});\n    \t});\n    } else {\n        clearTimeout(req_info.timeoutid);\n    \treq_info.completed = true;\n    \treq_info.request.resume();\n    \t//event.my_points = udata.points;\n    \treq_info.request.session = null; // method doesnt update the session\n\t\treq_info.response.send (JSON.stringify(events));\n    }\n}\n\n"],[0,"/**\n"]],"start1":11000,"start2":11000,"length1":5160,"length2":8}]],"length":11064,"saved":false},"1336859694169":{"contributors":[],"silentsave":false,"ts":1336859694169,"patch":[[{"diffs":[[0,"'),\n"],[-1,"    rest = require('restler'),\n"],[0,"    "]],"start1":909,"start2":909,"length1":39,"length2":8}]],"length":11033,"saved":false},"1336859857040":{"contributors":[],"silentsave":false,"ts":1336859857040,"patch":[[{"diffs":[[0,"  \t\tif ("],[1,"!"],[0,"req_info"]],"start1":2763,"start2":2763,"length1":16,"length2":17},{"diffs":[[0,"nfo "],[-1,"=== undefined "],[0,"|| r"]],"start1":2777,"start2":2777,"length1":22,"length2":8}]],"length":11020,"saved":false},"1336941348722":{"contributors":[],"silentsave":false,"ts":1336941348722,"patch":[[{"diffs":[[0,"'),\n"],[-1,"    mongo_ObjectID = mongodb.ObjectID,\n"],[0,"    "]],"start1":497,"start2":497,"length1":47,"length2":8}]],"length":10981,"saved":false},"1337097874723":{"contributors":[],"silentsave":false,"ts":1337097874723,"patch":[[{"diffs":[[0,"('express'),"],[1," // web framework"],[0,"\n    url = r"]],"start1":428,"start2":428,"length1":24,"length2":41},{"diffs":[[0,"('url'),"],[1," // process the environment URLS"],[0,"\n    mon"]],"start1":475,"start2":475,"length1":16,"length2":48},{"diffs":[[0,"ngodb'),"],[1," // https://github.com/christkv/node-mongodb-native"],[0,"\n    db_"]],"start1":541,"start2":541,"length1":16,"length2":67}]],"length":11081,"saved":false},"1337098030725":{"contributors":[],"silentsave":false,"ts":1337098030725,"patch":[[{"diffs":[[0,"n() {\n        \n "],[1,"       collections.db = db; \n"],[0,"        \n       "]],"start1":4939,"start2":4939,"length1":32,"length2":61}]],"length":11110,"saved":false},"1337099323431":{"contributors":[],"silentsave":false,"ts":1337099323431,"patch":[[{"diffs":[[0,"dy'\n            "],[1,"//"],[0,"app.use(express."]],"start1":6490,"start2":6490,"length1":32,"length2":34}]],"length":11112,"saved":false},"1337099447690":{"contributors":[],"silentsave":false,"ts":1337099447690,"patch":[[{"diffs":[[0,"        "],[-1,"//"],[0,"app.use("]],"start1":6498,"start2":6498,"length1":18,"length2":16},{"diffs":[[0,"ser()); "],[-1," "],[1,"\n            delete express.bodyParser.parse['multipart/form-data'];\n"],[0,"\n       "]],"start1":6529,"start2":6529,"length1":17,"length2":85}]],"length":11178,"saved":false}}}