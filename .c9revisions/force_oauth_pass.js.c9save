{"ts":1346670987480,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var http = require('https');\nvar oauthResponse = {\"access_token\":null,\"instance_url\":null, \"id\":null, \"refresh_token\":null};\nvar hostname = process.env.SFDC_HOSTNAME;\n\nfunction getOAuthResponse() { return oauthResponse; }\n\nfunction login(clientId, clientSecret , username, password, callback) {\n\n    //Construct the post data for the OAuth callout\n    var post_data = 'grant_type=password&client_id='+clientId+'&client_secret='+\n        clientSecret+'&username='+username+\n        '&password='+password;\n    \n    console.log('login post_data ' + post_data);\n    var options = {\n        host: hostname,\n        path: '/services/oauth2/token',\n        method: 'POST',\n        headers: {\n            'host': hostname,\n            'Content-Length': post_data.length,\n            'Content-Type': 'application/x-www-form-urlencoded',\n            'Accept':'application/jsonrequest',\n            'Cache-Control':'no-cache,no-store,must-revalidate'\n        }\n    };\n\n    var req = http.request(options, function(res) {\n        console.log(\"statusCode: \", res.statusCode);\n        console.log(\"headers: \", res.headers);\n        \n        res.on('data', function(data) {\n            //Populate the oauthResponse variable with the OAuth access token and instance url\n            var newResponse = JSON.parse(data);\n            oauthResponse.access_token = newResponse.access_token;\n            oauthResponse.instance_url = newResponse.instance_url;\n            oauthResponse.id = newResponse.id;\n            console.log(\"OAuth response::\"+JSON.stringify(newResponse));\n        });\n        \n        res.on('end', function(d) {\n        if (callback){callback(oauthResponse);}\n        });\n    }).on('error', function(e) {\n        console.error('A logon error has occured ' + e);\n    });\n    \n    req.write(post_data);\n    req.end();\n};\n\n/*This function implements the Refresh OAuth Flow for Force.com. Note\nthat this function is not used in the current implementation of\n'Social Web 2 Lead' since the Username/Password flow does not support refreshing the access\ntoken.\n*/\nfunction refreshToken(callback) {\n    console.log('Getting Refresh Token...');\n    if (typeof(oauthResponse.refresh_token) == \"undefined\")\n    return;\n    \n    var post_data = 'refresh_token='+oauthResponse.refresh_token+'&grant_type=refresh_token&client_id='+\n    process.env.FORCE_DOT_COM_CLIENT_ID+'&client_secret='+process.env.FORCE_DOT_COM_CLIENT_SECRET;\n    \n    console.log(post_data);\n    var options = {\n        host: hostname,\n        path: '/services/oauth2/token',\n        method: 'POST',\n        headers: {\n        'host': hostname,\n        'Content-Length': post_data.length,\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Accept':'application/jsonrequest',\n        'Cache-Control':'no-cache,no-store,must-revalidate'\n        }\n    };\n\n    var req = http.request(options, function(res) {\n        console.log(\"statusCode: \", res.statusCode);\n        \n        res.on('data', function(data) {\n            newResponse = JSON.parse(data);\n            oauthResponse.access_token = newResponse.access_token;\n            console.log(\"NEW ACCESS TOKEN::\"+oauthResponse.access_token);\n        });\n        \n        res.on('end', function(d) {\n            if(callback) {callback(oauthResponse);}\n        });\n    \n    }).on('error', function(e) {\n        console.error(e);\n    });\n    \n    req.write(post_data);\n    req.end();\n}\n\nmodule.exports = {\n  login: login,\n  getOAuthResponse : getOAuthResponse,\n  refreshToken : refreshToken\n};"]],"start1":0,"start2":0,"length1":0,"length2":3517}]],"length":3517}
