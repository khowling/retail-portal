{"revisions":{"1336848801232":{"ts":1336848801232,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*!\n * connect-mongo\n * Copyright(c) 2011 Casey Banner <kcbanner@gmail.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies\n */\n\nvar mongo = require('mongodb');\nvar url = require('url');\n\n\n/**\n * Default options\n */\n\nvar defaultOptions = {host: '127.0.0.1',\n                      port: 27017,\n                      stringify: true,\n                      collection: 'sessions',\n                      auto_reconnect: false,\n                      clear_interval: -1};\n\nmodule.exports = function(connect) {\n  var Store = connect.session.Store;\n\n  /**\n   * Initialize MongoStore with the given `options`.\n   * Calls `callback` when db connection is ready (mainly for testing purposes).\n   * \n   * @param {Object} options\n   * @param {Function} callback\n   * @api public\n   */\n\n  function MongoStore(options, callback) {\n    options = options || {};\n    Store.call(this, options);\n\n    if(options.url) {\n      var db_url = url.parse(options.url);\n\n      if (db_url.port) {\n        options.port = parseInt(db_url.port);\n      }\n      \n      if (db_url.pathname != undefined) {\n        var pathname = db_url.pathname.split('/');\n\n        if (pathname.length >= 2) {\n          options.db = pathname[1];\n        }\n        \n        if (pathname.length >= 3) {\n          options.collection = pathname[2];\n        }\n      }\n      \n      if (db_url.hostname != undefined) {\n        options.host = db_url.hostname;\n      }\n\n      if (db_url.auth != undefined) {\n        var auth = db_url.auth.split(':');\n\n        if (auth.length >= 1) {\n          options.username = auth[0];\n        }\n        \n        if (auth.length >= 2) {\n          options.password = auth[1];\n        }\n      }\n    }\n  \n    if(!options.db) {\n      throw new Error('Required MongoStore option `db` missing');\n    }\n    \n    this.db = new mongo.Db(options.db,\n                           new mongo.Server(options.host || defaultOptions.host,\n                                            options.port || defaultOptions.port, \n                                            {\n                                              auto_reconnect: options.auto_reconnect ||\n                                                defaultOptions.auto_reconnect\n                                            }));\n    \n    this.db_collection_name = options.collection || defaultOptions.collection;\n\n    if (options.hasOwnProperty('stringify') ? options.stringify : defaultOptions.stringify) {\n      this._serialize_session = JSON.stringify;\n      this._unserialize_session = JSON.parse;\n    } else {\n      this._serialize_session = function(x) { return x; };\n      this._unserialize_session = function(x) { return x; };\n    }\n    \n    var self = this;\n    this._get_collection = function(callback) {\n      if (self.collection) {\n        callback && callback(self.collection);\n      } else {\n        self.db.collection(self.db_collection_name, function(err, collection) {\n          if (err) {\n            throw new Error('Error getting collection: ' + self.db_collection_name);\n          } else {\n            self.collection = collection;\n                \n            var clear_interval = options.clear_interval || defaultOptions.clear_interval;\n            if (clear_interval > 0) {\n              self.clear_interval = setInterval(function() {          \n                self.collection.remove({expires: {$lte: new Date()}});\n              }, clear_interval * 1000, self);\n            }\n            \n            callback && callback(self.collection);\n          }      \n        });    \n      }\n    };\n    \n    this.db.open(function(err, db) {\n      if (err) {\n        throw new Error('Error connecting to database');\n      }\n\n      if (options.username && options.password) {\n        db.authenticate(options.username, options.password, function () {\n          self._get_collection(callback);\n        });\n      } else {\n        self._get_collection(callback);\n      }\n    });\n  };\n\n  /**\n   * Inherit from `Store`.\n   */\n\n  MongoStore.prototype.__proto__ = Store.prototype;\n\n  /**\n   * Attempt to fetch session by the given `sid`.\n   *\n   * @param {String} sid\n   * @param {Function} callback\n   * @api public\n   */\n  \n  MongoStore.prototype.get = function(sid, callback) {\n    var self = this;\n    this._get_collection(function(collection) {    \n      collection.findOne({_id: sid}, function(err, session) {\n        try {\n          if (err) {\n            callback && callback(err, null);\n          } else {      \n            \n            if (session) {\n              if (!session.expires || new Date < session.expires) {\n                callback(null, self._unserialize_session(session.session));\n              } else {\n                self.destroy(sid, callback);\n              }\n            } else {\n              callback && callback();\n            }\n          }\n        } catch (err) {\n          callback && callback(err);\n        }\n      });\n    });\n  };\n\n  /**\n   * Commit the given `sess` object associated with the given `sid`.\n   *\n   * @param {String} sid\n   * @param {Session} sess\n   * @param {Function} callback\n   * @api public\n   */\n\n  MongoStore.prototype.set = function(sid, session, callback) {\n    try {\n          var s = {_id: sid, session: this._serialize_session(session)};\n\n      if (session && session.cookie && session.cookie._expires) {\n        s.expires = new Date(session.cookie._expires);\n      }\n\n      this._get_collection(function(collection) {\n        collection.update({_id: sid}, s, {upsert: true, safe: true}, function(err, data) {\n          if (err) {\n            callback && callback(err);\n          } else {\n            callback && callback(null);\n          }\n        });\n      });\n    } catch (err) {\n      callback && callback(err);\n    }\n  };\n\n  /**\n   * Destroy the session associated with the given `sid`.\n   *\n   * @param {String} sid\n   * @param {Function} callback\n   * @api public\n   */\n\n  MongoStore.prototype.destroy = function(sid, callback) {\n    this._get_collection(function(collection) {\n      collection.remove({_id: sid}, function() {\n        callback && callback();\n      });\n    });\n  };\n\n  /**\n   * Fetch number of sessions.\n   *\n   * @param {Function} callback\n   * @api public\n   */\n\n  MongoStore.prototype.length = function(callback) {\n    this._get_collection(function(collection) {\n      collection.count({}, function(err, count) {\n        if (err) {\n          callback && callback(err);\n        } else {\n          callback && callback(null, count);\n        }\n      });\n    });\n  };\n\n  /**\n   * Clear all sessions.\n   *\n   * @param {Function} callback\n   * @api public\n   */\n\n  MongoStore.prototype.clear = function(callback) {\n    this._get_collection(function(collection) {\n      collection.drop(function() {\n        callback && callback();\n      });\n    });\n  };\n  \n  return MongoStore;\n};"]],"start1":0,"start2":0,"length1":0,"length2":6781}]],"length":6781},"1336849383275":{"contributors":[],"silentsave":false,"ts":1336849383275,"patch":[[{"diffs":[[0,"ore("],[-1,"options, callback) {\n    options = options || {};\n    Store.call(this, options);\n\n    if(options.url) {\n      var db_url = url.parse(options.url);\n\n      if (db_url.port) {\n        options.port = parseInt(db_url.port)"],[1,"db) {\n    this.db = db"],[0,";\n    "],[-1,"  }"],[0,"\n    "],[-1,"  \n      if (db_url.pathname != undefined) {\n        var pathname = db_url.pathname.split('/');\n\n        if (pathname.length >= 2) {\n          options.db = pathname[1];\n        }\n        \n        if (pathname.length >= 3) {\n          options.collection = pathname[2];\n        }\n      }\n      \n      if (db_url.host"],[1,"this.db_collection_"],[0,"name "],[-1,"!"],[0,"= "],[-1,"undefined) {\n        options.host = db_url.hostname;\n      }\n\n      if (db_url.auth != undefined) {\n        var auth = db_url.auth.split(':');\n\n        if (auth.length >= 1) {\n          options.username = auth[0];\n        }\n        \n        if (auth.length >= 2) {\n          options.password = auth[1];\n        }\n      }\n    }\n  \n    if(!options.db) {\n      throw new Error('Required MongoStore option `db` missing');\n    }\n    \n    this.db = new mongo.Db(options.db,\n                           new mongo.Server(options.host || defaultOptions.host,\n                                            options.port || defaultOptions.port, \n                                            {\n                                              auto_reconnect: options.auto_reconnect ||\n                                                defaultOptions.auto_reconnect\n                                            }));\n    \n    this.db_collection_name = options.collection || defaultOptions.collection;\n\n    if (o"],[1," defaultOptions.collection;\n\n    if (defaultO"],[0,"ptio"]],"start1":791,"start2":791,"length1":1547,"length2":112},{"diffs":[[0,"ify') ? "],[-1,"o"],[1,"defaultO"],[0,"ptions.s"]],"start1":928,"start2":928,"length1":17,"length2":24},{"diffs":[[0,"l = "],[-1,"options.clear_interval || "],[0,""],[1,""],[0,"defa"]],"start1":1682,"start2":1682,"length1":34,"length2":8},{"diffs":[[0,"    "],[-1,"this.db.open(function(err, db) {\n      if (err) {\n        throw new Error('Error connecting to database');\n      }\n\n      if (options.username && options.password) {\n        db.authenticate(options.username, options.password, function () {\n          self._get_collection(callback);\n        });\n      } else {\n        self._get_collection(callback);\n      }\n    });"],[1,"self._get_collection();\n    "],[0,"\n  }"]],"start1":2076,"start2":2076,"length1":372,"length2":36}]],"length":4991,"saved":false},"1336852233677":{"contributors":[],"silentsave":false,"ts":1336852233677,"patch":[[{"diffs":[[0,"e(db) {\n    "],[-1,""],[0,""],[1,"console.log ('called MongoStore');\n    "],[0,"this.db = db"]],"start1":793,"start2":793,"length1":24,"length2":63},{"diffs":[[0,"callback) {\n"],[1,"        console.log ('called _get_collection');\n  "],[0,"      if (se"]],"start1":1325,"start2":1325,"length1":24,"length2":74},{"diffs":[[0,"f.collection) {\n"],[1,"    "],[0,"        callback"]],"start1":1400,"start2":1400,"length1":32,"length2":36},{"diffs":[[0,"ollection);\n"],[1,"  "],[0,"      } else"]],"start1":1455,"start2":1455,"length1":24,"length2":26},{"diffs":[[0,"e {\n        "],[1,"    "],[0,"self.db.coll"]],"start1":1480,"start2":1480,"length1":24,"length2":28},{"diffs":[[0,"on) {\n          "],[1,"  "],[1,"  "],[0,"if (err) {\n     "]],"start1":1562,"start2":1562,"length1":32,"length2":36},{"diffs":[[0,"     if (err) {\n"],[1,"    "],[0,"            thro"]],"start1":1577,"start2":1577,"length1":32,"length2":36},{"diffs":[[0,"ame);\n          "],[1,"    "],[0,"} else {\n       "]],"start1":1676,"start2":1676,"length1":32,"length2":36},{"diffs":[[0,"       } else {\n"],[1,"                  console.log ('called _get_collection + got collection');\n    "],[0,"            self"]],"start1":1689,"start2":1689,"length1":32,"length2":111},{"diffs":[[0,"                "],[-1,"\n"],[1,"    \n    "],[0,"            var "]],"start1":1826,"start2":1826,"length1":33,"length2":41},{"diffs":[[0,"            "],[1,"    "],[0,"if (clear_in"]],"start1":1915,"start2":1915,"length1":24,"length2":28},{"diffs":[[0,"rval > 0) {\n"],[1,"    "],[0,"            "]],"start1":1945,"start2":1945,"length1":24,"length2":28},{"diffs":[[0,"n() {          \n"],[1,"    "],[0,"                "]],"start1":2016,"start2":2016,"length1":32,"length2":36},{"diffs":[[0,"        "],[1,"    "],[0,"}, clear"]],"start1":2113,"start2":2113,"length1":16,"length2":20},{"diffs":[[0,"f);\n            "],[-1,"}\n"],[1,"    }\n    "],[0,"            \n   "]],"start1":2154,"start2":2154,"length1":34,"length2":42},{"diffs":[[0,"   \n            "],[1,"    "],[0,"callback && call"]],"start1":2189,"start2":2189,"length1":32,"length2":36},{"diffs":[[0,"    "],[1,"    "],[0,"}      \n"],[1,"    "],[0,"    "]],"start1":2254,"start2":2254,"length1":16,"length2":24}]],"length":5225,"saved":false},"1336852417264":{"contributors":[],"silentsave":false,"ts":1336852417264,"patch":[[{"diffs":[[0,"*/\n\n"],[-1,"var mongo = require('mongodb');\nvar url = require('url');\n\n"],[0,"\n/**"]],"start1":125,"start2":125,"length1":67,"length2":8}]],"length":5166,"saved":false},"1336857378693":{"contributors":[],"silentsave":false,"ts":1336857378693,"patch":[[{"diffs":[[0,"};\n    \n    "],[1,"//"],[0,"self._get_co"]],"start1":2243,"start2":2243,"length1":24,"length2":26}]],"length":5168,"saved":false},"1336857431642":{"contributors":[],"silentsave":false,"ts":1336857431642,"patch":[[{"diffs":[[0,"    "],[-1,"//"],[0,"self"]],"start1":2251,"start2":2251,"length1":10,"length2":8}]],"length":5166,"saved":false}}}